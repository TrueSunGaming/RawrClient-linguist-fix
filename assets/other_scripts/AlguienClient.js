import {C as ee, v as m, G as O, H as tt, m as b, D as ht, a as He, l as fe, h as X, u as x, p as ct, $ as c, P as vt, d as B, E as _e, b as se, c as yt, T as J, S as ae, e as U, I as F, f as be, g as Me, M as he, i as H, j as Ut, k as Nt, n as rs, o as Mt, R as ss, q as as, r as zi, B as Wt, s as Di, A as Se, t as le, w as Yt, x as Fe, y as Tr, z as hi, F as ui, J as Ze, K as ge, L as Bi, N as jt, W as Et, U as os, O as Mr, Q as ls, V as ns, X as ms, Y as ci, Z as qe, _ as bi, a0 as Li, a1 as hs, a2 as us, a3 as cs, a4 as ds, a5 as ps} from "https://survev.io//js/CNPf2gKW.js";
class fs {
    protocol = 0;
    matchPriv = "";
    loadoutPriv = "";
    questPriv = "";
    name = "";
    useTouch = !1;
    isMobile = !1;
    bot = !1;
    loadout = {
        outfit: "",
        melee: "",
        heal: "",
        boost: "",
        emotes: []
    };
    deserialize(e) {
        this.protocol = e.readUint32(),
        this.matchPriv = e.readString(),
        this.loadoutPriv = e.readString(),
        this.questPriv = e.readString(),
        this.name = e.readString(ee.PlayerNameMaxLen),
        this.useTouch = e.readBoolean(),
        this.isMobile = e.readBoolean(),
        this.bot = e.readBoolean(),
        this.loadout.outfit = e.readGameType(),
        this.loadout.melee = e.readGameType(),
        this.loadout.heal = e.readGameType(),
        this.loadout.boost = e.readGameType(),
        this.loadout.emotes = [];
        const t = e.readUint8();
        for (let i = 0; i < t; i++) {
            const r = e.readGameType();
            this.loadout.emotes.push(r)
        }
        e.readAlignToNextByte()
    }
    serialize(e) {
        e.writeUint32(this.protocol),
        e.writeString(this.matchPriv),
        e.writeString(this.loadoutPriv),
        e.writeString(this.questPriv),
        e.writeString(this.name, ee.PlayerNameMaxLen),
        e.writeBoolean(this.useTouch),
        e.writeBoolean(this.isMobile),
        e.writeBoolean(this.bot),
        e.writeGameType(this.loadout.outfit),
        e.writeGameType(this.loadout.melee),
        e.writeGameType(this.loadout.heal),
        e.writeGameType(this.loadout.boost),
        e.writeUint8(this.loadout.emotes.length);
        for (const t of this.loadout.emotes)
            e.writeGameType(t);
        e.writeAlignToNextByte()
    }
}
class ws {
    reason = "";
    serialize(e) {
        e.writeString(this.reason)
    }
    deserialize(e) {
        this.reason = e.readString()
    }
}
class Ai {
    seq = 0;
    moveLeft = !1;
    moveRight = !1;
    moveUp = !1;
    moveDown = !1;
    shootStart = !1;
    shootHold = !1;
    portrait = !1;
    touchMoveActive = !1;
    touchMoveDir = m.create(1, 0);
    touchMoveLen = 255;
    toMouseDir = m.create(1, 0);
    toMouseLen = 0;
    inputs = [];
    useItem = "";
    addInput(e) {
        this.inputs.length < 7 && !this.inputs.includes(e) && this.inputs.push(e)
    }
    serialize(e) {
        e.writeUint8(this.seq),
        e.writeBoolean(this.moveLeft),
        e.writeBoolean(this.moveRight),
        e.writeBoolean(this.moveUp),
        e.writeBoolean(this.moveDown),
        e.writeBoolean(this.shootStart),
        e.writeBoolean(this.shootHold),
        e.writeBoolean(this.portrait),
        e.writeBoolean(this.touchMoveActive),
        this.touchMoveActive && (e.writeUnitVec(this.touchMoveDir, 8),
        e.writeUint8(this.touchMoveLen)),
        e.writeUnitVec(this.toMouseDir, 10),
        e.writeFloat(this.toMouseLen, 0, ee.MouseMaxDist, 8),
        e.writeBits(this.inputs.length, 4);
        for (let t = 0; t < this.inputs.length; t++)
            e.writeUint8(this.inputs[t]);
        e.writeGameType(this.useItem),
        e.writeBits(0, 6)
    }
    deserialize(e) {
        this.seq = e.readUint8(),
        this.moveLeft = e.readBoolean(),
        this.moveRight = e.readBoolean(),
        this.moveUp = e.readBoolean(),
        this.moveDown = e.readBoolean(),
        this.shootStart = e.readBoolean(),
        this.shootHold = e.readBoolean(),
        this.portrait = e.readBoolean(),
        this.touchMoveActive = e.readBoolean(),
        this.touchMoveActive && (this.touchMoveDir = e.readUnitVec(8),
        this.touchMoveLen = e.readUint8()),
        this.toMouseDir = e.readUnitVec(10),
        this.toMouseLen = e.readFloat(0, ee.MouseMaxDist, 8);
        const t = e.readBits(4);
        for (let i = 0; i < t; i++)
            this.inputs.push(e.readUint8());
        this.useItem = e.readGameType(),
        e.readBits(6)
    }
}
class Ss {
    teamMode;
    playerId = 0;
    started = !1;
    emotes = [];
    serialize(e) {
        e.writeUint8(this.teamMode),
        e.writeUint16(this.playerId),
        e.writeBoolean(this.started),
        e.writeUint8(this.emotes.length);
        for (let t = 0; t < this.emotes.length; t++)
            e.writeGameType(this.emotes[t]);
        e.writeAlignToNextByte()
    }
    deserialize(e) {
        this.teamMode = e.readUint8(),
        this.playerId = e.readUint16(),
        this.started = e.readBoolean();
        const t = e.readUint8();
        for (let i = 0; i < t; i++) {
            const r = e.readGameType();
            this.emotes.push(r)
        }
        e.readAlignToNextByte()
    }
}
var ye = (l => (l[l.Invalid = 0] = "Invalid",
l[l.Player = 1] = "Player",
l[l.Obstacle = 2] = "Obstacle",
l[l.Loot = 3] = "Loot",
l[l.LootSpawner = 4] = "LootSpawner",
l[l.DeadBody = 5] = "DeadBody",
l[l.Building = 6] = "Building",
l[l.Structure = 7] = "Structure",
l[l.Decal = 8] = "Decal",
l[l.Projectile = 9] = "Projectile",
l[l.Smoke = 10] = "Smoke",
l[l.Airdrop = 11] = "Airdrop",
l))(ye || {});
const Zt = {
    1: {
        serializedFullSize: 32,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeUnitVec(e.dir, 8)
        }
        ,
        serializeFull: (l, e) => {
            if (l.writeGameType(e.outfit),
            l.writeGameType(e.backpack),
            l.writeGameType(e.helmet),
            l.writeGameType(e.chest),
            l.writeGameType(e.activeWeapon),
            l.writeBits(e.layer, 2),
            l.writeBoolean(e.dead),
            l.writeBoolean(e.downed),
            l.writeBits(e.animType, 3),
            l.writeBits(e.animSeq, 3),
            l.writeBits(e.actionType, 3),
            l.writeBits(e.actionSeq, 3),
            l.writeBoolean(e.wearingPan),
            l.writeBoolean(e.healEffect),
            l.writeBoolean(e.frozen),
            l.writeBits(e.frozenOri, 2),
            l.writeBoolean(e.hasteType !== tt.None),
            e.hasteType !== tt.None && (l.writeBits(e.hasteType, 3),
            l.writeBits(e.hasteSeq, 3)),
            l.writeBoolean(e.actionItem !== ""),
            e.actionItem !== "" && l.writeGameType(e.actionItem),
            l.writeBoolean(e.hasScale),
            e.hasScale && l.writeFloat(e.scale, ee.PlayerMinScale, ee.PlayerMaxScale, 8),
            l.writeBoolean(e.role !== ""),
            e.role !== "" && l.writeGameType(e.role),
            l.writeBoolean(e.hasPerks),
            e.hasPerks) {
                const t = b.min(e.perks.length, ee.MaxPerks - 1);
                l.writeBits(t, 3);
                for (let i = 0; i < t; i++) {
                    const r = e.perks[i];
                    l.writeGameType(r.type),
                    l.writeBoolean(r.droppable)
                }
            }
            l.writeAlignToNextByte()
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.dir = l.readUnitVec(8)
        }
        ,
        deserializeFull(l, e) {
            e.outfit = l.readGameType(),
            e.backpack = l.readGameType(),
            e.helmet = l.readGameType(),
            e.chest = l.readGameType(),
            e.activeWeapon = l.readGameType(),
            e.layer = l.readBits(2),
            e.dead = l.readBoolean(),
            e.downed = l.readBoolean(),
            e.animType = l.readBits(3),
            e.animSeq = l.readBits(3),
            e.actionType = l.readBits(3),
            e.actionSeq = l.readBits(3),
            e.wearingPan = l.readBoolean(),
            e.healEffect = l.readBoolean(),
            e.frozen = l.readBoolean(),
            e.frozenOri = l.readBits(2),
            e.hasteType = 0,
            e.hasteSeq = -1,
            l.readBoolean() && (e.hasteType = l.readBits(3),
            e.hasteSeq = l.readBits(3));
            const t = l.readBoolean();
            e.actionItem = t ? l.readGameType() : "";
            const i = l.readBoolean();
            e.scale = i ? l.readFloat(ee.PlayerMinScale, ee.PlayerMaxScale, 8) : 1;
            const r = l.readBoolean();
            if (e.role = r ? l.readGameType() : "",
            e.perks = [],
            l.readBoolean()) {
                const a = l.readBits(3);
                for (let o = 0; o < a; o++) {
                    const h = l.readGameType()
                      , f = l.readBoolean();
                    e.perks.push({
                        type: h,
                        droppable: f
                    })
                }
            }
            l.readAlignToNextByte()
        }
    },
    2: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeBits(e.ori, 2),
            l.writeFloat(e.scale, ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
            l.writeBits(0, 6)
        }
        ,
        serializeFull: (l, e) => {
            l.writeFloat(e.healthT, 0, 1, 8),
            l.writeMapType(e.type),
            l.writeBits(e.layer, 2),
            l.writeBoolean(e.dead),
            l.writeBoolean(e.isDoor),
            e.isDoor && (l.writeBoolean(e.door.open),
            l.writeBoolean(e.door.canUse),
            l.writeBoolean(e.door.locked),
            l.writeBits(e.door.seq, 5)),
            l.writeBoolean(e.isButton),
            e.isButton && (l.writeBoolean(e.button.onOff),
            l.writeBoolean(e.button.canUse),
            l.writeBits(e.button.seq, 6)),
            l.writeBoolean(e.isPuzzlePiece),
            e.isPuzzlePiece && l.writeUint16(e.parentBuildingId),
            l.writeBoolean(e.isSkin),
            e.isSkin && l.writeUint16(e.skinPlayerId),
            l.writeBits(0, 5)
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.ori = l.readBits(2),
            e.scale = l.readFloat(ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
            l.readBits(6)
        }
        ,
        deserializeFull: (l, e) => {
            e.healthT = l.readFloat(0, 1, 8),
            e.type = l.readMapType(),
            e.layer = l.readBits(2),
            e.dead = l.readBoolean(),
            e.isDoor = l.readBoolean(),
            e.isDoor && (e.door = {},
            e.door.open = l.readBoolean(),
            e.door.canUse = l.readBoolean(),
            e.door.locked = l.readBoolean(),
            e.door.seq = l.readBits(5)),
            e.isButton = l.readBoolean(),
            e.isButton && (e.button = {},
            e.button.onOff = l.readBoolean(),
            e.button.canUse = l.readBoolean(),
            e.button.seq = l.readBits(6)),
            e.isPuzzlePiece = l.readBoolean(),
            e.isPuzzlePiece && (e.parentBuildingId = l.readUint16()),
            e.isSkin = l.readBoolean(),
            e.isSkin && (e.skinPlayerId = l.readUint16()),
            l.readBits(5)
        }
    },
    6: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeBoolean(e.ceilingDead),
            l.writeBoolean(e.occupied),
            l.writeBoolean(e.ceilingDamaged),
            l.writeBoolean(e.hasPuzzle),
            e.hasPuzzle && (l.writeBoolean(e.puzzleSolved),
            l.writeBits(e.puzzleErrSeq, 7)),
            l.writeBits(0, 4)
        }
        ,
        serializeFull: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeMapType(e.type),
            l.writeBits(e.ori, 2),
            l.writeBits(e.layer, 2)
        }
        ,
        deserializePart: (l, e) => {
            e.ceilingDead = l.readBoolean(),
            e.occupied = l.readBoolean(),
            e.ceilingDamaged = l.readBoolean(),
            e.hasPuzzle = l.readBoolean(),
            e.hasPuzzle && (e.puzzleSolved = l.readBoolean(),
            e.puzzleErrSeq = l.readBits(7)),
            l.readBits(4)
        }
        ,
        deserializeFull: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.type = l.readMapType(),
            e.ori = l.readBits(2),
            e.layer = l.readBits(2)
        }
    },
    7: {
        serializedFullSize: 0,
        serializePart: () => {}
        ,
        serializeFull: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeMapType(e.type),
            l.writeBits(e.ori, 2),
            l.writeBoolean(e.interiorSoundEnabled),
            l.writeBoolean(e.interiorSoundAlt);
            for (let t = 0; t < O.structureLayerCount; t++)
                l.writeUint16(e.layerObjIds[t])
        }
        ,
        deserializePart: () => {}
        ,
        deserializeFull: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.type = l.readMapType(),
            e.ori = l.readBits(2),
            e.interiorSoundEnabled = l.readBoolean(),
            e.interiorSoundAlt = l.readBoolean(),
            e.layerObjIds = [];
            for (let t = 0; t < O.structureLayerCount; t++) {
                const i = l.readUint16();
                e.layerObjIds.push(i)
            }
        }
    },
    4: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeMapType(e.type),
            l.writeBits(e.layer, 2),
            l.writeBits(0, 2)
        }
        ,
        serializeFull: () => {}
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.type = l.readMapType(),
            e.layer = l.readBits(2),
            l.readBits(2)
        }
        ,
        deserializeFull: () => {}
    },
    3: {
        serializedFullSize: 5,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16)
        }
        ,
        serializeFull: (l, e) => {
            l.writeGameType(e.type),
            l.writeUint8(e.count),
            l.writeBits(e.layer, 2),
            l.writeBoolean(e.isOld),
            l.writeBoolean(e.isPreloadedGun),
            l.writeBoolean(e.ownerId != 0),
            e.ownerId != 0 && l.writeUint16(e.ownerId),
            l.writeBits(0, 1)
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16)
        }
        ,
        deserializeFull: (l, e) => {
            e.type = l.readGameType(),
            e.count = l.readUint8(),
            e.layer = l.readBits(2),
            e.isOld = l.readBoolean(),
            e.isPreloadedGun = l.readBoolean(),
            e.hasOwner = l.readBoolean(),
            e.hasOwner && (e.ownerId = l.readUint16()),
            l.readBits(1)
        }
    },
    5: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16)
        }
        ,
        serializeFull: (l, e) => {
            l.writeUint8(e.layer),
            l.writeUint16(e.playerId)
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16)
        }
        ,
        deserializeFull: (l, e) => {
            e.layer = l.readUint8(),
            e.playerId = l.readUint16()
        }
    },
    8: {
        serializedFullSize: 0,
        serializePart: () => {}
        ,
        serializeFull: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeFloat(e.scale, ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
            l.writeMapType(e.type),
            l.writeBits(e.ori, 2),
            l.writeBits(e.layer, 2),
            l.writeUint8(e.goreKills)
        }
        ,
        deserializePart: () => {}
        ,
        deserializeFull: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.scale = l.readFloat(ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
            e.type = l.readMapType(),
            e.ori = l.readBits(2),
            e.layer = l.readBits(2),
            e.goreKills = l.readUint8()
        }
    },
    9: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeFloat(e.posZ, 0, O.projectile.maxHeight, 10),
            l.writeUnitVec(e.dir, 7)
        }
        ,
        serializeFull: (l, e) => {
            l.writeGameType(e.type),
            l.writeBits(e.layer, 2),
            l.writeBits(0, 4)
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.posZ = l.readFloat(0, O.projectile.maxHeight, 10),
            e.dir = l.readUnitVec(7)
        }
        ,
        deserializeFull: (l, e) => {
            e.type = l.readGameType(),
            e.layer = l.readBits(2),
            l.readBits(4)
        }
    },
    10: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
            l.writeFloat(e.rad, 0, ee.SmokeMaxRad, 8)
        }
        ,
        serializeFull: (l, e) => {
            l.writeBits(e.layer, 2),
            l.writeBits(e.interior, 6)
        }
        ,
        deserializePart: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16),
            e.rad = l.readFloat(0, ee.SmokeMaxRad, 8)
        }
        ,
        deserializeFull: (l, e) => {
            e.layer = l.readBits(2),
            e.interior = l.readBits(6)
        }
    },
    11: {
        serializedFullSize: 0,
        serializePart: (l, e) => {
            l.writeFloat(e.fallT, 0, 1, 7),
            l.writeBoolean(e.landed)
        }
        ,
        serializeFull: (l, e) => {
            l.writeVec(e.pos, 0, 0, 1024, 1024, 16)
        }
        ,
        deserializePart: (l, e) => {
            e.fallT = l.readFloat(0, 1, 7),
            e.landed = l.readBoolean()
        }
        ,
        deserializeFull: (l, e) => {
            e.pos = l.readVec(0, 0, 1024, 1024, 16)
        }
    },
    0: {
        serializedFullSize: 0,
        deserializeFull: () => {}
        ,
        deserializePart: () => {}
        ,
        serializeFull: () => {}
        ,
        serializePart: () => {}
    }
};
function gs(l, e) {
    if (l.writeBoolean(e.healthDirty),
    e.healthDirty && l.writeFloat(e.health, 0, 100, 8),
    l.writeBoolean(e.boostDirty),
    e.boostDirty && l.writeFloat(e.boost, 0, 100, 8),
    l.writeBoolean(e.zoomDirty),
    e.zoomDirty && l.writeUint8(e.zoom),
    l.writeBoolean(e.actionDirty),
    e.actionDirty && (l.writeFloat(e.action.time, 0, ee.ActionMaxDuration, 8),
    l.writeFloat(e.action.duration, 0, ee.ActionMaxDuration, 8),
    l.writeUint16(e.action.targetId)),
    l.writeBoolean(e.inventoryDirty),
    e.inventoryDirty) {
        l.writeGameType(e.scope);
        for (const t of Object.keys(O.bagSizes)) {
            const i = e.inventory[t] > 0;
            l.writeBoolean(i),
            i && l.writeBits(e.inventory[t], 9)
        }
    }
    if (l.writeBoolean(e.weapsDirty),
    e.weapsDirty) {
        l.writeBits(e.curWeapIdx, 2);
        for (let t = 0; t < O.WeaponSlot.Count; t++)
            l.writeGameType(e.weapons[t].type),
            l.writeUint8(e.weapons[t].ammo)
    }
    l.writeBoolean(e.spectatorCountDirty),
    e.spectatorCountDirty && l.writeUint8(e.spectatorCount),
    l.writeAlignToNextByte()
}
function ys(l, e) {
    if (e.healthDirty = l.readBoolean(),
    e.healthDirty && (e.health = l.readFloat(0, 100, 8)),
    e.boostDirty = l.readBoolean(),
    e.boostDirty && (e.boost = l.readFloat(0, 100, 8)),
    e.zoomDirty = l.readBoolean(),
    e.zoomDirty && (e.zoom = l.readUint8()),
    e.actionDirty = l.readBoolean(),
    e.actionDirty && (e.action = {},
    e.action.time = l.readFloat(0, ee.ActionMaxDuration, 8),
    e.action.duration = l.readFloat(0, ee.ActionMaxDuration, 8),
    e.action.targetId = l.readUint16()),
    e.inventoryDirty = l.readBoolean(),
    e.inventoryDirty) {
        e.scope = l.readGameType(),
        e.inventory = {};
        const t = Object.keys(O.bagSizes);
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            let s = 0;
            l.readBoolean() && (s = l.readBits(9)),
            e.inventory[r] = s
        }
    }
    if (e.weapsDirty = l.readBoolean(),
    e.weapsDirty) {
        e.curWeapIdx = l.readBits(2),
        e.weapons = [];
        for (let t = 0; t < O.WeaponSlot.Count; t++)
            e.weapons.push({
                type: l.readGameType(),
                ammo: l.readUint8()
            })
    }
    e.spectatorCountDirty = l.readBoolean(),
    e.spectatorCountDirty && (e.spectatorCount = l.readUint8()),
    l.readAlignToNextByte()
}
function xs(l, e) {
    l.writeUint8(e.players.length);
    for (let t = 0; t < e.players.length; t++) {
        const i = e.players[t];
        l.writeBoolean(i.hasData),
        i.hasData && (l.writeVec(i.pos, 0, 0, 1024, 1024, 11),
        l.writeBoolean(i.visible),
        l.writeBoolean(i.dead),
        l.writeBoolean(i.downed),
        l.writeBoolean(i.role !== ""),
        i.role !== "" && l.writeGameType(i.role))
    }
    l.writeAlignToNextByte()
}
function zs(l, e) {
    e.players = [];
    const t = l.readUint8();
    for (let i = 0; i < t; i++) {
        const r = {};
        r.hasData = l.readBoolean(),
        r.hasData && (r.pos = l.readVec(0, 0, 1024, 1024, 11),
        r.visible = l.readBoolean(),
        r.dead = l.readBoolean(),
        r.downed = l.readBoolean(),
        r.role = "",
        l.readBoolean() && (r.role = l.readGameType())),
        e.players.push(r)
    }
    l.readAlignToNextByte()
}
function bs(l, e) {
    l.writeUint8(e.players.length);
    for (let t = 0; t < e.players.length; t++) {
        const i = e.players[t];
        l.writeFloat(i.health, 0, 100, 7),
        l.writeBoolean(i.disconnected)
    }
}
function ks(l, e) {
    e.players = [];
    const t = l.readUint8();
    for (let i = 0; i < t; i++) {
        const r = {};
        r.health = l.readFloat(0, 100, 7),
        r.disconnected = l.readBoolean(),
        e.players.push(r)
    }
}
function vs(l, e) {
    l.writeUint16(e.playerId),
    l.writeUint8(e.teamId),
    l.writeUint8(e.groupId),
    l.writeString(e.name),
    l.writeGameType(e.loadout.heal),
    l.writeGameType(e.loadout.boost),
    l.writeAlignToNextByte()
}
function _s(l, e) {
    e.playerId = l.readUint16(),
    e.teamId = l.readUint8(),
    e.groupId = l.readUint8(),
    e.name = l.readString(),
    e.loadout = {},
    e.loadout.heal = l.readGameType(),
    e.loadout.boost = l.readGameType(),
    l.readAlignToNextByte()
}
function Is(l, e) {
    l.writeUint8(e.mode),
    l.writeFloat32(e.duration),
    l.writeVec(e.posOld, 0, 0, 1024, 1024, 16),
    l.writeVec(e.posNew, 0, 0, 1024, 1024, 16),
    l.writeFloat(e.radOld, 0, 2048, 16),
    l.writeFloat(e.radNew, 0, 2048, 16)
}
function Ts(l, e) {
    e.mode = l.readUint8(),
    e.duration = l.readFloat32(),
    e.posOld = l.readVec(0, 0, 1024, 1024, 16),
    e.posNew = l.readVec(0, 0, 1024, 1024, 16),
    e.radOld = l.readFloat(0, 2048, 16),
    e.radNew = l.readFloat(0, 2048, 16)
}
const re = {
    DeletedObjects: 1,
    FullObjects: 2,
    ActivePlayerId: 4,
    Gas: 8,
    GasCircle: 16,
    PlayerInfos: 32,
    DeletePlayerIds: 64,
    PlayerStatus: 128,
    GroupStatus: 256,
    Bullets: 512,
    Explosions: 1024,
    Emotes: 2048,
    Planes: 4096,
    AirstrikeZones: 8192,
    MapIndicators: 16384,
    KillLeader: 32768
};
class Ms {
    delObjIds = [];
    fullObjects = [];
    partObjects = [];
    activePlayerId = 0;
    activePlayerIdDirty = !1;
    activePlayerData;
    gasData;
    gasDirty = !1;
    gasT = 0;
    gasTDirty = !1;
    playerInfos = [];
    deletedPlayerIds = [];
    playerStatus = {
        players: []
    };
    playerStatusDirty = !1;
    groupStatus = {
        players: []
    };
    groupStatusDirty = !1;
    bullets = [];
    explosions = [];
    emotes = [];
    planes = [];
    airstrikeZones = [];
    mapIndicators = [];
    killLeaderId = 0;
    killLeaderKills = 0;
    killLeaderDirty = !1;
    ack = 0;
    serialize(e) {
        let t = 0;
        const i = e.byteIndex;
        if (e.writeUint16(t),
        this.delObjIds.length) {
            e.writeUint16(this.delObjIds.length);
            for (let s = 0; s < this.delObjIds.length; s++)
                e.writeUint16(this.delObjIds[s]);
            t |= re.DeletedObjects
        }
        if (this.fullObjects.length) {
            e.writeUint16(this.fullObjects.length);
            for (let s = 0; s < this.fullObjects.length; s++) {
                const a = this.fullObjects[s];
                e.writeUint8(a.__type),
                e.writeBytes(a.partialStream, 0, a.partialStream.byteIndex),
                e.writeBytes(a.fullStream, 0, a.fullStream.byteIndex)
            }
            t |= re.FullObjects
        }
        e.writeUint16(this.partObjects.length);
        for (let s = 0; s < this.partObjects.length; s++) {
            const a = this.partObjects[s];
            e.writeBytes(a.partialStream, 0, a.partialStream.byteIndex)
        }
        if (this.activePlayerIdDirty && (e.writeUint16(this.activePlayerId),
        t |= re.ActivePlayerId),
        gs(e, this.activePlayerData),
        this.gasDirty && (Is(e, this.gasData),
        t |= re.Gas),
        this.gasTDirty && (e.writeFloat(this.gasT, 0, 1, 16),
        t |= re.GasCircle),
        this.playerInfos.length) {
            e.writeUint8(this.playerInfos.length);
            for (let s = 0; s < this.playerInfos.length; s++)
                vs(e, this.playerInfos[s]);
            t |= re.PlayerInfos
        }
        if (this.deletedPlayerIds.length) {
            e.writeUint8(this.deletedPlayerIds.length);
            for (let s = 0; s < this.deletedPlayerIds.length; s++)
                e.writeUint16(this.deletedPlayerIds[s]);
            t |= re.DeletePlayerIds
        }
        if (this.playerStatusDirty && (xs(e, this.playerStatus),
        t |= re.PlayerStatus),
        this.groupStatusDirty && (bs(e, this.groupStatus),
        t |= re.GroupStatus),
        this.bullets.length) {
            e.writeUint8(this.bullets.length);
            for (let s = 0; s < this.bullets.length; s++) {
                const a = this.bullets[s];
                e.writeUint16(a.playerId),
                e.writeVec(a.startPos, 0, 0, 1024, 1024, 16),
                e.writeUnitVec(a.dir, 8),
                e.writeGameType(a.bulletType),
                e.writeBits(a.layer, 2),
                e.writeFloat(a.varianceT, 0, 1, 4),
                e.writeBits(a.distAdjIdx, 4),
                e.writeBoolean(a.clipDistance),
                a.clipDistance && e.writeFloat(a.distance, 0, 1024, 16),
                e.writeBoolean(a.shotFx),
                a.shotFx && (e.writeGameType(a.shotSourceType),
                e.writeBoolean(a.shotOffhand),
                e.writeBoolean(a.lastShot)),
                e.writeBoolean(a.reflectCount > 0),
                a.reflectCount > 0 && (e.writeBits(a.reflectCount, 2),
                e.writeUint16(a.reflectObjId)),
                e.writeBoolean(a.hasSpecialFx),
                a.hasSpecialFx && (e.writeBoolean(a.shotAlt),
                e.writeBoolean(a.splinter),
                e.writeBoolean(a.trailSaturated),
                e.writeBoolean(a.trailSmall),
                e.writeBoolean(a.trailThick))
            }
            e.writeAlignToNextByte(),
            t |= re.Bullets
        }
        if (this.explosions.length) {
            e.writeUint8(this.explosions.length);
            for (let s = 0; s < this.explosions.length; s++) {
                const a = this.explosions[s];
                e.writeVec(a.pos, 0, 0, 1024, 1024, 16),
                e.writeGameType(a.type),
                e.writeBits(a.layer, 2),
                e.writeAlignToNextByte()
            }
            t |= re.Explosions
        }
        if (this.emotes.length) {
            e.writeUint8(this.emotes.length);
            for (let s = 0; s < this.emotes.length; s++) {
                const a = this.emotes[s];
                e.writeUint16(a.playerId),
                e.writeGameType(a.type),
                e.writeGameType(a.itemType),
                e.writeBoolean(a.isPing),
                a.isPing && e.writeVec(a.pos, 0, 0, 1024, 1024, 16),
                e.writeAlignToNextByte()
            }
            t |= re.Emotes
        }
        if (this.planes.length) {
            e.writeUint8(this.planes.length);
            for (let s = 0; s < this.planes.length; s++) {
                const a = this.planes[s];
                e.writeUint8(a.id),
                e.writeVec(m.add(a.pos, m.create(512, 512)), 0, 0, 2048, 2048, 10),
                e.writeUnitVec(a.planeDir, 8),
                e.writeBoolean(a.actionComplete),
                e.writeBits(a.action, 3)
            }
            t |= re.Planes
        }
        if (this.airstrikeZones.length) {
            e.writeUint8(this.airstrikeZones.length);
            for (let s = 0; s < this.airstrikeZones.length; s++) {
                const a = this.airstrikeZones[s];
                e.writeVec(a.pos, 0, 0, 1024, 1024, 12),
                e.writeFloat(a.rad, 0, ee.AirstrikeZoneMaxRad, 8),
                e.writeFloat(a.duration, 0, ee.AirstrikeZoneMaxDuration, 8)
            }
            t |= re.AirstrikeZones
        }
        if (this.mapIndicators.length) {
            e.writeUint8(this.mapIndicators.length);
            for (let s = 0; s < this.mapIndicators.length; s++) {
                const a = this.mapIndicators[s];
                e.writeBits(a.id, 4),
                e.writeBoolean(a.dead),
                e.writeBoolean(a.equipped),
                e.writeGameType(a.type),
                e.writeVec(a.pos, 0, 0, 1024, 1024, 16)
            }
            e.writeAlignToNextByte(),
            t |= re.MapIndicators
        }
        this.killLeaderDirty && (e.writeUint16(this.killLeaderId),
        e.writeUint8(this.killLeaderKills),
        t |= re.KillLeader),
        e.writeUint8(this.ack);
        const r = e.byteIndex;
        e.byteIndex = i,
        e.writeUint16(t),
        e.byteIndex = r
    }
    deserialize(e, t) {
        const i = e.readUint16();
        if ((i & re.DeletedObjects) != 0) {
            const s = e.readUint16();
            for (let a = 0; a < s; a++)
                this.delObjIds.push(e.readUint16())
        }
        if ((i & re.FullObjects) != 0) {
            const s = e.readUint16();
            for (let a = 0; a < s; a++) {
                const o = {};
                o.__type = e.readUint8(),
                o.__id = e.readUint16(),
                Zt[o.__type].deserializePart(e, o),
                Zt[o.__type].deserializeFull(e, o),
                this.fullObjects.push(o)
            }
        }
        for (let s = e.readUint16(), a = 0; a < s; a++) {
            const o = {};
            o.__id = e.readUint16();
            const h = t.ELy(o.__id, e);
            Zt[h].deserializePart(e, o),
            this.partObjects.push(o)
        }
        (i & re.ActivePlayerId) != 0 && (this.activePlayerId = e.readUint16(),
        this.activePlayerIdDirty = !0);
        const r = {};
        if (ys(e, r),
        this.activePlayerData = r,
        (i & re.Gas) != 0) {
            const s = {};
            Ts(e, s),
            this.gasData = s,
            this.gasDirty = !0
        }
        if ((i & re.GasCircle) != 0 && (this.gasT = e.readFloat(0, 1, 16),
        this.gasTDirty = !0),
        (i & re.PlayerInfos) != 0) {
            const s = e.readUint8();
            for (let a = 0; a < s; a++) {
                const o = {};
                _s(e, o),
                this.playerInfos.push(o)
            }
        }
        if ((i & re.DeletePlayerIds) != 0) {
            const s = e.readUint8();
            for (let a = 0; a < s; a++) {
                const o = e.readUint16();
                this.deletedPlayerIds.push(o)
            }
        }
        if ((i & re.PlayerStatus) != 0) {
            const s = {};
            zs(e, s),
            this.playerStatus = s,
            this.playerStatusDirty = !0
        }
        if ((i & re.GroupStatus) != 0) {
            const s = {};
            ks(e, s),
            this.groupStatus = s,
            this.groupStatusDirty = !0
        }
        if ((i & re.Bullets) != 0) {
            for (let s = e.readUint8(), a = 0; a < s; a++) {
                const o = {};
                o.playerId = e.readUint16(),
                o.pos = e.readVec(0, 0, 1024, 1024, 16),
                o.dir = e.readUnitVec(8),
                o.bulletType = e.readGameType(),
                o.layer = e.readBits(2),
                o.varianceT = e.readFloat(0, 1, 4),
                o.distAdjIdx = e.readBits(4),
                o.clipDistance = e.readBoolean(),
                o.clipDistance && (o.distance = e.readFloat(0, 1024, 16)),
                o.shotFx = e.readBoolean(),
                o.shotFx && (o.shotSourceType = e.readGameType(),
                o.shotOffhand = e.readBoolean(),
                o.lastShot = e.readBoolean()),
                o.reflectCount = 0,
                o.reflectObjId = 0,
                e.readBoolean() && (o.reflectCount = e.readBits(2),
                o.reflectObjId = e.readUint16()),
                o.hasSpecialFx = e.readBoolean(),
                o.hasSpecialFx && (o.shotAlt = e.readBoolean(),
                o.splinter = e.readBoolean(),
                o.trailSaturated = e.readBoolean(),
                o.trailSmall = e.readBoolean(),
                o.trailThick = e.readBoolean()),
                this.bullets.push(o)
            }
            e.readAlignToNextByte()
        }
        if ((i & re.Explosions) != 0) {
            const s = e.readUint8();
            for (let a = 0; a < s; a++) {
                const o = {};
                o.pos = e.readVec(0, 0, 1024, 1024, 16),
                o.type = e.readGameType(),
                o.layer = e.readBits(2),
                e.readAlignToNextByte(),
                this.explosions.push(o)
            }
        }
        if ((i & re.Emotes) != 0)
            for (let s = e.readUint8(), a = 0; a < s; a++) {
                const o = {};
                o.playerId = e.readUint16(),
                o.type = e.readGameType(),
                o.itemType = e.readGameType(),
                o.isPing = e.readBoolean(),
                o.isPing && (o.pos = e.readVec(0, 0, 1024, 1024, 16)),
                e.readBits(3),
                this.emotes.push(o)
            }
        if ((i & re.Planes) != 0)
            for (let s = e.readUint8(), a = 0; a < s; a++) {
                const o = {};
                o.id = e.readUint8();
                const h = e.readVec(0, 0, 2048, 2048, 10);
                o.pos = m.create(h.x - 512, h.y - 512),
                o.planeDir = e.readUnitVec(8),
                o.actionComplete = e.readBoolean(),
                o.action = e.readBits(3),
                this.planes.push(o)
            }
        if ((i & re.AirstrikeZones) != 0)
            for (let s = e.readUint8(), a = 0; a < s; a++) {
                const o = {};
                o.pos = e.readVec(0, 0, 1024, 1024, 12),
                o.rad = e.readFloat(0, ee.AirstrikeZoneMaxRad, 8),
                o.duration = e.readFloat(0, ee.AirstrikeZoneMaxDuration, 8),
                this.airstrikeZones.push(o)
            }
        if ((i & re.MapIndicators) != 0) {
            for (let s = e.readUint8(), a = 0; a < s; a++) {
                const o = {};
                o.id = e.readBits(4),
                o.dead = e.readBoolean(),
                o.equipped = e.readBoolean(),
                o.type = e.readGameType(),
                o.pos = e.readVec(0, 0, 1024, 1024, 16),
                this.mapIndicators.push(o)
            }
            e.readAlignToNextByte()
        }
        (i & re.KillLeader) != 0 && (this.killLeaderId = e.readUint16(),
        this.killLeaderKills = e.readUint8(),
        this.killLeaderDirty = !0),
        this.ack = e.readUint8()
    }
}
function Ps(l) {
    return l ? .5 : .25
}
class Cs {
    itemSourceType = "";
    mapSourceType = "";
    damageType = ht.Player;
    targetId = 0;
    killerId = 0;
    killCreditId = 0;
    killerKills = 0;
    downed = !1;
    killed = !1;
    serialize(e) {
        e.writeUint8(this.damageType),
        e.writeGameType(this.itemSourceType),
        e.writeMapType(this.mapSourceType),
        e.writeUint16(this.targetId),
        e.writeUint16(this.killerId),
        e.writeUint16(this.killCreditId),
        e.writeUint8(this.killerKills),
        e.writeBoolean(this.downed),
        e.writeBoolean(this.killed),
        e.writeAlignToNextByte()
    }
    deserialize(e) {
        this.damageType = e.readUint8(),
        this.itemSourceType = e.readGameType(),
        this.mapSourceType = e.readMapType(),
        this.targetId = e.readUint16(),
        this.killerId = e.readUint16(),
        this.killCreditId = e.readUint16(),
        this.killerKills = e.readUint8(),
        this.downed = e.readBoolean(),
        this.killed = e.readBoolean(),
        e.readAlignToNextByte()
    }
}
class di {
    playerStats = {
        playerId: 0,
        timeAlive: 0,
        kills: 0,
        dead: !1,
        damageDealt: 0,
        damageTaken: 0
    };
    serialize(e) {
        e.writeUint16(this.playerStats.playerId),
        e.writeUint16(this.playerStats.timeAlive),
        e.writeUint8(this.playerStats.kills),
        e.writeUint8(this.playerStats.dead),
        e.writeUint16(Math.round(this.playerStats.damageDealt)),
        e.writeUint16(Math.round(this.playerStats.damageTaken))
    }
    deserialize(e) {
        const t = {};
        t.playerId = e.readUint16(),
        t.timeAlive = e.readUint16(),
        t.kills = e.readUint8(),
        t.dead = e.readUint8(),
        t.damageDealt = e.readUint16(),
        t.damageTaken = e.readUint16(),
        this.playerStats = t
    }
}
class Ds {
    teamId = 0;
    teamRank = 0;
    gameOver = !1;
    winningTeamId = 0;
    playerStats = [];
    serialize(e) {
        e.writeUint8(this.teamId),
        e.writeUint8(this.teamRank),
        e.writeUint8(+this.gameOver),
        e.writeUint8(this.winningTeamId),
        e.writeUint8(this.playerStats.length);
        for (let t = 0; t < this.playerStats.length; t++) {
            const i = this.playerStats[t]
              , r = new di;
            r.playerStats = i,
            r.serialize(e)
        }
    }
    deserialize(e) {
        this.teamId = e.readUint8(),
        this.teamRank = e.readUint8(),
        this.gameOver = e.readUint8(),
        this.winningTeamId = e.readUint8();
        for (let t = e.readUint8(), i = 0; i < t; i++) {
            const r = new di;
            r.deserialize(e),
            this.playerStats.push(r.playerStats)
        }
    }
}
class Bs {
    type = 0;
    item = "";
    count = 0;
    serialize(e) {
        e.writeUint8(this.type),
        e.writeGameType(this.item),
        e.writeUint8(this.count),
        e.writeBits(0, 6)
    }
    deserialize(e) {
        this.type = e.readUint8(),
        this.item = e.readGameType(),
        this.count = e.readUint8(),
        e.readBits(6)
    }
}
function Ls(l, e) {
    l.writeFloat32(e.width),
    l.writeUint8(e.looped),
    l.writeUint8(e.points.length);
    for (const t of e.points)
        l.writeVec(t, 0, 0, 1024, 1024, 16)
}
function As(l, e) {
    e.width = l.readFloat32(),
    e.looped = l.readUint8(),
    e.points = [];
    const t = l.readUint8();
    for (let i = 0; i < t; i++) {
        const r = l.readVec(0, 0, 1024, 1024, 16);
        e.points.push(r)
    }
}
function Es(l, e) {
    l.writeString(e.name),
    l.writeVec(e.pos, 0, 0, 1024, 1024, 16)
}
function Rs(l, e) {
    e.name = l.readString(),
    e.pos = l.readVec(0, 0, 1024, 1024, 16)
}
function Os(l, e) {
    l.writeVec(e.min, 0, 0, 1024, 1024, 16),
    l.writeVec(e.max, 0, 0, 1024, 1024, 16),
    l.writeUint32(e.color),
    l.writeFloat32(e.roughness),
    l.writeFloat32(e.offsetDist),
    l.writeBits(e.order, 7),
    l.writeBoolean(e.useAsMapShape)
}
function Fs(l, e) {
    e.min = l.readVec(0, 0, 1024, 1024, 16),
    e.max = l.readVec(0, 0, 1024, 1024, 16),
    e.color = l.readUint32(),
    e.roughness = l.readFloat32(),
    e.offsetDist = l.readFloat32(),
    e.order = l.readBits(7),
    e.useAsMapShape = l.readBoolean()
}
function Ns(l, e) {
    l.writeVec(e.pos, 0, 0, 1024, 1024, 16),
    l.writeFloat(e.scale, ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
    l.writeMapType(e.type),
    l.writeBits(e.ori, 2),
    l.writeBits(0, 2)
}
function js(l, e) {
    e.pos = l.readVec(0, 0, 1024, 1024, 16),
    e.scale = l.readFloat(ee.MapObjectMinScale, ee.MapObjectMaxScale, 8),
    e.type = l.readMapType(),
    e.ori = l.readBits(2),
    l.readBits(2)
}
class Vs {
    mapName = "";
    seed = 0;
    width = 0;
    height = 0;
    shoreInset = 0;
    grassInset = 0;
    rivers = [];
    places = [];
    objects = [];
    groundPatches = [];
    serialize(e) {
        e.writeString(this.mapName, ee.MapNameMaxLen),
        e.writeUint32(this.seed),
        e.writeUint16(this.width),
        e.writeUint16(this.height),
        e.writeUint16(this.shoreInset),
        e.writeUint16(this.grassInset),
        e.writeUint8(this.rivers.length);
        for (let t = 0; t < this.rivers.length; t++)
            Ls(e, this.rivers[t]);
        e.writeUint8(this.places.length);
        for (let t = 0; t < this.places.length; t++)
            Es(e, this.places[t]);
        e.writeUint16(this.objects.length);
        for (let t = 0; t < this.objects.length; t++)
            Ns(e, this.objects[t]);
        e.writeUint8(this.groundPatches.length);
        for (let t = 0; t < this.groundPatches.length; t++)
            Os(e, this.groundPatches[t])
    }
    deserialize(e) {
        this.mapName = e.readString(ee.MapNameMaxLen),
        this.seed = e.readUint32(),
        this.width = e.readUint16(),
        this.height = e.readUint16(),
        this.shoreInset = e.readUint16(),
        this.grassInset = e.readUint16();
        const t = e.readUint8();
        for (let a = 0; a < t; a++) {
            const o = {};
            As(e, o),
            this.rivers.push(o)
        }
        const i = e.readUint8();
        for (let a = 0; a < i; a++) {
            const o = {};
            Rs(e, o),
            this.places.push(o)
        }
        const r = e.readUint16();
        for (let a = 0; a < r; a++) {
            const o = {};
            js(e, o),
            this.objects.push(o)
        }
        const s = e.readUint8();
        for (let a = 0; a < s; a++) {
            const o = {};
            Fs(e, o),
            this.groundPatches.push(o)
        }
    }
}
class Us {
    specBegin = !1;
    specNext = !1;
    specPrev = !1;
    specForce = !1;
    serialize(e) {
        e.writeBoolean(this.specBegin),
        e.writeBoolean(this.specNext),
        e.writeBoolean(this.specPrev),
        e.writeBoolean(this.specForce),
        e.writeBits(0, 4)
    }
    deserialize(e) {
        this.specBegin = e.readBoolean(),
        this.specNext = e.readBoolean(),
        this.specPrev = e.readBoolean(),
        this.specForce = e.readBoolean(),
        e.readBits(4)
    }
}
class Ws {
    item = "";
    weapIdx = 0;
    serialize(e) {
        e.writeGameType(this.item),
        e.writeUint8(this.weapIdx),
        e.writeBits(0, 6)
    }
    deserialize(e) {
        this.item = e.readGameType(),
        this.weapIdx = e.readUint8(),
        e.readBits(6)
    }
}
class Ei {
    pos = m.create(0, 0);
    type = "";
    isPing = !1;
    serialize(e) {
        e.writeVec(this.pos, 0, 0, 1024, 1024, 16),
        e.writeGameType(this.type),
        e.writeBoolean(this.isPing),
        e.writeBits(0, 5)
    }
    deserialize(e) {
        this.pos = e.readVec(0, 0, 1024, 1024, 16),
        this.type = e.readGameType(),
        this.isPing = e.readBoolean(),
        e.readBits(5)
    }
}
class qs {
    playerId = 0;
    killerId = 0;
    role = "";
    assigned = !1;
    killed = !1;
    serialize(e) {
        e.writeUint16(this.playerId),
        e.writeUint16(this.killerId),
        e.writeGameType(this.role),
        e.writeBoolean(this.assigned),
        e.writeBoolean(this.killed),
        e.writeAlignToNextByte()
    }
    deserialize(e) {
        this.playerId = e.readUint16(),
        this.killerId = e.readUint16(),
        this.role = e.readGameType(),
        this.assigned = e.readBoolean(),
        this.killed = e.readBoolean(),
        e.readAlignToNextByte()
    }
}
class Hs {
    teamAliveCounts = [];
    serialize(e) {
        const t = this.teamAliveCounts.length;
        e.writeUint8(t);
        for (let i = 0; i < t; i++)
            e.writeUint8(this.teamAliveCounts[i])
    }
    deserialize(e) {
        const t = e.readUint8();
        for (let i = 0; i < t; i++) {
            const r = e.readUint8();
            this.teamAliveCounts.push(r)
        }
    }
}
class Gs {
    role = "";
    serialize(e) {
        e.writeGameType(this.role),
        e.writeBits(0, 6)
    }
    deserialize(e) {
        this.role = e.readGameType(),
        e.readBits(6)
    }
}
class Qs {
    requests = 0;
    enabled = !0;
    throttle = !1;
    throttleTimeout = 0;
    errorLogCount = 0;
    update() {
        const e = new Date().getTime();
        this.throttle ? e > this.throttleTimeout && (this.throttle = !1,
        this.requests = 0) : this.requests = Math.max(this.requests - 1, 0)
    }
    sample() {
        return Math.random() <= .01
    }
    store(e, t) {
        if (this.enabled) {
            if (this.requests++,
            this.requests > 5) {
                this.throttleTimeout = new Date().getTime() + 180 * 1e3,
                this.throttle = !0;
                return
            }
            fetch(He.resolveUrl("/api/report_error"), {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    loc: e,
                    ...t
                })
            })
        }
    }
    storeGeneric(e, t) {
        this.sample() && this.store("storeGeneric", {
            parent: e,
            child: t
        })
    }
    logWindowOnError(e) {
        this.errorLogCount < 2 && (this.store("windowOnError", {
            error: JSON.stringify(e)
        }),
        this.errorLogCount++)
    }
    logError(e) {
        this.store("errorLog", {
            error: e
        })
    }
}
const xe = new Qs;
setInterval( () => {
    xe.update()
}
, 1e3);
function $s(l, e, t) {
    typeof e == "function" && (t = e,
    e = null);
    const i = {
        url: He.resolveUrl(l),
        type: "POST",
        timeout: 10 * 1e3,
        xhrFields: {
            withCredentials: ct.anyLoginSupported()
        },
        headers: {
            "X-Requested-With": "XMLHttpRequest"
        }
    };
    e && (i.contentType = "application/json; charset=utf-8",
    i.data = JSON.stringify(e)),
    c.ajax(i).done(r => {
        t(null, r)
    }
    ).fail(r => {
        t(r)
    }
    )
}
class Js {
    constructor(e) {
        this.config = e,
        window.login = () => {
            this.login()
        }
        ,
        window.deleteAccount = () => {
            this.deleteAccount()
        }
        ,
        window.deleteItems = () => {
            this.ajaxRequest("/api/user/delete_items", {}, (t, i) => {
                this.loadProfile()
            }
            )
        }
        ,
        window.unlock = t => {
            console.log(`Unlocking ${t}`),
            this.unlock(t)
        }
        ,
        window.setQuest = (t, i=0) => {
            this.setQuest({
                questType: t,
                idx: i
            })
        }
        ,
        window.refreshQuest = t => {
            this.refreshQuest(t)
        }
        ,
        window.setPassUnlock = t => {
            this.setPassUnlock(t)
        }
    }
    events = {};
    requestsInFlight = 0;
    loggingIn = !1;
    loggedIn = !1;
    profile = {
        linkedGoogle: !1,
        linkedTwitch: !1,
        linkedDiscord: !1,
        usernameSet: !1,
        username: "",
        slug: "",
        usernameChangeTime: 0
    };
    loadout = fe.defaultLoadout();
    loadoutPriv = "";
    items = [];
    quests = [];
    questPriv = "";
    pass = {};
    ajaxRequest(e, t, i) {
        typeof t == "function" && (i = t,
        t = null),
        this.requestsInFlight++,
        this.emit("request", this),
        $s(e, t, (r, s) => {
            i(r, s),
            this.requestsInFlight--,
            this.emit("request", this),
            this.requestsInFlight == 0 && this.emit("requestsComplete")
        }
        )
    }
    addEventListener(e, t) {
        this.events[e] = this.events[e] || [],
        this.events[e].push(t)
    }
    removeEventListener(e, t) {
        const i = this.events[e] || [];
        for (let r = i.length - 1; r >= 0; r--)
            i[r] == t && i.splice(r, 1)
    }
    emit(e, ...t) {
        const i = (this.events[e] || []).slice(0);
        for (let r = 0; r < i.length; r++)
            i[r](...t)
    }
    init() {
        if (this.config.get("sessionCookie") && this.setSessionCookies(),
        X.getCookie("app-data")) {
            this.login();
            return
        }
        this.emit("request", this),
        this.emit("items", []);
        const e = this.config.get("loadout");
        this.loadout = x.mergeDeep({}, fe.defaultLoadout(), e),
        this.emit("loadout", this.loadout)
    }
    setSessionCookies() {
        this.clearSessionCookies(),
        document.cookie = this.config.get("sessionCookie"),
        document.cookie = `app-data=${Date.now()}`
    }
    clearSessionCookies() {
        document.cookie = "app-sid=;expires=Thu, 01 Jan 1970 00:00:01 GMT;",
        document.cookie = "app-data=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"
    }
    loginWithAccessToken(e, t, i) {
        t( (r, s) => {
            if (r) {
                this.emit("error", "login_failed");
                return
            }
            const a = i(s);
            this.ajaxRequest(`${e}?access_token=${a}`, (o, h) => {
                o ? this.emit("error", "login_failed") : (this.config.set("sessionCookie", h.cookie),
                this.setSessionCookies(),
                this.login())
            }
            )
        }
        )
    }
    login() {
        X.getCookie("app-data") && (this.loadProfile(),
        this.getPass(!0))
    }
    logout() {
        this.config.set("profile", null),
        this.config.set("sessionCookie", null),
        this.config.set("loadout", fe.defaultLoadout()),
        this.ajaxRequest("/api/user/logout", () => {
            window.location.reload()
        }
        )
    }
    loadProfile() {
        this.loggingIn = !this.loggedIn,
        this.ajaxRequest("/api/user/profile", (e, t) => {
            const i = this.loggingIn;
            if (this.loggingIn = !1,
            this.loggedIn = !1,
            this.profile = {},
            this.loadoutPriv = "",
            this.items = [],
            e)
                xe.storeGeneric("account", "load_profile_error");
            else if (t.banned)
                this.emit("error", "account_banned", t.reason);
            else if (t.success) {
                this.loggedIn = !0,
                this.profile = t.profile,
                this.loadoutPriv = t.loadoutPriv,
                this.items = t.items,
                this.loadout = t.loadout;
                const r = this.config.get("profile") || {
                    slug: ""
                };
                r.slug = t.profile.slug,
                this.config.set("profile", r)
            }
            this.loggedIn || this.config.set("sessionCookie", null),
            i && this.loggedIn && this.emit("login", this),
            this.emit("items", this.items),
            this.emit("loadout", this.loadout)
        }
        )
    }
    resetStats() {
        this.ajaxRequest("/api/user/reset_stats", e => {
            e && (xe.storeGeneric("account", "reset_stats_error"),
            this.emit("error", "server_error"))
        }
        )
    }
    deleteAccount() {
        this.ajaxRequest("/api/user/delete", e => {
            if (e) {
                xe.storeGeneric("account", "delete_error"),
                this.emit("error", "server_error");
                return
            }
            this.config.set("profile", null),
            this.config.set("sessionCookie", null),
            window.location.reload()
        }
        )
    }
    setUsername(e, t) {
        const i = {
            username: e
        };
        this.ajaxRequest("/api/user/username", i, (r, s) => {
            if (r) {
                xe.storeGeneric("account", "set_username_error"),
                t(r);
                return
            }
            s.result == "success" ? (this.loadProfile(),
            t()) : t(s.result)
        }
        )
    }
    setLoadout(e) {
        const t = this.loadout;
        if (this.loadout = e,
        this.emit("loadout", this.loadout),
        this.config.set("loadout", e),
        !X.getCookie("app-data"))
            return;
        const i = {
            loadout: e
        };
        this.ajaxRequest("/api/user/loadout", i, (r, s) => {
            r && (xe.storeGeneric("account", "set_loadout_error"),
            this.emit("error", "server_error")),
            r || !s.loadout ? this.loadout = t : (this.loadout = s.loadout,
            this.loadoutPriv = s.loadoutPriv),
            this.emit("loadout", this.loadout)
        }
        )
    }
    setItemStatus(e, t) {
        if (t.length != 0) {
            for (let r = 0; r < t.length; r++) {
                const s = this.items.find(a => a.type == t[r]);
                s && (s.status = Math.max(s.status, e))
            }
            const i = {
                status: e,
                itemTypes: t
            };
            this.emit("items", this.items),
            this.ajaxRequest("/api/user/set_item_status", i, r => {
                r && xe.storeGeneric("account", "set_item_status_error")
            }
            )
        }
    }
    unlock(e) {}
    setQuest(e) {
        this.ajaxRequest("/api/user/set_quest", e, () => {
            this.getPass(!1)
        }
        )
    }
    getPass(e) {}
    setPassUnlock(e) {
        const t = {
            unlockType: e
        };
        this.ajaxRequest("/api/user/set_pass_unlock", t, (i, r) => {
            i || !r.success ? xe.storeGeneric("account", "set_pass_unlock_error") : this.getPass(!1)
        }
        )
    }
    refreshQuest(e) {
        const t = {
            idx: e
        };
        this.ajaxRequest("/api/user/refresh_quest", t, (i, r) => {
            if (i) {
                xe.storeGeneric("account", "refresh_quest_error");
                return
            }
            r.success ? this.getPass(!1) : this.emit("pass", this.pass, this.quests, !1)
        }
        )
    }
}
class Xs {
    introMusic = !0;
    soundUpdateThrottle = 0;
    tracks;
    trackToIdx;
    initTime;
    constructor() {
        this.tracks = [],
        this.trackToIdx = {};
        const e = (t, i, r, s) => {
            this.tracks.push({
                name: t,
                sound: i,
                channel: r,
                immediateMode: s,
                inst: null,
                instSound: "",
                filter: "",
                weight: 0,
                volume: 0
            }),
            this.trackToIdx[t] = this.tracks.length - 1
        }
        ;
        e("music", "menu_music", "music", !1),
        e("wind", "ambient_wind_01", "ambient", !1),
        e("river", "ambient_stream_01", "ambient", !1),
        e("waves", "ambient_waves_01", "ambient", !1),
        e("interior_0", "", "ambient", !0),
        e("interior_1", "", "ambient", !0),
        this.initTime = Date.now()
    }
    getTrack(e) {
        return this.tracks[this.trackToIdx[e]]
    }
    onGameStart() {
        this.introMusic = !1;
        for (let e = 0; e < this.tracks.length; e++)
            this.tracks[e].weight = 0;
        this.getTrack("wind").weight = 1,
        this.soundUpdateThrottle = 0
    }
    onGameComplete(e) {
        for (let t = 0; t < this.tracks.length; t++) {
            const i = this.tracks[t];
            i.immediateMode && (i.weight = 0)
        }
        this.getTrack("river").weight = 0
    }
    update(e, t, i) {
        let r = !1;
        this.soundUpdateThrottle -= e,
        this.soundUpdateThrottle <= 0 && (this.soundUpdateThrottle = .2,
        r = !0);
        let s = 0;
        for (let a = this.tracks.length - 1; a >= 0; a--) {
            const o = this.tracks[a];
            if (!o.inst && o.sound && t.isSoundLoaded(o.sound, o.channel) && (console.log("Start track", o.sound, o.channel),
            o.inst = t.playSound(o.sound, {
                channel: o.channel,
                startSilent: !0,
                loop: o.channel == "ambient",
                forceStart: !0,
                filter: o.filter,
                forceFilter: !0
            }),
            o.instSound = o.sound,
            a == 0 && console.log("Play delay", Date.now() - this.initTime)),
            o.inst && r) {
                const h = o.weight * (1 - s);
                s += h,
                o.volume = h;
                const f = t.getSoundDefVolume(o.sound, o.channel);
                t.setVolume(o.inst, h * f, o.channel)
            }
            o.inst && (!o.sound && b.eqAbs(t.getVolume(o.inst), 0) || o.sound && o.sound != o.instSound) && (console.log("Stop track", o.name, o.channel),
            t.stopSound(o.inst),
            o.inst = null,
            o.instSound = ""),
            o.immediateMode && (o.sound = "",
            o.weight = 0)
        }
        if (this.introMusic) {
            const a = this.getTrack("music");
            a.inst && (a.weight = b.min(a.weight + e, 1));
            const o = this.getTrack("wind");
            a.inst && !t.isSoundPlaying(a.inst) && (o.weight = b.min(o.weight + e, 1))
        }
    }
}
const It = window.navigator.userAgent.includes("iPod") || window.navigator.userAgent.includes("iPhone") || window.navigator.userAgent.includes("iPad");
let Pr = null
  , Cr = !1;
function Ks(l) {
    try {
        return l.createGain().disconnect(l.destination),
        !1
    } catch {
        return !0
    }
}
const nt = 128;
class Ri {
    constructor(e) {
        this.ctx = e,
        this.volumeOld = this.volume,
        this.panOld = this.pan,
        this.gainNode = this.ctx.createGain(),
        this.pannerNode = this.ctx.createPanner(),
        this.pannerNode.panningModel = "equalpower",
        this.gainNode.connect(this.pannerNode)
    }
    sound = null;
    id = 0;
    volume = 1;
    volumeOld;
    pan = 0;
    panOld;
    ambient;
    sourceNode = null;
    destination = null;
    paramEvents = 0;
    gainNode;
    pannerNode;
    stopTime = 0;
    stopping = !1;
    playState = "playFinished";
    setGain(e) {
        this.stopping || (It ? this.gainNode.gain.value = e : (this.gainNode.gain.setTargetAtTime(e, this.ctx.currentTime, .02),
        ++this.paramEvents))
    }
    setPan(e) {
        this.stopping || (this.pannerNode.setPosition(e, 0, -.5),
        this.paramEvents += 3)
    }
    start(e, t, i, r, s, a, o, h, f) {
        this.volume = this.volumeOld = i,
        this.pan = this.panOld = r,
        this.ambient = h,
        this.stopping = !1,
        this.destination = e,
        this.sourceNode = this.ctx.createBufferSource(),
        this.sourceNode.buffer = t,
        this.sourceNode.connect(this.gainNode),
        this.pannerNode.connect(this.destination),
        this.sourceNode.loop = s,
        It ? this.gainNode.gain.value = i : (this.gainNode.gain.setValueAtTime(i, this.ctx.currentTime),
        ++this.paramEvents),
        this.setPan(r),
        this.sourceNode.detune && (this.sourceNode.detune.value = f),
        this.sourceNode.start(this.ctx.currentTime + a, o),
        this.stopTime = s ? 1e100 : this.ctx.currentTime + a + t.duration - o,
        this.playState = "playSucceeded"
    }
    stop() {
        this.stopping || (this.setGain(0),
        this.stopTime = this.ctx.currentTime + .1,
        this.stopping = !0,
        this.playState = "playInterrupted")
    }
    disconnect() {
        if (this.sound?.instances.splice(this.sound?.instances.indexOf(this), 1),
        this.sound = null,
        this.sourceNode?.stop(0),
        this.sourceNode?.disconnect(this.gainNode),
        this.pannerNode?.disconnect(this.destination),
        It)
            try {
                this.sourceNode.buffer = Pr
            } catch {}
        this.destination = null,
        this.sourceNode = null,
        this.playState = "playFinished"
    }
    reallocNodes() {
        this.gainNode.disconnect(this.pannerNode),
        this.gainNode = this.ctx.createGain(),
        this.pannerNode = this.ctx.createPanner(),
        this.pannerNode.panningModel = "equalpower",
        this.gainNode.connect(this.pannerNode),
        this.paramEvents = 0
    }
}
let Vt = null;
class Oi {
    constructor(e) {
        this.instance = e,
        this.id = e.id
    }
    id;
    check(e) {
        this.id != this.instance.id && (this.instance = Vt,
        this.id = Vt?.id)
    }
    stop() {
        this.check(),
        this.instance.stop()
    }
    get volume() {
        return this.check(),
        this.instance.volume
    }
    set volume(e) {
        this.check(!0),
        this.instance.volume = e
    }
    get pan() {
        return this.check(),
        this.instance.pan
    }
    set pan(e) {
        this.check(!0),
        this.instance.pan = e
    }
    get playState() {
        return this.check(),
        this.instance.playState
    }
}
let Ye = null;
class Ys {
    constructor(e, t, i, r, s) {
        if (this.ctx = e,
        this.inNode = t,
        this.outNode = i,
        this.name = r,
        this.params = s,
        this.volume = s.volume != null ? s.volume : 1,
        this.echoVolume = s.echoVolume || 0,
        this.echoDelay = s.echoDelay || 0,
        this.echoLowPass = s.echoLowPass || 3e3,
        this.stereoSpread = s.stereoSpread || 0,
        !Cr) {
            const a = this.ctx.createGain();
            this.inNode.connect(a),
            this.inNode = a
        }
        this.convolverNode = this.ctx.createConvolver(),
        this.echoVolume && (this.echoLowPassNode = this.ctx.createBiquadFilter(),
        this.echoLowPassNode.type = "lowpass",
        this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0),
        this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
        this.echoDelayNode = this.ctx.createDelay(this.echoDelay || .01),
        this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0)),
        this.stereoSpread && (this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread),
        this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0),
        this.mergerNode = this.ctx.createChannelMerger(2))
    }
    volume;
    echoVolume;
    echoDelay;
    echoLowPass;
    stereoSpread;
    gainNode = null;
    convolverNode = null;
    echoGainNode = null;
    echoLowPassNode = null;
    echoDelayNode = null;
    stereoDelayNode = null;
    mergerNode = null;
    targetLevel = 0;
    gain = 0;
    drainEndTime = 0;
    active = !1;
    isConnected() {
        return this.gainNode != null
    }
    connect() {
        if (this.gainNode = this.ctx.createGain(),
        this.gainNode.channelCount = 1,
        this.gainNode.channelCountMode = "explicit",
        this.gainNode.gain.setValueAtTime(0, 0),
        this.echoVolume && (this.echoGainNode = this.ctx.createGain(),
        this.echoGainNode.channelCount = 1,
        this.echoGainNode.channelCountMode = "explicit",
        this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0)),
        this.inNode.connect(this.gainNode),
        this.gainNode.connect(this.convolverNode),
        this.echoVolume && (this.convolverNode?.connect(this.echoGainNode),
        this.echoGainNode?.connect(this.echoLowPassNode),
        this.echoLowPassNode?.connect(this.echoDelayNode),
        this.echoDelayNode?.connect(this.convolverNode)),
        this.stereoSpread) {
            const {buffer: e} = this.convolverNode;
            e && e.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
            this.convolverNode?.connect(this.stereoDelayNode),
            this.convolverNode?.connect(this.mergerNode, 0, 0),
            this.stereoDelayNode?.connect(this.mergerNode, 0, 1),
            this.mergerNode?.connect(this.outNode)
        } else
            this.convolverNode?.connect(this.outNode)
    }
    disconnect() {
        this.inNode.disconnect(this.gainNode),
        this.gainNode?.disconnect(this.convolverNode),
        this.echoVolume && (this.convolverNode?.disconnect(this.echoGainNode),
        this.echoGainNode?.disconnect(this.echoLowPassNode),
        this.echoLowPassNode?.disconnect(this.echoDelayNode),
        this.echoDelayNode?.disconnect(this.convolverNode)),
        this.stereoSpread ? (this.convolverNode?.disconnect(this.stereoDelayNode),
        this.convolverNode?.disconnect(this.mergerNode, 0, 0),
        this.stereoDelayNode?.disconnect(this.mergerNode, 0, 1),
        this.mergerNode?.disconnect(this.outNode)) : this.convolverNode?.disconnect(this.outNode),
        this.gainNode = null,
        this.echoGainNode = null
    }
    setGain(e, t, i) {
        if (e *= this.volume,
        this.gain != e) {
            if (e != 0 && !this.gainNode && this.connect(),
            e == 0) {
                this.echoGainNode && this.echoGainNode.gain.setValueAtTime(0, i);
                const {buffer: r} = this.convolverNode
                  , s = r ? r.duration : 0;
                this.drainEndTime = i + s + this.echoDelay + this.stereoSpread
            }
            this.gain == 0 && this.echoGainNode && this.echoGainNode.gain.setValueAtTime(this.echoVolume, t),
            this.gainNode?.gain.setValueAtTime(this.gain, t),
            this.gainNode?.gain.linearRampToValueAtTime(e, i),
            this.gain = e
        }
    }
}
class Zs {
    ctx = new (window.AudioContext || window.webkitAudioContext);
    masterGainNode;
    compressorNode;
    reverbNode;
    eqNodes = {};
    files = {};
    sounds = {};
    instances = [];
    instanceId = 0;
    playingInstances = [];
    reverbs = {};
    activeReverbs = [];
    reverbFadeEndTime = 0;
    volume = 1;
    volumeOld;
    muted = !1;
    mutedOld;
    runningOfflineTest;
    offlineCtx;
    startTime;
    onfileload = function(...e) {}
    ;
    PLAY_INITED = "playInited";
    PLAY_SUCCEEDED = "playSucceeded";
    PLAY_INTERRUPTED = "playInterrupted";
    PLAY_FINISHED = "playFinished";
    PLAY_FAILED = "playFailed";
    constructor() {
        if (It) {
            const t = this.ctx.createBuffer(1, 1, 44100)
              , i = this.ctx.createBufferSource();
            i.buffer = t,
            i.connect(this.ctx.destination),
            i.start(),
            i.disconnect(this.ctx.destination),
            this.ctx.close(),
            this.ctx = new (window.AudioContext || window.webkitAudioContext)
        }
        Cr = Ks(this.ctx),
        window.audioEngine = this,
        this.masterGainNode = this.ctx.createGain(),
        this.compressorNode = this.ctx.createDynamicsCompressor(),
        this.masterGainNode.connect(this.compressorNode),
        this.compressorNode.connect(this.ctx.destination),
        this.reverbNode = this.ctx.createGain(),
        this.reverbNode.connect(this.masterGainNode);
        const e = {
            muffled: [[20, 2.8284 / 2, -6, "peaking"], [40, 2.8284 / 2, -7, "peaking"], [80, 2.8284 / 2, -10, "peaking"], [160, 2.8284 / 2, -13, "peaking"], [320, 2.8284 / 2, -22, "peaking"], [640, 2.8284 / 2, -18, "peaking"], [1280, 2.8284 / 2, -25, "peaking"], [2560, 2.8284 / 2, -10, "peaking"], [5120, 2.8284 / 2, -30, "peaking"], [10240, 2.8284 / 2, -25, "peaking"]],
            club: [[20, 2.8284 / 2, -6, "lowshelf"], [63, 2.8284 / 2, -3, "lowshelf"], [125, 2.8284 / 2, -3, "lowshelf"], [250, 2.8284 / 2, -6, "lowshelf"], [500, 2.8284 / 2, -18, "peaking"], [1e3, 2.8284 / 2, -36, "peaking"], [2e3, 2.8284 / 2, -48, "peaking"], [4e3, 2.8284 / 2, -50, "highshelf"], [8e3, 2.8284 / 2, -50, "highshelf"], [16e3, 2.8284 / 2, -50, "highshelf"]]
        };
        Object.keys(e).forEach(t => {
            const i = this.ctx.createGain();
            i.gain.setValueAtTime(16, 0);
            const r = e[t];
            let s = i;
            for (let a = 0; a < r.length; a++) {
                const o = this.ctx.createBiquadFilter();
                s.connect(o),
                s = o,
                o.frequency.setValueAtTime(r[a][0], 0),
                o.Q.setValueAtTime(r[a][1], 0),
                o.gain.setValueAtTime(r[a][2], 0),
                o.type = r[a][3]
            }
            s.connect(this.reverbNode),
            this.eqNodes[t] = i
        }
        );
        for (let t = 0; t < nt; t++) {
            const i = new Ri(this.ctx);
            this.instances[t] = i
        }
        if (Vt = new Ri(this.ctx),
        Ye = new Oi(Vt),
        this.volumeOld = this.volume,
        this.mutedOld = this.muted,
        this.ctx.state == "suspended") {
            const t = () => {
                this.ctx.resume();
                const i = this.ctx.createBufferSource();
                i.buffer = this.ctx.createBuffer(1, 1, 22050),
                i.connect(this.ctx.destination),
                i.start(),
                setTimeout( () => {
                    this.ctx.state == "running" && (document.body.removeEventListener("mousedown", t, !1),
                    document.body.removeEventListener("touchend", t, !1))
                }
                , 0)
            }
            ;
            document.body.addEventListener("mousedown", t, !1),
            document.body.addEventListener("touchend", t, !1)
        }
        It && (Pr = this.ctx.createBuffer(1, 1, 22050))
    }
    loadFile(e, t) {
        if (this.files[e] != null)
            return t(e),
            this.files[e];
        this.files[e] = {
            buffer: null
        };
        const i = new XMLHttpRequest;
        i.open("GET", e),
        i.responseType = "arraybuffer";
        const r = function(a) {
            console.error(`Failed loading sound file: ${e}`)
        };
        return i.addEventListener("load", s => {
            const a = i.response;
            if (!a) {
                r();
                return
            }
            this.ctx.decodeAudioData(a, o => {
                this.files[e].buffer = o,
                t(e)
            }
            , () => {
                console.error(`Failed decoding sound: ${e}`)
            }
            )
        }
        ),
        i.addEventListener("abort", r),
        i.addEventListener("error", r),
        i.addEventListener("timeout", r),
        i.send(),
        this.files[e]
    }
    registerSound(e, t, i) {
        const s = {
            file: this.loadFile(e, this.onfileload.bind(this)),
            canCoalesce: !!i.canCoalesce,
            maxInstances: i.channels || 16,
            volume: i.volume || 1,
            instances: []
        };
        this.sounds[t] = s
    }
    play(e, t) {
        const i = this.sounds[e];
        if (!i)
            return console.error(`No sound named: ${e}`),
            Ye;
        const r = t.filter || "none";
        let s = t.volume != null ? t.volume : 1;
        s *= i.volume,
        s = this.muted ? 0 : s;
        const a = t.pan || 0
          , o = !!t.loop
          , h = t.delay ? t.delay * .001 : 0
          , f = t.offset ? t.offset : 0
          , u = t.ambient || !1
          , d = t.detune || 0;
        if (!i.file.buffer || this.muted && !t.loop)
            return Ye;
        if (r !== "none" && r !== "reverb" && r !== "muffled" && r !== "club")
            return console.error(`Invalid filter: ${r}. Only valid filters are 'none', 'reverb', 'muffled' and 'club'.`),
            Ye;
        if (i.canCoalesce) {
            const M = this.ctx.currentTime + i.file.buffer.duration;
            for (let I = 0; I < i.instances.length; I++) {
                const v = i.instances[I];
                if (Math.abs(M - v.stopTime) > .03)
                    continue;
                const k = v.volume * v.volume + s * s
                  , _ = v.volume * v.pan + s * a
                  , A = v.volume + s;
                return v.volume = Math.sqrt(k),
                v.pan = _ / Math.max(.001, A),
                Ye
            }
        }
        for (let y = 0; y < nt && (++this.instanceId,
        !!this.instances[this.instanceId % nt].sound); y++)
            ;
        const p = this.instances[this.instanceId % nt];
        if (p.sound)
            return console.error(`All ${nt} sound instances in use. You are using way too many sounds!`),
            Ye;
        p.id = this.instanceId;
        const w = p.paramEvents > 150
          , S = p.paramEvents > 20 && !(this.instanceId % 7);
        for ((w || S) && p.reallocNodes(); i.instances.length >= i.maxInstances; ) {
            let y = i.instances[0];
            for (let M = 1; M < i.instances.length; M++)
                y.stopTime > i.instances[M].stopTime && (y = i.instances[M]);
            y.disconnect()
        }
        p.sound = i,
        i.instances.push(p);
        const g = r === "none" ? this.masterGainNode : r === "reverb" ? this.reverbNode : this.eqNodes[r];
        return p.start(g, i.file.buffer, s, a, o, h, f, u, d),
        this.playingInstances.includes(p) || this.playingInstances.push(p),
        new Oi(p)
    }
    registerReverb(e, t, i) {
        const r = new Ys(this.ctx,this.reverbNode,this.masterGainNode,t,i);
        this.loadFile(e, s => {
            r.convolverNode.buffer = this.files[s].buffer,
            this.onfileload(s)
        }
        ),
        this.reverbs[t] = r
    }
    setReverbs(e) {
        for (let t = 0; t < this.activeReverbs.length; t++) {
            const i = this.activeReverbs[t];
            e[i.name] || (i.targetLevel = 0)
        }
        for (const t in e) {
            if (!e[t])
                continue;
            const i = this.reverbs[t];
            if (!i) {
                console.error(`No reverb named ${t}`);
                continue
            }
            this.reverbs[t].active || (this.activeReverbs.push(i),
            i.active = !0),
            i.targetLevel = e[t]
        }
    }
    stop(e=!0) {
        for (let t = 0; t < nt; t++) {
            const i = this.instances[t];
            e && i.ambient || i.sound && i.stop()
        }
    }
    update(e) {
        this.ctx.state == "suspended" && this.ctx.resume();
        const t = this.muted ? 0 : this.volume
          , i = this.mutedOld ? 0 : this.volumeOld;
        this.volumeOld = this.volume,
        this.mutedOld = this.muted,
        t != i && this.masterGainNode.gain.setTargetAtTime(t, this.ctx.currentTime, .02);
        for (let r = this.playingInstances.length - 1; r >= 0; r--) {
            const s = this.playingInstances[r];
            s.volumeOld != s.volume && (s.volumeOld = s.volume,
            s.setGain(s.volume)),
            s.panOld != s.pan && (s.panOld = s.pan,
            s.setPan(s.pan)),
            s.sound && this.ctx.currentTime > s.stopTime && s.disconnect(),
            s.sound || this.playingInstances.splice(r, 1)
        }
        if (this.ctx.currentTime > this.reverbFadeEndTime) {
            const r = this.ctx.currentTime + .006
              , s = .025;
            this.reverbFadeEndTime = r + s;
            let a = 0;
            for (let h = 0; h < this.activeReverbs.length; h++) {
                const f = this.activeReverbs[h];
                a += f.targetLevel
            }
            const o = a > 1 ? 1 / a : 1;
            for (let h = 0; h < this.activeReverbs.length; h++) {
                const f = this.activeReverbs[h]
                  , u = Math.sqrt(o * f.targetLevel);
                f.setGain(u, r, this.reverbFadeEndTime)
            }
            for (let h = this.activeReverbs.length - 1; h >= 0; h--) {
                const f = this.activeReverbs[h]
                  , u = this.ctx.currentTime > f.drainEndTime;
                f.gain == 0 && u && (f.isConnected() && f.disconnect(),
                f.active = !1,
                this.activeReverbs.splice(h, 1))
            }
        }
    }
    setMute(e) {
        this.muted = e
    }
    on(e, t, i) {
        if (e != "fileload") {
            console.error('Only "fileload" event supported');
            return
        }
        this.onfileload = t.bind(i)
    }
    updatePerformanceTest() {
        if (this.runningOfflineTest = this.runningOfflineTest != null ? this.runningOfflineTest : !1,
        this.runningOfflineTest)
            return;
        this.runningOfflineTest = !0;
        const e = 10;
        this.offlineCtx = new OfflineAudioContext(2,e * this.ctx.sampleRate,this.ctx.sampleRate);
        const t = this.offlineCtx.createBuffer(2, e * this.ctx.sampleRate, this.ctx.sampleRate);
        for (let h = 0; h < t.numberOfChannels; h++) {
            const f = t.getChannelData(h);
            for (let u = 0; u < f.length; u++)
                f[u] = Math.sin(u / 2333) * Math.sin(u / 5741) * 2 * Math.random() - 1
        }
        const i = this.offlineCtx.createBufferSource();
        i.buffer = t;
        const r = this.offlineCtx.createConvolver()
          , a = this.offlineCtx.createBuffer(1, 4 * this.ctx.sampleRate, this.ctx.sampleRate);
        for (let h = 0; h < a.numberOfChannels; h++) {
            const f = a.getChannelData(h);
            for (let u = 0; u < f.length; u++)
                f[u] = 2 * Math.random() - 1
        }
        r.buffer = a;
        const o = {
            echoVolume: .5,
            echoLowPass: 800,
            echoDelay: .25,
            stereoSpread: .004
        };
        o.convolverNode = r,
        o.echoLowPassNode = this.offlineCtx.createBiquadFilter(),
        o.echoLowPassNode.type = "lowpass",
        o.echoLowPassNode.frequency.setValueAtTime(o.echoLowPass, 0),
        o.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
        o.echoDelayNode = this.offlineCtx.createDelay(o.echoDelay),
        o.echoDelayNode.delayTime.setValueAtTime(o.echoDelay, 0),
        o.stereoDelayNode = this.offlineCtx.createDelay(o.stereoSpread),
        o.stereoDelayNode.delayTime.setValueAtTime(o.stereoSpread, 0),
        o.mergerNode = this.offlineCtx.createChannelMerger(2),
        o.gainNode = this.offlineCtx.createGain(),
        o.gainNode.channelCount = 1,
        o.gainNode.channelCountMode = "explicit",
        o.gainNode.gain.setValueAtTime(1, 0),
        o.echoGainNode = this.offlineCtx.createGain(),
        o.echoGainNode.channelCount = 1,
        o.echoGainNode.channelCountMode = "explicit",
        o.echoGainNode.gain.setValueAtTime(o.echoVolume, 0),
        o.outNode = this.offlineCtx.createGain(),
        o.gainNode.connect(o.convolverNode);
        {
            const {buffer: h} = o.convolverNode;
            h && h.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
            o.convolverNode.connect(o.stereoDelayNode),
            o.convolverNode.connect(o.mergerNode, 0, 0),
            o.stereoDelayNode?.connect(o.mergerNode, 0, 1),
            o.mergerNode?.connect(o.outNode)
        }
        console.log("starting convolver"),
        i.connect(o.gainNode),
        o.outNode.connect(this.offlineCtx.destination),
        i.start(),
        this.startTime = performance.now(),
        this.offlineCtx.oncomplete = h => {
            const f = performance.now();
            console.log("Offline render time: ", f - this.startTime),
            this.runningOfflineTest = !1
        }
        ,
        this.offlineCtx.startRendering()
    }
}
const Ae = {
    Sound: new Zs
}
  , ea = {
    players: {
        m9_01: {
            path: "audio/guns/m9_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m9_reload_01: {
            path: "audio/guns/m9_reload_01.mp3",
            volume: 1
        },
        m9_reload_02: {
            path: "audio/guns/m9_reload_02.mp3",
            volume: 1
        },
        m9_switch_01: {
            path: "audio/guns/m9_switch_01.mp3",
            volume: 1
        },
        m93r_01: {
            path: "audio/guns/m93r_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m93r_reload_01: {
            path: "audio/guns/m93r_reload_01.mp3",
            volume: 1
        },
        m93r_reload_02: {
            path: "audio/guns/m93r_reload_02.mp3",
            volume: 1
        },
        m93r_switch_01: {
            path: "audio/guns/m93r_switch_01.mp3",
            volume: 1
        },
        glock_01: {
            path: "audio/guns/glock_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        glock_reload_01: {
            path: "audio/guns/glock_reload_01.mp3",
            volume: 1
        },
        glock_reload_02: {
            path: "audio/guns/glock_reload_02.mp3",
            volume: 1
        },
        glock_switch_01: {
            path: "audio/guns/glock_switch_01.mp3",
            volume: 1
        },
        p30l_01: {
            path: "audio/guns/p30l_01.mp3",
            volume: 1.2,
            maxInstances: 5
        },
        p30l_reload_01: {
            path: "audio/guns/p30l_reload_01.mp3",
            volume: 1.4
        },
        p30l_reload_02: {
            path: "audio/guns/p30l_reload_02.mp3",
            volume: 1.4
        },
        p30l_switch_01: {
            path: "audio/guns/p30l_switch_01.mp3",
            volume: 1.5
        },
        m1911_01: {
            path: "audio/guns/m1911_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1911_reload_01: {
            path: "audio/guns/m1911_reload_01.mp3",
            volume: 1
        },
        m1911_reload_02: {
            path: "audio/guns/m1911_reload_02.mp3",
            volume: 1
        },
        m1911_switch_01: {
            path: "audio/guns/m1911_switch_01.mp3",
            volume: 1
        },
        ot38_01: {
            path: "audio/guns/ot38_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ot38_reload_01: {
            path: "audio/guns/ot38_reload_01.mp3",
            volume: 1
        },
        ot38_reload_02: {
            path: "audio/guns/ot38_reload_02.mp3",
            volume: 1
        },
        ot38_switch_01: {
            path: "audio/guns/ot38_switch_01.mp3",
            volume: 1
        },
        ots38_01: {
            path: "audio/guns/ots38_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        colt45_01: {
            path: "audio/guns/colt45_01.mp3",
            volume: 1
        },
        colt45_reload_01: {
            path: "audio/guns/colt45_reload_01.mp3",
            volume: 1
        },
        colt45_reload_02: {
            path: "audio/guns/colt45_reload_02.mp3",
            volume: 1
        },
        colt45_switch_01: {
            path: "audio/guns/colt45_switch_01.mp3",
            volume: 1
        },
        deagle_01: {
            path: "audio/guns/deagle_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        deagle_reload_01: {
            path: "audio/guns/deagle_reload_01.mp3",
            volume: 1
        },
        deagle_reload_02: {
            path: "audio/guns/deagle_reload_02.mp3",
            volume: 1
        },
        deagle_switch_01: {
            path: "audio/guns/deagle_switch_01.mp3",
            volume: 1
        },
        flare_gun_01: {
            path: "audio/guns/flare_gun_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        flare_gun_reload_01: {
            path: "audio/guns/flare_gun_reload_01.mp3",
            volume: 1
        },
        flare_gun_reload_02: {
            path: "audio/guns/flare_gun_reload_02.mp3",
            volume: 1
        },
        ak47_01: {
            path: "audio/guns/ak47_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ak47_reload_01: {
            path: "audio/guns/ak47_reload_01.mp3",
            volume: 1
        },
        ak47_switch_01: {
            path: "audio/guns/ak47_switch_01.mp3",
            volume: 1
        },
        an94_01: {
            path: "audio/guns/an94_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        an94_reload_01: {
            path: "audio/guns/an94_reload_01.mp3",
            volume: 1
        },
        an94_switch_01: {
            path: "audio/guns/an94_switch_01.mp3",
            volume: 1
        },
        groza_01: {
            path: "audio/guns/groza_01.mp3",
            volume: .95,
            maxInstances: 5
        },
        groza_reload_01: {
            path: "audio/guns/groza_reload_01.mp3",
            volume: 1.1
        },
        groza_switch_01: {
            path: "audio/guns/groza_switch_01.mp3",
            volume: 1.1
        },
        grozas_01: {
            path: "audio/guns/grozas_01.mp3",
            volume: .95,
            maxInstances: 5
        },
        scar_01: {
            path: "audio/guns/scar_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        scar_reload_01: {
            path: "audio/guns/scar_reload_01.mp3",
            volume: 1
        },
        scar_switch_01: {
            path: "audio/guns/scar_switch_01.mp3",
            volume: 1
        },
        scarssr_01: {
            path: "audio/guns/scarssr_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        dp28_01: {
            path: "audio/guns/dp28_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        dp28_reload_01: {
            path: "audio/guns/dp28_reload_01.mp3",
            volume: 1
        },
        dp28_switch_01: {
            path: "audio/guns/dp28_switch_01.mp3",
            volume: 1
        },
        bar_01: {
            path: "audio/guns/bar_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        bar_reload_01: {
            path: "audio/guns/bar_reload_01.mp3",
            volume: 1
        },
        bar_switch_01: {
            path: "audio/guns/bar_switch_01.mp3",
            volume: 1
        },
        pkp_01: {
            path: "audio/guns/pkp_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        pkp_reload_01: {
            path: "audio/guns/pkp_reload_01.mp3",
            volume: 1
        },
        pkp_switch_01: {
            path: "audio/guns/pkp_switch_01.mp3",
            volume: 1
        },
        m870_01: {
            path: "audio/guns/m870_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m870_reload_01: {
            path: "audio/guns/m870_reload_01.mp3",
            volume: 1
        },
        m870_cycle_01: {
            path: "audio/guns/m870_cycle_01.mp3",
            volume: 1
        },
        m870_pull_01: {
            path: "audio/guns/m870_pull_01.mp3",
            volume: 1
        },
        spas12_01: {
            path: "audio/guns/spas12_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        spas12_reload_01: {
            path: "audio/guns/spas12_reload_01.mp3",
            volume: 1
        },
        spas12_cycle_01: {
            path: "audio/guns/spas12_cycle_01.mp3",
            volume: 1
        },
        spas12_pull_01: {
            path: "audio/guns/spas12_pull_01.mp3",
            volume: 1
        },
        mp220_01: {
            path: "audio/guns/mp220_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mp220_reload_01: {
            path: "audio/guns/mp220_reload_01.mp3",
            volume: 1
        },
        mp220_deploy_01: {
            path: "audio/guns/mp220_deploy_01.mp3",
            volume: 1
        },
        saiga_01: {
            path: "audio/guns/saiga_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        saiga_reload_01: {
            path: "audio/guns/saiga_reload_01.mp3",
            volume: 1
        },
        saiga_switch_01: {
            path: "audio/guns/saiga_switch_01.mp3",
            volume: 1
        },
        usas_01: {
            path: "audio/guns/usas_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        usas_reload_01: {
            path: "audio/guns/usas_reload_01.mp3",
            volume: 1
        },
        usas_switch_01: {
            path: "audio/guns/usas_switch_01.mp3",
            volume: 1
        },
        m1100_01: {
            path: "audio/guns/m1100_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1100_reload_01: {
            path: "audio/guns/m1100_reload_01.mp3",
            volume: 1
        },
        m1100_deploy_01: {
            path: "audio/guns/m1100_deploy_01.mp3",
            volume: 1
        },
        m1014_01: {
            path: "audio/guns/m1014_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1014_reload_01: {
            path: "audio/guns/m1014_reload_01.mp3",
            volume: 1
        },
        m1014_deploy_01: {
            path: "audio/guns/m1014_deploy_01.mp3",
            volume: 1
        },
        m39_01: {
            path: "audio/guns/m39_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m39_reload_01: {
            path: "audio/guns/m39_reload_01.mp3",
            volume: 1
        },
        m39_switch_01: {
            path: "audio/guns/m39_switch_01.mp3",
            volume: 1
        },
        svd_01: {
            path: "audio/guns/svd_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        svd_reload_01: {
            path: "audio/guns/svd_reload_01.mp3",
            volume: 1
        },
        svd_switch_01: {
            path: "audio/guns/svd_switch_01.mp3",
            volume: 1
        },
        garand_01: {
            path: "audio/guns/garand_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        garand_02: {
            path: "audio/guns/garand_02.mp3",
            volume: 1,
            maxInstances: 5
        },
        garand_reload_01: {
            path: "audio/guns/garand_reload_01.mp3",
            volume: 1
        },
        garand_switch_01: {
            path: "audio/guns/garand_switch_01.mp3",
            volume: 1
        },
        m1a1_01: {
            path: "audio/guns/m1a1_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1a1_reload_01: {
            path: "audio/guns/m1a1_reload_01.mp3",
            volume: 1
        },
        m1a1_switch_01: {
            path: "audio/guns/m1a1_switch_01.mp3",
            volume: 1
        },
        mp5_01: {
            path: "audio/guns/mp5_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mp5_reload_01: {
            path: "audio/guns/mp5_reload_01.mp3",
            volume: 1
        },
        mp5_switch_01: {
            path: "audio/guns/mp5_switch_01.mp3",
            volume: 1
        },
        mac10_01: {
            path: "audio/guns/mac10_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mac10_reload_01: {
            path: "audio/guns/mac10_reload_01.mp3",
            volume: 1
        },
        mac10_switch_01: {
            path: "audio/guns/mac10_switch_01.mp3",
            volume: 1
        },
        ump9_01: {
            path: "audio/guns/ump9_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ump9_reload_01: {
            path: "audio/guns/ump9_reload_01.mp3",
            volume: 1
        },
        ump9_switch_01: {
            path: "audio/guns/ump9_switch_01.mp3",
            volume: 1
        },
        vector_01: {
            path: "audio/guns/vector_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        vector_02: {
            path: "audio/guns/vector_02.mp3",
            volume: 1,
            maxInstances: 5
        },
        vector_reload_01: {
            path: "audio/guns/vector_reload_01.mp3",
            volume: 1
        },
        vector_switch_01: {
            path: "audio/guns/vector_switch_01.mp3",
            volume: 1
        },
        scorpion_01: {
            path: "audio/guns/scorpion_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        scorpion_reload_01: {
            path: "audio/guns/scorpion_reload_01.mp3",
            volume: 1
        },
        scorpion_switch_01: {
            path: "audio/guns/scorpion_switch_01.mp3",
            volume: 1
        },
        vss_01: {
            path: "audio/guns/vss_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        vss_reload_01: {
            path: "audio/guns/vss_reload_01.mp3",
            volume: 1
        },
        vss_switch_01: {
            path: "audio/guns/vss_switch_01.mp3",
            volume: 1
        },
        famas_01: {
            path: "audio/guns/famas_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        famas_reload_01: {
            path: "audio/guns/famas_reload_01.mp3",
            volume: 1
        },
        famas_switch_01: {
            path: "audio/guns/famas_switch_01.mp3",
            volume: 1
        },
        hk416_01: {
            path: "audio/guns/hk416_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        hk416_reload_01: {
            path: "audio/guns/hk416_reload_01.mp3",
            volume: 1
        },
        hk416_switch_01: {
            path: "audio/guns/hk416_switch_01.mp3",
            volume: 1
        },
        m4a1_01: {
            path: "audio/guns/m4a1_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m4a1_reload_01: {
            path: "audio/guns/m4a1_reload_01.mp3",
            volume: 1
        },
        m4a1_switch_01: {
            path: "audio/guns/m4a1_switch_01.mp3",
            volume: 1
        },
        mk12_01: {
            path: "audio/guns/mk12_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mk12_reload_01: {
            path: "audio/guns/mk12_reload_01.mp3",
            volume: 1
        },
        mk12_switch_01: {
            path: "audio/guns/mk12_switch_01.mp3",
            volume: 1
        },
        l86_01: {
            path: "audio/guns/l86_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        l86_reload_01: {
            path: "audio/guns/l86_reload_01.mp3",
            volume: 1
        },
        l86_switch_01: {
            path: "audio/guns/l86_switch_01.mp3",
            volume: 1
        },
        m249_01: {
            path: "audio/guns/m249_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m249_reload_01: {
            path: "audio/guns/m249_reload_01.mp3",
            volume: 1.5
        },
        m249_switch_01: {
            path: "audio/guns/m249_switch_01.mp3",
            volume: 1.5
        },
        qbb97_01: {
            path: "audio/guns/qbb97_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        qbb97_reload_01: {
            path: "audio/guns/qbb97_reload_01.mp3",
            volume: 1
        },
        qbb97_switch_01: {
            path: "audio/guns/qbb97_switch_01.mp3",
            volume: 1
        },
        scout_01: {
            path: "audio/guns/scout_01.mp3",
            volume: 2,
            maxInstances: 5
        },
        scout_reload_01: {
            path: "audio/guns/scout_reload_01.mp3",
            volume: 1.2
        },
        scout_cycle_01: {
            path: "audio/guns/scout_cycle_01.mp3",
            volume: 1.2
        },
        scout_pull_01: {
            path: "audio/guns/scout_pull_01.mp3",
            volume: 1.2
        },
        model94_01: {
            path: "audio/guns/model94_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        model94_reload_01: {
            path: "audio/guns/model94_reload_01.mp3",
            volume: 1
        },
        model94_cycle_01: {
            path: "audio/guns/model94_cycle_01.mp3",
            volume: 1
        },
        mkg45_01: {
            path: "audio/guns/mkg45_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mkg45_reload_01: {
            path: "audio/guns/mkg45_reload_01.mp3",
            volume: 1.25
        },
        mkg45_switch_01: {
            path: "audio/guns/mkg45_switch_01.mp3",
            volume: 1.25
        },
        blr_01: {
            path: "audio/guns/blr_01.mp3",
            volume: 1.5,
            maxInstances: 5
        },
        blr_reload_01: {
            path: "audio/guns/blr_reload_01.mp3",
            volume: 1
        },
        blr_cycle_01: {
            path: "audio/guns/blr_cycle_01.mp3",
            volume: 1
        },
        mosin_01: {
            path: "audio/guns/mosin_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mosin_reload_01: {
            path: "audio/guns/mosin_reload_01.mp3",
            volume: 1
        },
        mosin_reload_02: {
            path: "audio/guns/mosin_reload_02.mp3",
            volume: 1
        },
        mosin_cycle_01: {
            path: "audio/guns/mosin_cycle_01.mp3",
            volume: 1
        },
        mosin_pull_01: {
            path: "audio/guns/mosin_pull_01.mp3",
            volume: 1
        },
        sv98_01: {
            path: "audio/guns/sv98_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        sv98_reload_01: {
            path: "audio/guns/sv98_reload_01.mp3",
            volume: 1
        },
        sv98_cycle_01: {
            path: "audio/guns/sv98_cycle_01.mp3",
            volume: 1
        },
        sv98_pull_01: {
            path: "audio/guns/sv98_pull_01.mp3",
            volume: 1
        },
        awc_01: {
            path: "audio/guns/awc_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        awc_reload_01: {
            path: "audio/guns/awc_reload_01.mp3",
            volume: 1
        },
        awc_cycle_01: {
            path: "audio/guns/awc_cycle_01.mp3",
            volume: 1
        },
        awc_pull_01: {
            path: "audio/guns/awc_pull_01.mp3",
            volume: 1
        },
        potato_cannon_01: {
            path: "audio/guns/potato_cannon_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        potato_cannon_reload_01: {
            path: "audio/guns/potato_cannon_reload_01.mp3",
            volume: 1
        },
        potato_cannon_switch_01: {
            path: "audio/guns/potato_cannon_switch_01.mp3",
            volume: 1
        },
        potato_smg_01: {
            path: "audio/guns/potato_smg_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        potato_smg_reload_01: {
            path: "audio/guns/potato_smg_reload_01.mp3",
            volume: 1
        },
        potato_smg_switch_01: {
            path: "audio/guns/potato_smg_switch_01.mp3",
            volume: 1
        },
        bugle_01: {
            path: "audio/guns/bugle_01.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        bugle_02: {
            path: "audio/guns/bugle_02.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        bugle_03: {
            path: "audio/guns/bugle_03.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        empty_fire_01: {
            path: "audio/guns/empty_fire_01.mp3",
            volume: .9
        },
        empty_fire_02: {
            path: "audio/guns/empty_fire_02.mp3",
            volume: .9
        },
        gun_switch_01: {
            path: "audio/guns/gun_switch_01.mp3",
            volume: 1
        },
        bandage_use_01: {
            path: "audio/ui/bandage_use_01.mp3",
            volume: 1
        },
        healthkit_use_01: {
            path: "audio/ui/healthkit_use_01.mp3",
            volume: 1
        },
        soda_use_01: {
            path: "audio/ui/soda_use_01.mp3",
            volume: 1
        },
        pills_use_01: {
            path: "audio/ui/pills_use_01.mp3",
            volume: 1
        },
        stow_weapon_01: {
            path: "audio/ui/stow_weapon_01.mp3",
            volume: 1
        }
    },
    hits: {
        stone_bullet_hit_01: {
            path: "audio/hits/stone_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_01: {
            path: "audio/hits/wood_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_02: {
            path: "audio/hits/wood_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_03: {
            path: "audio/hits/wood_bullet_hit_03.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_04: {
            path: "audio/hits/wood_bullet_hit_04.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        bush_bullet_hit_01: {
            path: "audio/hits/bush_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_01: {
            path: "audio/hits/metal_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_02: {
            path: "audio/hits/metal_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_03: {
            path: "audio/hits/metal_bullet_hit_03.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_04: {
            path: "audio/hits/metal_bullet_hit_04.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 6
        },
        pan_bullet_hit_01: {
            path: "audio/hits/pan_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 6
        },
        brick_bullet_hit_01: {
            path: "audio/hits/brick_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        punch_hit_01: {
            path: "audio/hits/punch_hit_01.mp3",
            volume: 1
        },
        knife_hit_01: {
            path: "audio/hits/knife_hit_01.mp3",
            volume: 1
        },
        pan_hit_01: {
            path: "audio/hits/pan_hit_01.mp3",
            volume: 1
        },
        axe_hit_01: {
            path: "audio/hits/axe_hit_01.mp3",
            volume: 1
        },
        hook_hit_01: {
            path: "audio/hits/hook_hit_01.mp3",
            volume: 1
        },
        saw_hit_01: {
            path: "audio/hits/saw_hit_01.mp3",
            volume: 2.5
        },
        crowbar_hit_01: {
            path: "audio/hits/crowbar_hit_01.mp3",
            volume: 1
        },
        spade_hit_01: {
            path: "audio/hits/spade_hit_01.mp3",
            volume: 1
        },
        hammer_hit_01: {
            path: "audio/hits/hammer_hit_01.mp3",
            volume: 1
        },
        metal_punch_hit_01: {
            path: "audio/hits/metal_punch_hit_01.mp3",
            volume: 1
        },
        metal_punch_hit_02: {
            path: "audio/hits/metal_punch_hit_02.mp3",
            volume: 1
        },
        egg_hit_01: {
            path: "audio/hits/egg_hit_01.mp3",
            volume: 1,
            preload: !1
        },
        player_bullet_hit_01: {
            path: "audio/hits/player_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        player_bullet_hit_02: {
            path: "audio/hits/player_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0
        },
        plastic_bullet_hit_01: {
            path: "audio/hits/plastic_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        toilet_bullet_hit_01: {
            path: "audio/hits/toilet_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        toilet_bullet_hit_02: {
            path: "audio/hits/toilet_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        glass_bullet_hit_01: {
            path: "audio/hits/glass_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        concrete_hit_01: {
            path: "audio/hits/concrete_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_grass_01: {
            path: "audio/hits/frag_grass_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_sand_01: {
            path: "audio/hits/frag_sand_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_water_01: {
            path: "audio/hits/frag_water_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        cloth_hit_01: {
            path: "audio/hits/cloth_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        cloth_hit_02: {
            path: "audio/hits/cloth_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        organic_hit_01: {
            path: "audio/hits/organic_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        piano_hit_01: {
            path: "audio/hits/piano_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        piano_hit_02: {
            path: "audio/hits/piano_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        }
    },
    sfx: {
        crate_break_01: {
            path: "audio/sfx/crate_break_01.mp3",
            volume: 1
        },
        crate_break_02: {
            path: "audio/sfx/crate_break_02.mp3",
            volume: 1
        },
        tree_break_01: {
            path: "audio/sfx/tree_break_01.mp3",
            volume: 1
        },
        bush_break_01: {
            path: "audio/sfx/bush_break_01.mp3",
            volume: 1
        },
        bush_enter_01: {
            path: "audio/sfx/bush_enter_01.mp3",
            volume: 1,
            canCoalesce: !0
        },
        bush_enter_02: {
            path: "audio/sfx/bush_enter_02.mp3",
            volume: 1,
            canCoalesce: !0
        },
        barrel_break_01: {
            path: "audio/sfx/barrel_break_01.mp3",
            volume: 1
        },
        barrel_break_02: {
            path: "audio/sfx/barrel_break_02.mp3",
            volume: 1
        },
        stone_break_01: {
            path: "audio/sfx/stone_break_01.mp3",
            volume: 1
        },
        wall_break_01: {
            path: "audio/sfx/wall_break_01.mp3",
            volume: 1
        },
        ceiling_break_01: {
            path: "audio/sfx/ceiling_break_01.mp3",
            volume: 1
        },
        ceiling_break_02: {
            path: "audio/sfx/ceiling_break_02.mp3",
            volume: 1
        },
        toilet_break_01: {
            path: "audio/sfx/toilet_break_01.mp3",
            volume: 1
        },
        toilet_break_02: {
            path: "audio/sfx/toilet_break_02.mp3",
            volume: 1
        },
        vending_break_01: {
            path: "audio/sfx/vending_break_01.mp3",
            volume: 1
        },
        window_break_01: {
            path: "audio/sfx/window_break_01.mp3",
            volume: 1
        },
        window_break_02: {
            path: "audio/sfx/window_break_02.mp3",
            volume: 1
        },
        drawers_break_01: {
            path: "audio/sfx/drawers_break_01.mp3",
            volume: 1
        },
        oven_break_01: {
            path: "audio/sfx/oven_break_01.mp3",
            volume: 1
        },
        deposit_box_break_01: {
            path: "audio/sfx/deposit_box_break_01.mp3",
            volume: 1
        },
        cloth_break_01: {
            path: "audio/sfx/cloth_break_01.mp3",
            volume: 1
        },
        screen_break_01: {
            path: "audio/sfx/screen_break_01.mp3",
            volume: 1
        },
        pumpkin_break_01: {
            path: "audio/sfx/pumpkin_break_01.mp3",
            volume: 1,
            preload: !1
        },
        ceramic_break_01: {
            path: "audio/sfx/ceramic_break_01.mp3",
            volume: 1
        },
        egg_break_01: {
            path: "audio/sfx/egg_break_01.mp3",
            volume: 1,
            preload: !1
        },
        footstep_grass_01: {
            path: "audio/sfx/footstep_grass_01.mp3",
            volume: 1
        },
        footstep_grass_02: {
            path: "audio/sfx/footstep_grass_02.mp3",
            volume: 1
        },
        footstep_metal_01: {
            path: "audio/sfx/footstep_metal_01.mp3",
            volume: 1
        },
        footstep_metal_02: {
            path: "audio/sfx/footstep_metal_02.mp3",
            volume: 1
        },
        footstep_metal_03: {
            path: "audio/sfx/footstep_metal_03.mp3",
            volume: 1
        },
        footstep_metal_04: {
            path: "audio/sfx/footstep_metal_04.mp3",
            volume: 1
        },
        footstep_metal_05: {
            path: "audio/sfx/footstep_metal_05.mp3",
            volume: 1
        },
        footstep_wood_01: {
            path: "audio/sfx/footstep_wood_01.mp3",
            volume: 1
        },
        footstep_wood_02: {
            path: "audio/sfx/footstep_wood_02.mp3",
            volume: 1
        },
        footstep_wood_03: {
            path: "audio/sfx/footstep_wood_03.mp3",
            volume: 1
        },
        footstep_sand_01: {
            path: "audio/sfx/footstep_sand_01.mp3",
            volume: 1
        },
        footstep_sand_02: {
            path: "audio/sfx/footstep_sand_02.mp3",
            volume: 1
        },
        footstep_water_01: {
            path: "audio/sfx/footstep_water_01.mp3",
            volume: 1
        },
        footstep_water_02: {
            path: "audio/sfx/footstep_water_02.mp3",
            volume: 1
        },
        footstep_tile_01: {
            path: "audio/sfx/footstep_tile_01.mp3",
            volume: 1
        },
        footstep_tile_02: {
            path: "audio/sfx/footstep_tile_02.mp3",
            volume: 1
        },
        footstep_asphalt_01: {
            path: "audio/sfx/footstep_asphalt_01.mp3",
            volume: 1
        },
        footstep_asphalt_02: {
            path: "audio/sfx/footstep_asphalt_02.mp3",
            volume: 1
        },
        footstep_brick_01: {
            path: "audio/sfx/footstep_brick_01.mp3",
            volume: 1
        },
        footstep_stone_01: {
            path: "audio/sfx/footstep_stone_01.mp3",
            volume: .8
        },
        footstep_carpet_01: {
            path: "audio/sfx/footstep_carpet_01.mp3",
            volume: 1
        },
        punch_swing_01: {
            path: "audio/sfx/punch_swing_01.mp3",
            volume: 1
        },
        knife_swing_01: {
            path: "audio/sfx/knife_swing_01.mp3",
            volume: 1
        },
        medium_swing_01: {
            path: "audio/sfx/medium_swing_01.mp3",
            volume: 1
        },
        heavy_swing_01: {
            path: "audio/sfx/heavy_swing_01.mp3",
            volume: 1
        },
        bullet_whiz_01: {
            path: "audio/sfx/bullet_whiz_01.mp3",
            volume: 1
        },
        bullet_whiz_02: {
            path: "audio/sfx/bullet_whiz_02.mp3",
            volume: 1
        },
        bullet_whiz_03: {
            path: "audio/sfx/bullet_whiz_03.mp3",
            volume: 1
        },
        frag_throw_01: {
            path: "audio/sfx/frag_throw_01.mp3",
            volume: 1
        },
        frag_pin_01: {
            path: "audio/sfx/frag_pin_01.mp3",
            volume: 1
        },
        frag_deploy_01: {
            path: "audio/ui/frag_pickup_01.mp3",
            volume: 1
        },
        frag_water_01: {
            path: "audio/hits/frag_water_01.mp3",
            volume: 1
        },
        strobe_click_01: {
            path: "audio/sfx/strobe_click_01.mp3",
            volume: 1
        },
        explosion_01: {
            path: "audio/sfx/explosion_01.mp3",
            volume: 1
        },
        explosion_02: {
            path: "audio/sfx/explosion_02.mp3",
            volume: 1
        },
        explosion_03: {
            path: "audio/sfx/explosion_03.mp3",
            volume: 1
        },
        explosion_04: {
            path: "audio/sfx/explosion_04.mp3",
            volume: 1,
            maxInstances: 4
        },
        explosion_05: {
            path: "audio/sfx/explosion_05.mp3",
            volume: 1
        },
        explosion_smoke_01: {
            path: "audio/sfx/explosion_smoke_01.mp3",
            volume: 1
        },
        snowball_01: {
            path: "audio/sfx/snowball_01.mp3",
            volume: 1,
            preload: !1
        },
        snowball_02: {
            path: "audio/sfx/snowball_02.mp3",
            volume: 1,
            preload: !1
        },
        potato_01: {
            path: "audio/sfx/potato_01.mp3",
            volume: 1,
            preload: !1
        },
        potato_02: {
            path: "audio/sfx/potato_02.mp3",
            volume: 1,
            preload: !1
        },
        stow_weapon_01: {
            path: "audio/ui/stow_weapon_01.mp3",
            volume: 1
        },
        knife_deploy_01: {
            path: "audio/ui/knife_deploy_01.mp3",
            volume: 1
        },
        pan_pickup_01: {
            path: "audio/ui/pan_pickup_01.mp3",
            volume: 1
        },
        knuckles_deploy_01: {
            path: "audio/ui/knuckles_deploy_01.mp3",
            volume: 1
        },
        door_open_01: {
            path: "audio/sfx/door_open_01.mp3",
            volume: 1
        },
        door_close_01: {
            path: "audio/sfx/door_close_01.mp3",
            volume: 1
        },
        door_open_02: {
            path: "audio/sfx/door_open_02.mp3",
            volume: 1
        },
        door_close_02: {
            path: "audio/sfx/door_close_02.mp3",
            volume: 1
        },
        door_open_03: {
            path: "audio/sfx/door_open_03.mp3",
            volume: 1
        },
        door_close_03: {
            path: "audio/sfx/door_close_03.mp3",
            volume: 1
        },
        door_open_04: {
            path: "audio/sfx/door_open_04.mp3",
            volume: .8
        },
        door_error_01: {
            path: "audio/sfx/door_error_01.mp3",
            volume: 1
        },
        vault_change_01: {
            path: "audio/sfx/vault_change_01.mp3",
            volume: 1
        },
        vault_change_02: {
            path: "audio/sfx/vault_change_02.mp3",
            volume: 1,
            preload: !1
        },
        vault_change_03: {
            path: "audio/sfx/vault_change_03.mp3",
            volume: 1,
            preload: !1
        },
        cell_control_01: {
            path: "audio/sfx/cell_control_01.mp3",
            volume: 1
        },
        cell_control_02: {
            path: "audio/sfx/cell_control_02.mp3",
            volume: 1
        },
        plane_01: {
            path: "audio/sfx/plane_01.mp3",
            volume: 1
        },
        plane_02: {
            path: "audio/sfx/plane_02.mp3",
            volume: 1,
            preload: !1
        },
        fighter_01: {
            path: "audio/sfx/fighter_01.mp3",
            volume: 1
        },
        airdrop_chute_01: {
            path: "audio/sfx/airdrop_chute_01.mp3",
            volume: 1
        },
        airdrop_fall_01: {
            path: "audio/sfx/airdrop_fall_01.mp3",
            volume: 1
        },
        airdrop_crash_01: {
            path: "audio/sfx/airdrop_crash_01.mp3",
            volume: 1
        },
        airdrop_crash_02: {
            path: "audio/sfx/airdrop_crash_02.mp3",
            volume: 1
        },
        airdrop_open_01: {
            path: "audio/sfx/airdrop_open_01.mp3",
            volume: 1
        },
        airdrop_open_02: {
            path: "audio/sfx/airdrop_open_02.mp3",
            volume: 1
        },
        button_press_01: {
            path: "audio/sfx/button_press_01.mp3",
            volume: 1,
            maxInstances: 3
        },
        watering_01: {
            path: "audio/sfx/watering_01.mp3",
            volume: 1,
            maxInstances: 3,
            preload: !1
        },
        piano_02: {
            path: "audio/sfx/piano_02.mp3",
            volume: 1,
            preload: !1
        },
        footstep_08: {
            path: "audio/sfx/footstep_08.mp3",
            volume: 1,
            preload: !1
        },
        footstep_09: {
            path: "audio/sfx/footstep_09.mp3",
            volume: 1,
            preload: !1
        },
        howl_01: {
            path: "audio/sfx/howl_01.mp3",
            volume: 1,
            preload: !1
        },
        wheel_control_01: {
            path: "audio/sfx/wheel_control_01.mp3",
            volume: 1,
            preload: !1
        },
        log_01: {
            path: "audio/sfx/log_01.mp3",
            volume: 1,
            preload: !1
        },
        log_02: {
            path: "audio/sfx/log_02.mp3",
            volume: 1,
            preload: !1
        },
        log_03: {
            path: "audio/sfx/log_03.mp3",
            volume: 1,
            preload: !1
        },
        log_04: {
            path: "audio/sfx/log_04.mp3",
            volume: 1,
            preload: !1
        },
        log_05: {
            path: "audio/sfx/log_05.mp3",
            volume: 1,
            preload: !1
        },
        log_06: {
            path: "audio/sfx/log_06.mp3",
            volume: 1,
            preload: !1
        },
        log_11: {
            path: "audio/sfx/log_11.mp3",
            volume: 4,
            preload: !1
        },
        log_12: {
            path: "audio/sfx/log_12.mp3",
            volume: 4,
            preload: !1
        },
        log_13: {
            path: "audio/sfx/log_13.mp3",
            volume: 2,
            preload: !1
        },
        log_14: {
            path: "audio/sfx/log_14.mp3",
            volume: 2,
            preload: !1
        },
        ability_stim_01: {
            path: "audio/sfx/ability_stim_01.mp3",
            volume: 4
        },
        xp_drop_01: {
            path: "audio/sfx/xp_drop_01.mp3",
            volume: 1.25,
            preload: !1
        },
        xp_drop_02: {
            path: "audio/sfx/xp_drop_02.mp3",
            volume: 1.25,
            preload: !1
        },
        cluck_01: {
            path: "audio/sfx/cluck_01.mp3",
            volume: 1,
            preload: !1
        },
        cluck_02: {
            path: "audio/sfx/cluck_02.mp3",
            volume: 1,
            preload: !1
        },
        feather_01: {
            path: "audio/sfx/feather_01.mp3",
            volume: 1,
            preload: !1
        }
    },
    ambient: {
        ambient_wind_01: {
            path: "audio/ambient/ambient_wind_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        ambient_waves_01: {
            path: "audio/ambient/ambient_waves_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        ambient_stream_01: {
            path: "audio/ambient/ambient_stream_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        piano_music_01: {
            path: "audio/ambient/piano_music_01.mp3",
            volume: 1,
            preload: !1
        },
        ambient_wind_02: {
            path: "audio/ambient/ambient_wind_02.mp3",
            volume: 1,
            preload: !1
        },
        ambient_steam_01: {
            path: "audio/ambient/ambient_steam_01.mp3",
            volume: 1,
            preload: !1
        },
        club_music_01: {
            path: "audio/ambient/club_music_01.mp3",
            volume: 1,
            preload: !1
        },
        club_music_02: {
            path: "audio/ambient/club_music_02.mp3",
            volume: 1,
            preload: !1
        },
        ambient_lab_01: {
            path: "audio/ambient/ambient_lab_01.mp3",
            volume: .2,
            preload: !1
        }
    },
    ui: {
        ammo_pickup_01: {
            path: "audio/ui/ammo_pickup_01.mp3",
            volume: 1
        },
        clothes_pickup_01: {
            path: "audio/ui/clothes_pickup_01.mp3",
            volume: 1
        },
        bells_01: {
            path: "audio/sfx/plane_02.mp3",
            volume: 1,
            preload: !1
        },
        helmet_pickup_01: {
            path: "audio/ui/helmet_pickup_01.mp3",
            volume: 1
        },
        chest_pickup_01: {
            path: "audio/ui/chest_pickup_01.mp3",
            volume: 1
        },
        gun_pickup_01: {
            path: "audio/ui/gun_pickup_01.mp3",
            volume: 1
        },
        scope_pickup_01: {
            path: "audio/ui/scope_pickup_01.mp3",
            volume: 1
        },
        pack_pickup_01: {
            path: "audio/ui/pack_pickup_01.mp3",
            volume: 1
        },
        soda_pickup_01: {
            path: "audio/ui/soda_pickup_01.mp3",
            volume: 1
        },
        pills_pickup_01: {
            path: "audio/ui/pills_pickup_01.mp3",
            volume: 1
        },
        bandage_pickup_01: {
            path: "audio/ui/bandage_pickup_01.mp3",
            volume: 1
        },
        healthkit_pickup_01: {
            path: "audio/ui/healthkit_pickup_01.mp3",
            volume: 1
        },
        frag_pickup_01: {
            path: "audio/ui/frag_pickup_01.mp3",
            volume: 1
        },
        snowball_pickup_01: {
            path: "audio/ui/snowball_pickup_01.mp3",
            volume: 1,
            preload: !1
        },
        potato_pickup_01: {
            path: "audio/ui/potato_pickup_01.mp3",
            volume: 1,
            preload: !1
        },
        heavy_pickup_01: {
            path: "audio/ui/heavy_pickup_01.mp3",
            volume: 1
        },
        pan_pickup_01: {
            path: "audio/ui/pan_pickup_01.mp3",
            volume: 1
        },
        perk_pickup_01: {
            path: "audio/ui/perk_pickup_01.mp3",
            volume: 1
        },
        xp_pickup_01: {
            path: "audio/ui/xp_pickup_01.mp3",
            volume: 1.5,
            preload: !1
        },
        xp_pickup_02: {
            path: "audio/ui/xp_pickup_02.mp3",
            volume: 1.5,
            preload: !1
        },
        ping_danger_01: {
            path: "audio/ui/ping_danger_01.mp3",
            volume: 1
        },
        ping_coming_01: {
            path: "audio/ui/ping_coming_01.mp3",
            volume: 1
        },
        ping_help_01: {
            path: "audio/ui/ping_help_01.mp3",
            volume: 1
        },
        ping_leader_01: {
            path: "audio/ui/ping_leader_01.mp3",
            volume: 1,
            preload: !1
        },
        ping_airdrop_01: {
            path: "audio/ui/ping_airdrop_01.mp3",
            volume: 1
        },
        ping_airstrike_01: {
            path: "audio/ui/ping_airstrike_01.mp3",
            volume: 1
        },
        ping_unlock_01: {
            path: "audio/ui/ping_unlock_01.mp3",
            volume: 1,
            preload: !1
        },
        emote_01: {
            path: "audio/ui/emote_01.mp3",
            volume: 1
        },
        trick_01: {
            path: "audio/ui/trick_01.mp3",
            volume: 1.5,
            preload: !1
        },
        trick_02: {
            path: "audio/ui/trick_02.mp3",
            volume: 1.5,
            preload: !1
        },
        trick_03: {
            path: "audio/ui/trick_03.mp3",
            volume: 1.5,
            preload: !1
        },
        treat_01: {
            path: "audio/ui/treat_01.mp3",
            volume: 1,
            preload: !1
        },
        loot_drop_01: {
            path: "audio/ui/loot_drop_01.mp3",
            volume: 1
        },
        notification_start_01: {
            path: "audio/ui/notification_start_01.mp3",
            volume: 1
        },
        notification_join_01: {
            path: "audio/ui/notification_join_01.mp3",
            volume: 1
        },
        leader_assigned_01: {
            path: "audio/ui/leader_assigned_01.mp3",
            volume: 1,
            maxInstances: 1
        },
        leader_dead_01: {
            path: "audio/ui/leader_dead_01.mp3",
            volume: 1.75,
            maxInstances: 1
        },
        lt_assigned_01: {
            path: "audio/ui/lt_assigned_01.mp3",
            volume: 1,
            preload: !1,
            maxInstances: 1
        },
        medic_assigned_01: {
            path: "audio/ui/medic_assigned_01.mp3",
            volume: 2,
            preload: !1,
            maxInstances: 1
        },
        marksman_assigned_01: {
            path: "audio/ui/marksman_assigned_01.mp3",
            volume: 2,
            preload: !1,
            maxInstances: 1
        },
        recon_assigned_01: {
            path: "audio/ui/recon_assigned_01.mp3",
            volume: 1.5,
            preload: !1,
            maxInstances: 1
        },
        grenadier_assigned_01: {
            path: "audio/ui/grenadier_assigned_01.mp3",
            volume: 2.5,
            preload: !1,
            maxInstances: 1
        },
        bugler_assigned_01: {
            path: "audio/ui/bugler_assigned_01.mp3",
            volume: 2.5,
            preload: !1,
            maxInstances: 1
        },
        last_man_assigned_01: {
            path: "audio/ui/last_man_assigned_01.mp3",
            volume: 1.75,
            preload: !1,
            maxInstances: 1
        },
        helmet03_forest_pickup_01: {
            path: "audio/ui/helmet03_forest_pickup_01.mp3",
            volume: 1,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_assigned_01: {
            path: "audio/ui/kill_leader_assigned_01.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_assigned_02: {
            path: "audio/ui/kill_leader_assigned_02.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_dead_01: {
            path: "audio/ui/kill_leader_dead_01.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_dead_02: {
            path: "audio/ui/kill_leader_dead_02.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        spawn_01: {
            path: "audio/ui/spawn_01.mp3",
            volume: 3,
            preload: !1
        }
    },
    music: {
        menu_music: {
            path: "audio/ambient/menu_music_01.mp3",
            volume: 1,
            loadPriority: 2
        }
    }
}
  , ta = {
    footstep_grass: {
        channel: "sfx",
        sounds: ["footstep_grass_01", "footstep_grass_02"]
    },
    footstep_container: {
        channel: "sfx",
        sounds: ["footstep_metal_03"]
    },
    footstep_warehouse: {
        channel: "sfx",
        sounds: ["footstep_metal_01", "footstep_metal_02"]
    },
    footstep_house: {
        channel: "sfx",
        sounds: ["footstep_wood_02", "footstep_wood_03"]
    },
    footstep_shack: {
        channel: "sfx",
        sounds: ["footstep_wood_01"]
    },
    footstep_sand: {
        channel: "sfx",
        sounds: ["footstep_sand_01", "footstep_sand_02"]
    },
    footstep_water: {
        channel: "sfx",
        sounds: ["footstep_water_01", "footstep_water_02"]
    },
    footstep_tile: {
        channel: "sfx",
        sounds: ["footstep_tile_01", "footstep_tile_02"]
    },
    footstep_asphalt: {
        channel: "sfx",
        sounds: ["footstep_asphalt_01", "footstep_asphalt_02"]
    },
    footstep_brick: {
        channel: "sfx",
        sounds: ["footstep_brick_01"]
    },
    footstep_bunker: {
        channel: "sfx",
        sounds: ["footstep_metal_04", "footstep_metal_05"]
    },
    footstep_stone: {
        channel: "sfx",
        sounds: ["footstep_stone_01"]
    },
    footstep_carpet: {
        channel: "sfx",
        sounds: ["footstep_carpet_01"]
    },
    player_bullet_hit: {
        channel: "hits",
        sounds: ["player_bullet_hit_01"]
    },
    metal_punch: {
        channel: "hits",
        sounds: ["metal_punch_hit_01", "metal_punch_hit_02"]
    },
    cloth_punch: {
        channel: "hits",
        sounds: ["cloth_hit_01"]
    },
    cloth_bullet: {
        channel: "hits",
        sounds: ["cloth_hit_02"]
    },
    organic_hit: {
        channel: "hits",
        sounds: ["organic_hit_01"]
    },
    piano_hit: {
        channel: "hits",
        sounds: ["piano_hit_01", "piano_hit_02"]
    },
    wall_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_01"]
    },
    wall_wood_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_02"]
    },
    wall_brick_bullet: {
        channel: "hits",
        sounds: ["brick_bullet_hit_01"]
    },
    stone_bullet: {
        channel: "hits",
        sounds: ["stone_bullet_hit_01"]
    },
    barrel_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_03"]
    },
    pan_bullet: {
        channel: "hits",
        sounds: ["pan_bullet_hit_01"]
    },
    silo_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_04"]
    },
    toilet_porc_bullet: {
        channel: "hits",
        sounds: ["toilet_bullet_hit_01"]
    },
    toilet_metal_bullet: {
        channel: "hits",
        sounds: ["toilet_bullet_hit_02"]
    },
    glass_bullet: {
        channel: "hits",
        sounds: ["glass_bullet_hit_01"]
    },
    cobalt_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_02"]
    },
    concrete_hit: {
        channel: "hits",
        sounds: ["concrete_hit_01"]
    },
    wood_prop_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_03"]
    },
    wood_crate_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_04"]
    },
    ammo_crate_bullet: {
        channel: "hits",
        sounds: ["plastic_bullet_hit_01"]
    },
    bush_bullet: {
        channel: "hits",
        sounds: ["bush_bullet_hit_01"]
    },
    tree_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_01"]
    },
    egg_hit: {
        channel: "hits",
        sounds: ["egg_hit_01"]
    },
    player_bullet_grunt: {
        channel: "hits",
        sounds: ["player_bullet_hit_02"]
    },
    bullet_whiz: {
        channel: "sfx",
        sounds: ["bullet_whiz_01", "bullet_whiz_02", "bullet_whiz_03"]
    },
    frag_grass: {
        channel: "hits",
        sounds: ["frag_grass_01"]
    },
    frag_sand: {
        channel: "hits",
        sounds: ["frag_sand_01"]
    },
    frag_water: {
        channel: "hits",
        sounds: ["frag_water_01"]
    },
    kill_leader_assigned: {
        channel: "ui",
        sounds: ["kill_leader_assigned_01", "kill_leader_assigned_02"]
    },
    kill_leader_dead: {
        channel: "ui",
        sounds: ["kill_leader_dead_01", "kill_leader_dead_02"]
    },
    cluck: {
        channel: "sfx",
        sounds: ["cluck_01", "cluck_02"]
    }
}
  , ia = {
    activePlayer: {
        volume: .5,
        maxRange: 48,
        list: "players",
        type: "sound"
    },
    otherPlayers: {
        volume: .5,
        maxRange: 48,
        list: "players",
        type: "sound"
    },
    hits: {
        volume: .4,
        maxRange: 48,
        list: "hits",
        type: "sound"
    },
    sfx: {
        volume: 1,
        maxRange: 48,
        list: "sfx",
        type: "sound"
    },
    ambient: {
        volume: 1,
        maxRange: 1,
        list: "ambient",
        type: "sound"
    },
    ui: {
        volume: .75,
        maxRange: 48,
        list: "ui",
        type: "sound"
    },
    music: {
        volume: 1,
        maxRange: 1,
        list: "music",
        type: "music"
    }
}
  , ra = {
    cathedral: {
        path: "audio/reverb/cathedral_01.mp3",
        volume: .7,
        stereoSpread: .004
    },
    cave: {
        path: "audio/reverb/cave_mono_01.mp3",
        volume: .7,
        echoVolume: .5,
        echoDelay: .25,
        echoLowPass: 800,
        stereoSpread: .004
    }
}
  , De = {
    Sounds: ea,
    Groups: ta,
    Channels: ia,
    Reverbs: ra
}
  , Fi = .003
  , ei = .5;
class sa {
    mute = !1;
    masterVolume = 1;
    soundVolume = 1;
    musicVolume = 1;
    baseVolume = .5;
    sounds = {};
    loadedFiles = {};
    preloadedSounds = !1;
    cameraPos = m.create(0, 0);
    activeLayer = 0;
    underground = !1;
    soundInstances = [];
    constructor(e) {
        Ae.Sound.volume = .5,
        Ae.Sound.on("fileload", this.loadHandler, this)
    }
    preloadSounds() {
        if (!this.preloadedSounds) {
            this.preloadedSounds = !0;
            const e = {}
              , t = Object.keys(De.Sounds);
            for (let o = 0; o < t.length; o++) {
                const h = t[o]
                  , f = De.Sounds[h]
                  , u = Object.keys(f);
                for (let d = 0; d < u.length; d++) {
                    const p = u[d];
                    e[p] !== void 0 && console.log(`Sound ${p} defined multiple times!`),
                    e[p] = !0
                }
            }
            const i = []
              , r = Object.keys(De.Channels);
            for (let o = 0; o < r.length; o++) {
                const h = r[o]
                  , f = De.Channels[h]
                  , u = De.Sounds[f.list]
                  , d = Object.keys(u);
                for (let p = 0; p < d.length; p++) {
                    const w = d[p]
                      , S = u[w];
                    if (S.preload === void 0 || S.preload) {
                        const g = {
                            canCoalesce: S.canCoalesce,
                            channels: S.maxInstances,
                            volume: S.volume
                        };
                        i.push({
                            name: w,
                            channel: h,
                            path: S.path,
                            options: g,
                            priority: S.loadPriority || 0
                        })
                    }
                }
            }
            i.sort( (o, h) => h.priority - o.priority);
            for (let o = 0; o < i.length; o++) {
                const h = i[o];
                this.loadSound(h)
            }
            const s = De.Reverbs
              , a = Object.keys(s);
            for (let o = 0; o < a.length; o++) {
                const h = a[o]
                  , f = s[h];
                Ae.Sound.registerReverb(f.path, h, f)
            }
        }
    }
    loadSound(e) {
        const t = e.name + e.channel;
        this.sounds[t] || (Ae.Sound.registerSound(e.path, t, e.options),
        this.sounds[t] = {
            path: e.path,
            name: e.name,
            channel: e.channel
        })
    }
    loadHandler(e) {
        this.loadedFiles[e] = !0
    }
    update(e) {
        for (let r = this.soundInstances.length - 1; r >= 0; r--) {
            const s = this.soundInstances[r];
            (s.instance.playState == "playFinished" || s.instance.playState == "playInterrupted" || s.instance.playState == "playFailed") && this.soundInstances.splice(r, 1)
        }
        const t = [0, 1, 1 / 3, 2 / 3]
          , i = this.underground ? t[this.activeLayer] : 0;
        Ae.Sound.setReverbs({
            cathedral: i
        }),
        Ae.Sound.update(e)
    }
    playSound(e, t={}) {
        if (!e || e == "none")
            return null;
        t.channel = t.channel || "activePlayer",
        t.startSilent = t.startSilent || !1,
        t.forceStart = t.forceStart || !1,
        t.loop = t.loop || !1,
        t.soundPos = t.soundPos || null,
        t.fallOff = t.fallOff || 0,
        t.filter = t.filter || "",
        t.delay = t.delay || 0,
        t.ignoreMinAllowable = t.ignoreMinAllowable || !1,
        t.rangeMult = t.rangeMult || 1,
        t.offset = t.offset || 0,
        t.ambient = t.channel == "ambient" || t.channel == "music",
        t.detune = t.detune || 0,
        t.volumeScale = t.volumeScale || 1;
        let i = null;
        const r = De.Channels[t.channel];
        if (r && (!this.mute || t.forceStart)) {
            const s = this.baseVolume * 1 * this.getTypeVolume(r.type) * t.volumeScale
              , a = t.layer !== void 0 && !x.sameAudioLayer(t.layer, this.activeLayer)
              , o = t.filter ? a || t.forceFilter ? t.filter : "reverb" : "none";
            if (t.channel != "activePlayer" && t.soundPos) {
                const h = m.sub(this.cameraPos, t.soundPos)
                  , f = m.length(h);
                let u = r.maxRange * t.rangeMult;
                b.eqAbs(u, 0) && (u = 1);
                const d = b.clamp(Math.abs(f / u), 0, 1)
                  , p = Math.pow(1 - d, 1 + t.fallOff * 2);
                let w = r.volume * p * s;
                if (w = a ? w * ei : w,
                w > Fi || t.ignoreMinAllowable) {
                    const S = b.clamp(h.x / u * -1, -1, 1);
                    i = Ae.Sound.play(e + t.channel, {
                        filter: o,
                        loop: t.loop ? -1 : 0,
                        volume: t.startSilent ? 0 : w,
                        pan: S,
                        delay: t.delay,
                        offset: t.offset,
                        ambient: t.ambient,
                        detune: t.detune
                    })
                }
            } else {
                let h = r.volume * s;
                h = a ? h * ei : h,
                i = Ae.Sound.play(e + t.channel, {
                    filter: o,
                    loop: t.loop ? -1 : 0,
                    volume: t.startSilent ? 0 : h,
                    delay: t.delay,
                    offset: t.offset,
                    ambient: t.ambient,
                    detune: t.detune
                })
            }
            if (i && (t.loop || t.channel == "music")) {
                const h = t.channel == "music" ? "music" : "sound";
                this.soundInstances.push({
                    instance: i,
                    type: h
                })
            }
        }
        return i
    }
    playGroup(e, t={}) {
        const i = De.Groups[e];
        if (i) {
            const r = i.sounds
              , s = Math.floor(x.random(0, r.length));
            return t.channel = i.channel,
            this.playSound(r[s], t)
        }
        return null
    }
    updateSound(e, t, i, r={}) {
        r.fallOff = r.fallOff || 0,
        r.rangeMult = r.rangeMult || 1,
        r.ignoreMinAllowable = r.ignoreMinAllowable || !1,
        r.volumeScale = r.volumeScale || 1;
        const s = De.Channels[t];
        if (e && s) {
            const a = this.baseVolume * 1 * this.getTypeVolume(s.type) * r.volumeScale
              , o = m.sub(this.cameraPos, i)
              , h = m.length(o);
            let f = s.maxRange * r.rangeMult;
            b.eqAbs(f, 0) && (f = 1);
            const u = b.clamp(Math.abs(h / f), 0, 1)
              , d = Math.pow(1 - u, 1 + r.fallOff * 2);
            let p = s.volume * d * a;
            if (p = r.layer === void 0 || x.sameAudioLayer(r.layer, this.activeLayer) ? p : p * ei,
            p > Fi || r.ignoreMinAllowable) {
                const S = b.clamp(o.x / f * -1, -1, 1);
                e.volume = p,
                e.pan = S
            }
        }
    }
    setMasterVolume(e) {
        e = b.clamp(e, 0, 1),
        Ae.Sound.volume = e
    }
    _setInstanceTypeVolume(e, t) {
        t = b.clamp(t, 0, 1);
        const i = this.getTypeVolume(e)
          , r = i > 1e-4 ? t / i : 0;
        for (let s = 0; s < this.soundInstances.length; s++) {
            const a = this.soundInstances[s];
            a.type == e && (a.instance.volume *= r)
        }
    }
    setSoundVolume(e) {
        this._setInstanceTypeVolume("sound", e),
        this.soundVolume = e
    }
    setMusicVolume(e) {
        this._setInstanceTypeVolume("music", e),
        this.musicVolume = e
    }
    setVolume(e, t, i) {
        if (e) {
            i = i || "sound";
            const r = this.getTypeVolume(i);
            e.volume = t * r
        }
    }
    getVolume(e) {
        return e ? e.volume : 0
    }
    setMute(e) {
        return this.mute = e,
        Ae.Sound.setMute(this.mute),
        this.mute
    }
    muteToggle() {
        return this.setMute(!this.mute)
    }
    stopSound(e) {
        e?.stop()
    }
    stopAll() {
        Ae.Sound.stop()
    }
    allLoaded() {
        const e = Object.keys(this.sounds);
        for (let t = 0; t < e.length; t++) {
            const i = this.sounds[e[t]];
            if (!this.isSoundLoaded(i.name, i.channel))
                return !1
        }
        return !0
    }
    isSoundLoaded(e, t) {
        const i = this.sounds[e + t];
        return i && this.loadedFiles[i.path]
    }
    isSoundPlaying(e) {
        return !!e && e.playState == Ae.Sound.PLAY_SUCCEEDED
    }
    getSoundDefVolume(e, t) {
        const i = De.Sounds[t][e]
          , r = De.Channels[t];
        return i && r ? i.volume * r.volume : 1
    }
    getTypeVolume(e) {
        switch (e) {
        case "music":
            return this.musicVolume;
        case "sound":
            return this.soundVolume;
        default:
            return this.soundVolume
        }
    }
}
class Dr {
    HiVuim = m.create(0, 0);
    hPMoEE = 16;
    uha = 1.5;
    RncwCq = 1.5;
    zaTP = 1;
    XbB = 1;
    YarzSb = !0;
    kTuIib = 0;
    bAEQ = !0;
    NRB = 0;
    kKovr() {
        return this.hPMoEE * this.uha
    }
    SlQA(e) {
        return {
            x: this.zaTP * .5 + (e.x - this.HiVuim.x) * this.kKovr(),
            y: this.XbB * .5 - (e.y - this.HiVuim.y) * this.kKovr()
        }
    }
    YMmm(e) {
        return {
            x: this.HiVuim.x + (e.x - this.zaTP * .5) / this.kKovr(),
            y: this.HiVuim.y + (this.XbB * .5 - e.y) / this.kKovr()
        }
    }
    zHRVv(e) {
        return e * this.uha
    }
    VFn(e) {
        return e * this.kKovr()
    }
    LlsKE(e) {
        this.YarzSb = e
    }
    qeWIN(e) {
        this.bAEQ = e
    }
    GpG(e, t) {
        const i = m.length(m.sub(this.HiVuim, e))
          , r = b.delerp(i, 40, 10) * t;
        this.kTuIib = Math.max(this.kTuIib, r)
    }
    fcIn() {
        this.YarzSb && (this.HiVuim = m.add(this.HiVuim, m.mul(m.randomUnit(), this.kTuIib))),
        this.kTuIib = 0
    }
}
class aa {
    shapes = [];
    addLine(e, t, i, r=0) {}
    addRay(e, t, i, r, s=0) {}
    addCircle(e, t, i, r) {}
    addAabb(e, t, i, r) {}
    addCollider(e, t, i) {}
    FQpmn(e, t) {}
    flush() {
        this.shapes = []
    }
}
const pi = new aa;
let oa = class {
    id = 0;
    pos = {
        x: 0,
        y: 0
    };
    posOld = {
        x: 0,
        y: 0
    };
    posDown = {
        x: 0,
        y: 0
    };
    startTime = 0;
    lastUpdateTime = 0;
    isNew = !0;
    isDead = !1;
    osId = 0
}
;
class la {
    constructor(e) {
        this.touchElem = e,
        window.addEventListener("focus", this.onWindowFocus.bind(this), !1),
        window.addEventListener("blur", this.onWindowFocus.bind(this), !1),
        window.addEventListener("keydown", this.onKeyDown.bind(this), !1),
        window.addEventListener("keyup", this.onKeyUp.bind(this), !1),
        window.addEventListener("mousemove", this.onMouseMove.bind(this), !1),
        window.addEventListener("mousedown", this.onMouseDown.bind(this), !1),
        window.addEventListener("mouseup", this.onMouseUp.bind(this), !1),
        window.addEventListener("wheel", this.onMouseWheel.bind(this), {
            capture: !1,
            passive: !0
        }),
        window.addEventListener("touchmove", this.onTouchMove.bind(this), !1),
        window.addEventListener("touchstart", this.onTouchStart.bind(this), !1),
        window.addEventListener("touchend", this.onTouchEnd.bind(this), !1),
        window.addEventListener("touchcancel", this.onTouchCancel.bind(this), !1),
        this.touchElem.addEventListener("touchstart", t => {
            t.preventDefault()
        }
        , !1)
    }
    keys = {};
    keysOld = {};
    mousePos = m.create(0, 0);
    mouseButtons = {};
    mouseButtonsOld = {};
    mouseWheelState = 0;
    touches = [];
    touchIdCounter = 0;
    lostFocus = !1;
    captureNextInputCb = null;
    Obb() {
        this.touches = [],
        this.touchIdCounter = 0
    }
    onWindowFocus() {
        this.keys = {},
        this.keysOld = {},
        this.mouseButtons = {},
        this.mouseButtonsOld = {},
        this.mouseWheelState = 0,
        this.touches.length = 0,
        this.lostFocus = !0
    }
    flush() {
        this.keysOld = Object.assign({}, this.keys),
        this.mouseButtonsOld = Object.assign({}, this.mouseButtons),
        this.mouseWheelState = 0;
        for (let e = 0; e < this.touches.length; e++)
            this.touches[e].posOld.x = this.touches[e].pos.x,
            this.touches[e].posOld.y = this.touches[e].pos.y,
            this.touches[e].isNew = !1,
            this.touches[e].isDead && (this.touches.splice(e, 1),
            --e);
        this.lostFocus = !1
    }
    captureNextInput(e) {
        this.captureNextInputCb = e
    }
    checkCaptureInput(e, t, i) {
        return !!this.captureNextInputCb?.(e, new Pt(t,i)) && (this.captureNextInputCb = null,
        !0)
    }
    isInputValuePressed(e) {
        switch (e.type) {
        case 1:
            return this.keyPressed(e.code);
        case 2:
            return this.mousePressed(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    isInputValueReleased(e) {
        switch (e.type) {
        case 1:
            return this.keyReleased(e.code);
        case 2:
            return this.mouseReleased(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    isInputValueDown(e) {
        switch (e.type) {
        case 1:
            return this.keyDown(e.code);
        case 2:
            return this.mouseDown(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    onKeyDown(e) {
        const t = e.keyCode;
        t == 9 && e.preventDefault(),
        !this.checkCaptureInput(e, 1, t) && (this.keys[t] = !0)
    }
    onKeyUp(e) {
        this.keys[e.keyCode] = !1
    }
    keyDown(e) {
        return !!this.keys[e]
    }
    keyPressed(e) {
        return !this.keysOld[e] && !!this.keys[e]
    }
    keyReleased(e) {
        return !!this.keysOld[e] && !this.keys[e]
    }
    onMouseMove(e) {
        this.mousePos.x = e.clientX,
        this.mousePos.y = e.clientY
    }
    onMouseDown(e) {
        let t = 0;
        t = "which"in e ? e.which - 1 : e.button,
        !this.checkCaptureInput(e, 2, t) && (this.mouseButtons[t] = !0)
    }
    onMouseUp(e) {
        let t = 0;
        t = "which"in e ? e.which - 1 : e.button,
        this.mouseButtons[t] = !1,
        (t == 3 || t == 4) && e.preventDefault()
    }
    onMouseWheel(e) {
        const t = e.deltaY < 0 ? 1 : 2;
        this.checkCaptureInput(e, 3, t) || (this.mouseWheelState = t)
    }
    mouseDown(e) {
        return !!this.mouseButtons[e]
    }
    mousePressed(e) {
        return !this.mouseButtonsOld[e] && !!this.mouseButtons[e]
    }
    mouseReleased(e) {
        return !!this.mouseButtonsOld[e] && !this.mouseButtons[e]
    }
    mouseWheel() {
        return this.mouseWheelState
    }
    onTouchShared(e, t) {
        if (e.target == this.touchElem || t != 1) {
            const i = e.timeStamp || performance.now();
            for (let r = 0; r < e.changedTouches.length; r++) {
                const s = e.changedTouches[r]
                  , a = s.identifier
                  , o = s.clientX
                  , h = s.clientY;
                let f = null;
                for (let u = 0; u < this.touches.length; u++)
                    if (this.touches[u].osId == a && !this.touches[u].isDead) {
                        f = this.touches[u];
                        break
                    }
                t == 1 && !f && (f = new oa,
                this.touches.push(f),
                ++this.touchIdCounter,
                f.id = this.touchIdCounter,
                f.osId = a,
                f.posOld.x = o,
                f.posOld.y = h,
                f.posDown.x = o,
                f.posDown.y = h,
                f.startTime = i,
                f.isNew = !0,
                f.isDead = !1),
                (t == 2 || t == 3) && f && (f.isDead = !0),
                f && (f.pos.x = o,
                f.pos.y = h,
                f.lastUpdateTime = i)
            }
        }
    }
    onTouchMove(e) {
        this.onTouchShared(e, 0)
    }
    onTouchStart(e) {
        this.onTouchShared(e, 1)
    }
    onTouchEnd(e) {
        this.onTouchShared(e, 2)
    }
    onTouchCancel(e) {
        this.onTouchShared(e, 3)
    }
    getTouchById(e) {
        for (let t = 0; t < this.touches.length; t++)
            if (this.touches[t].id == e)
                return this.touches[t];
        return null
    }
}

//input manager
const inputManager = new la(document.body);

var Q = (l => (l[l.Backspace = 8] = "Backspace",
l[l.Enter = 13] = "Enter",
l[l.Shift = 16] = "Shift",
l[l.Control = 17] = "Control",
l[l.Alt = 18] = "Alt",
l[l.Escape = 27] = "Escape",
l[l.Space = 32] = "Space",
l[l.Left = 37] = "Left",
l[l.Up = 38] = "Up",
l[l.Right = 39] = "Right",
l[l.Down = 40] = "Down",
l[l.Zero = 48] = "Zero",
l[l.One = 49] = "One",
l[l.Two = 50] = "Two",
l[l.Three = 51] = "Three",
l[l.Four = 52] = "Four",
l[l.Five = 53] = "Five",
l[l.Six = 54] = "Six",
l[l.Seven = 55] = "Seven",
l[l.Eight = 56] = "Eight",
l[l.Nine = 57] = "Nine",
l[l.A = 65] = "A",
l[l.B = 66] = "B",
l[l.C = 67] = "C",
l[l.D = 68] = "D",
l[l.E = 69] = "E",
l[l.F = 70] = "F",
l[l.G = 71] = "G",
l[l.L = 76] = "L",
l[l.M = 77] = "M",
l[l.N = 78] = "N",
l[l.P = 80] = "P",
l[l.Q = 81] = "Q",
l[l.R = 82] = "R",
l[l.S = 83] = "S",
l[l.T = 84] = "T",
l[l.V = 86] = "V",
l[l.W = 87] = "W",
l[l.X = 88] = "X",
l[l.Windows = 91] = "Windows",
l[l.ContextMenu = 93] = "ContextMenu",
l[l.F1 = 112] = "F1",
l[l.F2 = 113] = "F2",
l[l.F3 = 114] = "F3",
l[l.F4 = 115] = "F4",
l[l.F5 = 116] = "F5",
l[l.F6 = 117] = "F6",
l[l.F7 = 118] = "F7",
l[l.F8 = 119] = "F8",
l[l.F9 = 120] = "F9",
l[l.F10 = 121] = "F10",
l[l.F11 = 122] = "F11",
l[l.F12 = 123] = "F12",
l[l.Plus = 187] = "Plus",
l[l.Minus = 189] = "Minus",
l[l.FwdSlash = 191] = "FwdSlash",
l[l.Tilde = 192] = "Tilde",
l))(Q || {})
  , fi = (l => (l[l.Left = 0] = "Left",
l[l.Middle = 1] = "Middle",
l[l.Right = 2] = "Right",
l[l.Thumb1 = 3] = "Thumb1",
l[l.Thumb2 = 4] = "Thumb2",
l))(fi || {})
  , wi = (l => (l[l.None = 0] = "None",
l[l.Up = 1] = "Up",
l[l.Down = 2] = "Down",
l))(wi || {})
  , Ge = (l => (l[l.None = 0] = "None",
l[l.Key = 1] = "Key",
l[l.MouseButton = 2] = "MouseButton",
l[l.MouseWheel = 3] = "MouseWheel",
l))(Ge || {});
const na = ["", "", "", "Cancel", "", "", "Help", "", "Backspace", "Tab", "", "", "Clear", "Enter", "Enter", "", "Shift", "Control", "Alt", "Pause", "Capslock", "Kana", "Eisu", "Junja", "Final", "Hanja", "", "ESC", "Convert", "Nonconvert", "Accept", "Modechange", "Space", "Page Up", "Page Down", "End", "Home", "←", "↑", "→", "↓", "Select", "Print", "Execute", "Printscreen", "Insert", "Delete", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Windows Key", "", "Context Menu", "", "Sleep", "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9", "*", "+", "Separator", "-", ".", "/", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "Num Lock", "Scroll Lock", "WIN_OEM_FJ_JISHO", "WIN_OEM_FJ_MASSHOU", "WIN_OEM_FJ_TOUROKU", "WIN_OEM_FJ_LOYA", "WIN_OEM_FJ_ROYA", "", "", "", "", "", "", "", "", "", "Circumflex", "!", '"', "#", "$", "%", "&", "_", "(", ")", "*", "+", "|", "Hyphen Minus", "{", "}", "~", "", "", "", "", "Volume Mute", "Volume Down", "Volume Up", "", "", ";", "=", ",", "-", ".", "/", "Backquote", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[", "\\", "]", "'", "", "Meta", "ALTGR", "", "WIN_ICO_HELP", "WIN_ICO_00", "", "WIN_ICO_CLEAR", "", "", "WIN_OEM_RESET", "WIN_OEM_JUMP", "WIN_OEM_PA1", "WIN_OEM_PA2", "WIN_OEM_PA3", "WIN_OECTRL", "WIN_OEM_CUSEL", "WIN_OEM_ATTN", "WIN_OEM_FINISH", "WIN_OEM_COPY", "WIN_OEM_AUTO", "WIN_OEM_ENLW", "WIN_OEM_BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN_OEM_CLEAR", ""]
  , ma = ["Left Mouse", "Middle Mouse", "Right Mouse", "Thumb Mouse 1", "Thumb Mouse 2"]
  , ha = ["", "Mouse Wheel Up", "Mouse Wheel Down"];
class Pt {
    constructor(e, t) {
        this.type = e,
        this.code = t,
        this.type = e,
        this.code = t
    }
    equals(e) {
        return this.type == e.type && this.code == e.code
    }
    toString() {
        return this.type == 0 ? "" : this.type == 1 ? na[this.code] || `Key ${this.code}` : this.type == 2 ? ma[this.code] || `Mouse ${this.code}` : ha[this.code] || `Mouse Wheel ${this.code}`
    }
}
const Ni = 4
  , ji = 5
  , ua = 10;
function Vi(l) {
    return l.displayCloseIcon ? "img/gui/close.svg" : X.getSvgFromGameType(l.ping || l.emote)
}
function xt(l) {
    let e = Math.atan2(l.y, l.x) * 180 / Math.PI;
    return e < 0 && (e += 360),
    e
}
function ca(l, e, t) {
    return e <= t ? t - e <= 180 ? e <= l && l <= t : t <= l || l <= e : e - t <= 180 ? t <= l && l <= e : e <= l || l <= t
}
class da {
    constructor(e, t, i, r, s) {
        this.audioManager = e,
        this.uiManager = t,
        this.playerBarn = i,
        this.camera = r,
        this.map = s,
        this.triggerPing = () => {
            if (this.activePlayer) {
                let h;
                this.emoteSelector.ping && !this.emoteWheelsGreyed ? vt[this.emoteSelector.ping]?.pingMap && (h = this.uiManager.getWorldPosFromMapPos(this.bigmapPingPos || this.emoteScreenPos, this.map, this.camera),
                h ||= this.camera.YMmm(this.emoteScreenPos),
                h.x = b.clamp(h.x, 0, this.map.width),
                h.y = b.clamp(h.y, 0, this.map.height),
                this.sendPing({
                    type: this.emoteSelector.ping,
                    pos: h
                })) : this.emoteSelector.emote && !this.emoteWheelsGreyed && (h = this.activePlayer.HiVuim,
                this.sendEmote({
                    type: this.emoteSelector.emote,
                    pos: h
                }),
                this.uiManager.displayMapLarge(!0)),
                this.inputReset(),
                this.pingKeyTriggered = this.pingKeyDown
            }
        }
        ,
        this.triggerEmote = () => {
            if (this.activePlayer) {
                let h;
                this.emoteSelector.emote && !this.emoteWheelsGreyed && (h = this.activePlayer.HiVuim,
                this.sendEmote({
                    type: this.emoteSelector.emote,
                    pos: h
                })),
                this.inputReset()
            }
        }
        ,
        this.onTouchStart = h => {
            this.wheelDisplayed && (h.stopPropagation(),
            this.inputReset())
        }
        ,
        B.touch && (this.emoteElems.css("pointer-events", "auto"),
        this.bigmapCollision.on("touchend", h => {
            h.stopPropagation(),
            this.bigmapPingPos = {
                x: h.originalEvent?.changedTouches[0].pageX,
                y: h.originalEvent?.changedTouches[0].pageY
            },
            this.emoteScreenPos = m.create(this.camera.zaTP / 2, this.camera.XbB / 2),
            this.pingMouseTriggered = !0
        }
        ),
        this.emoteButtonElem.css("pointer-events", "auto"),
        this.emoteButtonElem.on("touchstart", h => {
            h.stopPropagation(),
            this.emoteScreenPos = m.create(this.camera.zaTP / 2, this.camera.XbB / 2),
            this.emoteMouseTriggered = !0
        }
        ),
        this.emoteElems.on("touchstart", h => {
            h.stopPropagation(),
            this.emoteTouchedPos = {
                x: h.originalEvent?.changedTouches[0].pageX,
                y: h.originalEvent?.changedTouches[0].pageY
            }
        }
        ),
        c(document).on("touchstart", this.onTouchStart)),
        this.emoteWheelData = {
            middle: {
                parent: c("#ui-emote-middle"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                displayCloseIcon: !0
            },
            top: {
                parent: c("#ui-emote-top"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                emoteSlot: _e.Top
            },
            right: {
                parent: c("#ui-emote-right"),
                vA: m.create(1, 1),
                vC: m.create(1, -1),
                ping: "",
                emote: "",
                emoteSlot: _e.Right
            },
            bottom: {
                parent: c("#ui-emote-bottom"),
                vA: m.create(1, -1),
                vC: m.create(-1, -1),
                ping: "",
                emote: "",
                emoteSlot: _e.Bottom
            },
            left: {
                parent: c("#ui-emote-left"),
                vA: m.create(-1, -1),
                vC: m.create(-1, 1),
                ping: "",
                emote: "",
                emoteSlot: _e.Left
            }
        };
        const a = {
            middle: {
                parent: c("#ui-team-ping-middle"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                displayCloseIcon: !0
            },
            top: {
                parent: c("#ui-team-ping-top"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "ping_danger",
                emote: ""
            },
            right: {
                parent: c("#ui-team-ping-right"),
                vA: m.create(1, 1),
                vC: m.create(1, -1),
                ping: "ping_coming",
                emote: ""
            },
            bottom: {
                parent: c("#ui-team-ping-bottom"),
                vA: m.create(1, -1),
                vC: m.create(-1, -1),
                ping: "ping_help",
                emote: ""
            },
            "bottom-left": {
                parent: c("#ui-team-ping-bottom-left"),
                vA: m.create(-1, -1),
                vC: m.create(-1, 0),
                ping: "",
                emote: "emote_medical"
            },
            "top-left": {
                parent: c("#ui-team-ping-top-left"),
                vA: m.create(-1, 0),
                vC: m.create(-1, 1),
                ping: "",
                emote: "emote_ammo",
                ammoEmote: !0
            }
        };
        for (const h in a)
            if (a.hasOwnProperty(h)) {
                const f = a[h]
                  , u = xt(f.vA)
                  , d = xt(f.vC);
                this.teamPingSelectors.push({
                    parent: f.parent,
                    angleA: u,
                    angleC: d,
                    highlight: f.parent.find(".ui-emote-hl"),
                    highlightDisplayed: !1,
                    ping: f.ping,
                    emote: f.emote,
                    ammoEmote: f?.ammoEmote,
                    displayCloseIcon: f?.displayCloseIcon
                })
            }
        this.displayedSelectors = this.teamPingSelectors,
        this.container.scale.set(this.baseScale, this.baseScale),
        this.container.addChild(this.pingContainer);
        const o = function(h, f=16777215) {
            const u = new se
              , d = new se
              , p = O.groupColors[h] || f
              , w = ae.from("ping-border.img");
            w.scale.set(.4, .4),
            w.anchor.set(.5, .5),
            w.tint = p,
            w.alpha = 0,
            w.visible = !0,
            u.addChild(w);
            const S = ae.from("ping-team-danger.img");
            S.scale.set(.4, .4),
            S.anchor.set(.5, .5),
            S.tint = p,
            S.alpha = 0,
            S.visible = !0,
            u.addChild(S);
            const g = ae.from("ping-team-danger.img");
            g.scale.set(.5, .5),
            g.anchor.set(.5, .5),
            g.tint = p,
            g.alpha = 0,
            g.visible = !0,
            d.addChild(g);
            const y = ae.from("ping-indicator.img");
            return y.scale.set(.5, .5),
            y.anchor.set(.5, 0),
            y.alpha = 0,
            y.visible = !0,
            d.addChild(y),
            {
                elem: c("#ui-team-indicators").find(`.ui-indicator-ping[data-id=${h}]`),
                borderElem: c("#ui-team-indicators").find(`.ui-indicator-ping-border[data-id=${h}]`),
                pingContainer: u,
                indContainer: d,
                borderSprite: {
                    sprite: w,
                    baseScale: .4
                },
                pingSprite: {
                    sprite: S,
                    baseScale: .4
                },
                indSpriteOuter: {
                    sprite: y,
                    baseScale: .5,
                    baseTint: Number(y.tint)
                },
                indSpriteInner: {
                    sprite: g,
                    baseScale: .5,
                    baseTint: Number(g.tint)
                },
                displayed: !1,
                fadeIn: 0,
                life: 0,
                fadeOut: 0,
                pos: m.create(0, 0)
            }
        };
        for (let h = 0; h < 4; h++) {
            const f = o(h);
            this.pingContainer.addChild(f.pingContainer),
            this.indContainer.addChild(f.indContainer),
            this.pingIndicators.push({
                ping: f
            })
        }
        this.airdropIndicator = o(Ni, vt.ping_airdrop.tint),
        this.pingContainer.addChild(this.airdropIndicator.pingContainer),
        this.indContainer.addChild(this.airdropIndicator.indContainer),
        this.pingIndicators.push({
            ping: this.airdropIndicator
        }),
        this.airstrikeIndicator = o(ji, vt.ping_airstrike.tint),
        this.pingContainer.addChild(this.airstrikeIndicator.pingContainer),
        this.indContainer.addChild(this.airstrikeIndicator.indContainer),
        this.pingIndicators.push({
            ping: this.airstrikeIndicator
        })
    }
    gameElem = c("#ui-game");
    disable = !1;
    activePlayer = null;
    worldPos = m.create(0, 0);
    zIdxNext = 0;
    emoteSelector = {
        ping: "",
        emote: ""
    };
    emoteSoftTicker = 0;
    emoteHardTicker = 0;
    emoteCounter = 0;
    emoteWheelsGreyed = !1;
    teamEmotesGreyed = !1;
    wheelKeyTriggered = !1;
    emoteTimeoutTicker = 0;
    pingKeyTriggered = !1;
    pingKeyDown = !1;
    pingMouseTriggered = !1;
    wheelDisplayed = !1;
    emoteMouseTriggered = !1;
    emoteScreenPos = m.create(0, 0);
    triggerPing;
    triggerEmote;
    emoteTouchedPos = null;
    bigmapPingPos = null;
    onTouchStart;
    emoteElems = c(".ui-emote");
    bigmapCollision = c("#big-map-collision");
    emoteButtonElem = c("#ui-emote-button");
    emoteWheels = c("#ui-emotes, #ui-team-pings");
    teamEmotes = c(".ui-emote-bottom-left, .ui-emote-top-left");
    emoteWheel = c("#ui-emotes");
    emoteWheelData;
    teamPingWheel = c("#ui-team-pings");
    teamPingSelectors = [];
    displayedSelectors;
    baseScale = 1;
    container = new se;
    pingContainer = new se;
    indContainer = new se;
    pingIndicators = [];
    airdropIndicator;
    airstrikeIndicator;
    emoteLifeIn = .75;
    emoteLife = 1;
    emoteLifeOut = .1;
    pingFadeIn = .5;
    pingLife = 4.25;
    pingFadeOut = .1;
    wedgeOpacityReset = B.touch ? 1 : .75;
    teamEmoteOpacityReset = .2;
    emotes = [];
    newPings = [];
    newEmotes = [];
    emoteLoadout = [];
    unlockTypes = {};
    socialUnlocked = !1;
    emoteWheelSelectors;
    parentDisplayed;
    Obb() {
        B.touch && (c(document).off("touchstart", this.onTouchStart),
        this.emoteButtonElem.off("touchstart"),
        this.emoteElems.off("touchstart"),
        this.bigmapCollision.off("touchend")),
        this.init()
    }
    init() {
        this.emoteWheelsGreyed = !1,
        this.emoteWheels.css("opacity", 1),
        this.teamEmotesGreyed = !1,
        this.teamEmotes.css("opacity", 1),
        this.disable = !1,
        this.inputReset()
    }
    inputReset() {
        this.pingMouseTriggered = !1,
        this.pingKeyTriggered = !1,
        this.emoteMouseTriggered = !1,
        this.wheelDisplayed = !1,
        this.displayWheel(this.teamPingWheel, !1),
        this.displayWheel(this.emoteWheel, !1),
        this.emoteTouchedPos = null,
        this.bigmapPingPos = null,
        this.emoteTimeoutTicker = 0;
        for (let e = 0; e < this.displayedSelectors.length; e++) {
            const t = this.displayedSelectors[e]
              , r = yt[t.emote]?.teamOnly;
            this.teamEmotesGreyed && r ? t.parent.css("opacity", this.teamEmoteOpacityReset) : t.parent.css("opacity", this.wedgeOpacityReset),
            t.highlight.css("display", "none"),
            t.highlightDisplayed = !1
        }
    }
    sendPing(e) {
        this.newPings.push({
            type: e.type,
            pos: e.pos
        }),
        this.incrementEmote()
    }
    addPing(e, t) {
        if (this.activePlayer) {
            const i = vt[e.type];
            if (i) {
                this.uiManager.createPing(e.type, e.pos, e.playerId, this.activePlayer.__id, this.playerBarn, t);
                let r = null
                  , s = i.sound;
                if (e.type == "ping_airdrop")
                    r = this.pingIndicators[Ni].ping;
                else if (e.type == "ping_airstrike")
                    r = this.pingIndicators[ji].ping;
                else {
                    const a = this.playerBarn.getPlayerInfo(e.playerId);
                    if (a) {
                        const h = this.playerBarn.getPlayerInfo(this.activePlayer.__id).groupId
                          , f = a.groupId;
                        if (h == f) {
                            const d = this.playerBarn.getGroupInfo(f).playerIds.indexOf(e.playerId);
                            d !== -1 && (r = this.pingIndicators[d].ping)
                        }
                    }
                    const o = this.playerBarn.getPlayerStatus(e.playerId);
                    o && o.role == "leader" && (s = i.soundLeader)
                }
                t || e.type != "ping_airstrike" ? this.audioManager.playSound(s, {
                    channel: "ui"
                }) : this.audioManager.playSound(s, {
                    channel: "ui",
                    fallOff: 1,
                    soundPos: e.pos,
                    rangeMult: 20
                }),
                r && (r.pos = e.pos,
                r.pingSprite.sprite.texture = J.from(i.texture),
                r.indSpriteInner.sprite.texture = J.from(i.texture),
                r.indSpriteInner.sprite.tint = i.mapEvent ? i.tint : r.indSpriteInner.baseTint,
                r.indSpriteOuter.sprite.tint = i.mapEvent ? i.tint : r.indSpriteOuter.baseTint,
                r.fadeIn = this.pingFadeIn,
                r.life = this.pingLife,
                r.fadeOut = this.pingFadeOut,
                r.mapEvent = i.mapEvent,
                r.worldDisplay = i.worldDisplay)
            }
        }
    }
    sendEmote(e) {
        this.newEmotes.push({
            type: e.type,
            pos: e.pos
        }),
        this.incrementEmote()
    }
    addEmote(e) {
        const t = yt[e.type];
        if (t) {
            let i = null;
            for (let r = 0; r < this.emotes.length; r++)
                this.emotes[r].alive || i ? this.emotes[r].alive && this.emotes[r].playerId == e.playerId && (this.emotes[r].alive = !1) : i = this.emotes[r];
            if (i || (i = {},
            i.alive = !1,
            i.pos = m.create(0, 0),
            i.container = new se,
            i.circleOuter = ae.from("emote-circle-outer.img"),
            i.circleOuter.anchor.set(.5, .5),
            i.baseScale = .55,
            i.circleOuter.scale.set(i.baseScale * .8, i.baseScale * .8),
            i.circleOuter.tint = 0,
            i.circleOuter.visible = !0,
            i.container.addChild(i.circleOuter),
            i.sprite = new ae,
            i.sprite.anchor.set(.5, .5),
            i.container.addChild(i.sprite),
            i.sprite.scale.set(i.baseScale, i.baseScale),
            i.posOffset = m.create(0, 4),
            i.container.scale.set(1, 1),
            i.container.visible = !1,
            this.emotes.push(i)),
            i.alive = !0,
            i.isNew = !0,
            i.type = e.type,
            i.playerId = e.playerId,
            i.pos = m.create(0, 0),
            i.lifeIn = this.emoteLifeIn,
            i.life = this.emoteLife,
            i.lifeOut = this.emoteLifeOut,
            i.zIdx = this.zIdxNext++,
            t.texture && (i.sprite.texture = J.from(t.texture)),
            i.container.visible = !1,
            i.baseScale = .55,
            i.sound = t.sound,
            i.channel = t.channel,
            e.type == "emote_loot") {
                const r = U[e.itemType];
                if (r?.lootImg) {
                    i.sprite.texture = J.from(r.lootImg.sprite);
                    const s = U[r.ammo];
                    i.circleOuter.tint = s ? s.lootImg.tintDark : 0,
                    r.lootImg.rot ? i.sprite.rotation = r.lootImg.rot : i.sprite.rotation = 0,
                    r.lootImg.mirror ? i.sprite.scale.set(i.baseScale * -1, i.baseScale) : i.sprite.scale.set(i.baseScale, i.baseScale),
                    r.sound?.deploy && (r.type == "gun" ? (i.sound = r.sound.deploy,
                    i.channel = "activePlayer") : i.sound = "")
                }
            } else
                i.circleOuter.tint = 0,
                i.sprite.rotation = 0,
                i.sprite.scale.set(i.baseScale, i.baseScale)
        }
    }
    incrementEmote() {
        this.emoteCounter++,
        this.emoteCounter >= O.player.emoteThreshold && (this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : O.player.emoteHardCooldown * 1.5)
    }
    nYcwKO(e, t, i, r, s, a, o, h, f, u) {
        const d = this.playerBarn
          , p = this.camera;
        let w = m.create(h.mousePos.x, h.mousePos.y);
        h.lostFocus && this.inputReset(),
        f.isBindPressed(F.TeamPingMenu) && !this.pingKeyDown && !u && (this.pingKeyDown = !0,
        this.pingKeyTriggered = !0),
        f.isBindReleased(F.TeamPingMenu) && this.pingKeyDown && (this.pingKeyDown = !1,
        this.pingKeyTriggered = this.wheelDisplayed),
        f.isBindPressed(F.TeamPingSingle) && !this.pingMouseTriggered && !this.emoteMouseTriggered && (this.emoteScreenPos = m.copy(w),
        this.pingMouseTriggered = !0),
        f.isBindReleased(F.TeamPingSingle) && this.pingMouseTriggered && this.triggerPing(),
        f.isBindPressed(F.EmoteMenu) && (!this.pingMouseTriggered && !this.emoteMouseTriggered && this.pingKeyDown && (this.emoteScreenPos = m.copy(w),
        this.pingMouseTriggered = !0),
        this.pingMouseTriggered || (this.emoteScreenPos = m.copy(w),
        this.emoteMouseTriggered = !0)),
        f.isBindReleased(F.EmoteMenu) && (this.pingKeyTriggered && this.pingMouseTriggered && this.triggerPing(),
        this.emoteMouseTriggered && this.triggerEmote()),
        this.activePlayer = i,
        (t != i.__id || i.pjeWp.sTD) && !this.disable && (this.Obb(),
        this.disable = !0);
        const S = a.perkMode && !i.pjeWp.jJN;
        if (!this.disable && !S && (this.wheelKeyTriggered = this.pingKeyTriggered || this.emoteMouseTriggered,
        this.emoteSoftTicker -= e,
        this.emoteCounter >= O.player.emoteThreshold && this.emoteHardTicker > 0 ? (this.emoteHardTicker -= e,
        this.emoteHardTicker < 0 && (this.emoteCounter = 0)) : this.emoteSoftTicker < 0 && this.emoteCounter > 0 && (this.emoteCounter--,
        this.emoteSoftTicker = O.player.emoteSoftCooldown * 1.5),
        (this.pingMouseTriggered || this.emoteMouseTriggered) && !this.wheelDisplayed && (this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel,
        this.parentDisplayed.css({
            display: "block",
            left: this.emoteScreenPos.x,
            top: this.emoteScreenPos.y
        }),
        this.displayWheel(this.parentDisplayed, !0),
        this.wheelDisplayed = !0,
        this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors,
        this.worldPos = p.YMmm(this.emoteScreenPos)),
        this.wheelDisplayed))
            if (this.emoteTimeoutTicker += e,
            this.emoteTimeoutTicker > ua)
                this.inputReset();
            else {
                this.emoteHardTicker > 0 && !this.emoteWheelsGreyed ? (this.emoteWheels.css("opacity", .5),
                this.emoteWheelsGreyed = !0) : this.emoteHardTicker <= 0 && this.emoteWheelsGreyed && (this.emoteWheels.css("opacity", 1),
                this.emoteWheelsGreyed = !1),
                !this.teamEmotesGreyed && r == 1 && (this.teamEmotes.css("opacity", this.teamEmoteOpacityReset),
                this.teamEmotesGreyed = !0);
                let v = null;
                if (B.touch && (w = this.emoteTouchedPos),
                w) {
                    const k = m.sub(w, this.emoteScreenPos);
                    k.y *= -1;
                    const _ = m.length(k)
                      , A = xt(k)
                      , z = 35
                      , P = i.qWTK.qIUScd[i.qWTK.ArjhbB]
                      , T = U[P.type];
                    let C = "";
                    T && T.ammo && (C = T.ammo);
                    for (let N = 0; N < this.displayedSelectors.length; N++) {
                        const L = this.displayedSelectors[N];
                        if (L.ammoEmote) {
                            const G = {
                                "9mm": "emote_ammo9mm",
                                "12gauge": "emote_ammo12gauge",
                                "762mm": "emote_ammo762mm",
                                "556mm": "emote_ammo556mm",
                                "50AE": "emote_ammo50ae",
                                "308sub": "emote_ammo308sub",
                                flare: "emote_ammoflare",
                                "45acp": "emote_ammo45acp"
                            }
                              , K = L.emote;
                            if (L.emote = G[C] || "emote_ammo",
                            L.texture = yt[L.emote].texture,
                            K != L.emote) {
                                const oe = L.parent.find(".ui-emote-image")
                                  , ke = Vi(L);
                                oe.css("background-image", `url(${ke})`)
                            }
                        }
                        const j = L.ping || L.emote
                          , V = yt[L.emote]
                          , R = V && V.teamOnly && r == 1;
                        if (_ <= z && !j && this.emoteHardTicker <= 0 && !R) {
                            v = L;
                            continue
                        }
                        if (ca(A, L.angleC, L.angleA) && _ > z && j && this.emoteHardTicker <= 0 && !R) {
                            v = L;
                            continue
                        }
                        L.highlightDisplayed && (L.parent.css("opacity", this.wedgeOpacityReset),
                        L.highlight.css("display", "none"),
                        L.highlightDisplayed = !1)
                    }
                }
                v && (this.emoteSelector = v,
                v.highlightDisplayed || (v.parent.css("opacity", 1),
                v.highlight.css("display", "block"),
                v.highlightDisplayed = !0),
                B.touch && this.emoteTouchedPos && (this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote()))
            }
        for (let v = 0; v < this.emotes.length; v++) {
            const k = this.emotes[v];
            if (k.alive) {
                let _ = !1
                  , A = m.create(0, 0)
                  , z = 0;
                const P = d.getPlayerById(k.playerId);
                if (P && !P.pjeWp.sTD && (A = m.copy(P.qqPdb),
                z = P.layer,
                _ = !0),
                !_) {
                    const T = s.getDeadBodyById(k.playerId);
                    T && (A = m.copy(T.pos),
                    z = T.layer,
                    _ = !0)
                }
                if (_) {
                    k.isNew && this.audioManager.playSound(k.sound, {
                        channel: k.channel,
                        soundPos: A,
                        layer: z
                    }),
                    k.isNew = !1,
                    k.pos = A,
                    k.lifeIn > 0 ? k.lifeIn -= e : k.life > 0 ? k.life -= e : k.lifeOut > 0 && (k.lifeOut -= e);
                    const T = x.sameLayer(z, this.activePlayer.layer) ? 3 : z;
                    o.addPIXIObj(k.container, T, 5e4, k.zIdx),
                    k.alive = k.alive && k.lifeOut > 0
                } else
                    k.alive = !1
            }
        }
        const g = m.create(p.zaTP * .5 / p.kKovr(), p.XbB * .5 / p.kKovr())
          , y = {
            min: m.sub(p.HiVuim, g),
            max: m.add(p.HiVuim, g)
        }
          , M = d.getPlayerInfo(i.__id).groupId
          , I = d.getGroupInfo(M);
        for (let v = 0; v < this.pingIndicators.length; v++) {
            const k = this.pingIndicators[v].ping
              , _ = I.playerIds[v]
              , A = k.indContainer
              , z = k.pingContainer;
            if (_ != null || k.mapEvent) {
                d.getPlayerInfo(_);
                const P = _ == this.activePlayer.__id
                  , T = d.getPlayerStatus(_)
                  , C = k.borderSprite.sprite
                  , N = k.pingSprite.sprite
                  , L = k.indSpriteOuter.sprite
                  , j = k.indSpriteInner.sprite;
                let V = !0;
                if (k.fadeIn -= e,
                k.life -= e,
                k.fadeOut -= k.life > 0 ? 0 : e,
                k.fadeOut > 0) {
                    const E = k.pos
                      , R = m.normalizeSafe(m.sub(E, p.HiVuim), m.create(1, 0))
                      , G = be.intersectRayAabb(p.HiVuim, R, y.min, y.max)
                      , K = Math.atan2(R.y, -R.x) + Math.PI * .5
                      , oe = p.SlQA(G)
                      , ke = be.testCircleAabb(E, O.player.radius, y.min, y.max)
                      , Re = p.zHRVv(k.borderSprite.baseScale)
                      , je = p.zHRVv(k.pingSprite.baseScale);
                    if (C.scale.set(Re, Re),
                    N.scale.set(je, je),
                    T?.dead)
                        continue;
                    const $e = 64;
                    V = k.fadeOut < 0;
                    const rt = ke ? p.SlQA(E).x : b.clamp(oe.x, $e, p.zaTP - $e)
                      , st = ke ? p.SlQA(E).y : b.clamp(oe.y, $e, p.XbB - $e)
                      , at = p.SlQA(E).x
                      , Le = p.SlQA(E).y;
                    N.position.x = at,
                    N.position.y = Le,
                    C.position.x = at,
                    C.position.y = Le,
                    L.position.x = rt,
                    L.position.y = st,
                    L.rotation = K,
                    j.position.x = rt,
                    j.position.y = st;
                    const Ue = C.alpha <= 0 ? 1 : C.alpha - e;
                    C.alpha = Ue;
                    const Je = p.zHRVv(k.borderSprite.baseScale * (2 - Ue));
                    if (C.scale.set(Je, Je),
                    j.alpha = ke ? 0 : Ue,
                    k.fadeIn > 0) {
                        const ot = 1 - k.fadeIn / this.pingFadeIn;
                        z.alpha = 1,
                        A.alpha = 1,
                        N.alpha = 1,
                        L.alpha = ke ? 0 : ot
                    } else
                        L.alpha = ke ? 0 : 1;
                    if (k.life < 0) {
                        const ot = k.fadeOut / this.pingFadeOut;
                        z.alpha = ot,
                        A.alpha = ot
                    }
                    k.displayed || (z.visible = k.worldDisplay,
                    A.visible = !P || k.mapEvent,
                    k.displayed = !0)
                }
                V && k.displayed && (z.visible = !1,
                A.visible = !1,
                k.displayed = !1)
            } else
                z.visible = !1,
                A.visible = !1,
                k.displayed = !1
        }
    }
    displayWheel(e, t) {
        e.css("display", t ? "block" : "none")
    }
    updateEmoteWheel(e) {
        this.emoteLoadout = e;
        const t = {
            top: e[_e.Top],
            right: e[_e.Right],
            bottom: e[_e.Bottom],
            left: e[_e.Left]
        };
        for (const i in t)
            if (t.hasOwnProperty(i)) {
                const r = t[i];
                yt[r] && this.emoteWheelData[i] && (this.emoteWheelData[i].emote = r)
            }
        this.emoteWheelSelectors = [];
        for (const i in this.emoteWheelData)
            if (this.emoteWheelData.hasOwnProperty(i)) {
                const r = this.emoteWheelData[i]
                  , s = xt(r.vA)
                  , a = xt(r.vC);
                this.emoteWheelSelectors.push(Object.assign({
                    angleA: s,
                    angleC: a,
                    highlight: r.parent.find(".ui-emote-hl"),
                    highlightDisplayed: !1
                }, r));
                const o = r.parent.find(".ui-emote-image")
                  , h = Vi(r);
                o.css("background-image", `url(${h})`)
            }
    }
    FQpmn(e) {
        for (let t = 0; t < this.emotes.length; t++) {
            const i = this.emotes[t];
            if (i.container.visible = i.alive,
            i.alive) {
                let r = 0;
                if (i.lifeIn > 0) {
                    const h = 1 - i.lifeIn / this.emoteLifeIn;
                    r = b.easeOutElastic(h)
                } else
                    i.life > 0 ? r = 1 : i.lifeOut > 0 && (r = i.lifeOut / this.emoteLifeOut);
                const s = m.add(i.pos, m.mul(i.posOffset, 1 / b.clamp(e.uha, .75, 1)))
                  , a = e.SlQA(s)
                  , o = r * i.baseScale * b.clamp(e.uha, .9, 1.75);
                i.container.position.set(a.x, a.y),
                i.container.scale.set(o, o)
            }
        }
    }
}
const ti = O.GasMode
  , zt = 100 * 1e3
  , Ui = 512;
class Br {
    constructor(e, t) {
        if (this.canvasMode = e,
        this.gasColor = t,
        e)
            this.canvas = document.createElement("canvas"),
            this.canvas.width = window.innerWidth,
            this.canvas.height = window.innerHeight,
            this.display = new ae(J.from(this.canvas)),
            this.gasColorDOMString = X.colorToDOMString(t, .6);
        else {
            this.display = new Me;
            const i = this.display;
            i.clear(),
            i.beginFill(t, .6),
            i.moveTo(-1e5, -1e5),
            i.lineTo(zt, -1e5),
            i.lineTo(zt, zt),
            i.lineTo(-1e5, zt),
            i.closePath(),
            i.beginHole(),
            i.moveTo(0, 1);
            for (let r = 1; r < Ui; r++) {
                const s = r / Ui
                  , a = Math.sin(Math.PI * 2 * s)
                  , o = Math.cos(Math.PI * 2 * s);
                i.lineTo(a, o)
            }
            i.endHole(),
            i.closePath()
        }
        this.display.visible = !1
    }
    gasColorDOMString = "";
    display = null;
    canvas = null;
    free() {
        this.display.destroy(!0)
    }
    resize() {
        this.canvas != null && (this.canvas.width = window.innerWidth,
        this.canvas.height = window.innerHeight,
        this.display.texture.update())
    }
    render(e, t, i) {
        if (this.canvas != null) {
            const r = this.canvas
              , s = r.getContext("2d");
            s.clearRect(0, 0, r.width, r.height),
            s.beginPath(),
            s.fillStyle = this.gasColorDOMString,
            s.rect(0, 0, r.width, r.height),
            s.arc(e.x, e.y, t, 0, Math.PI * 2, !0),
            s.fill()
        } else {
            const r = m.copy(e);
            let s = t;
            s < .1 && (s = 1,
            r.x += zt * .5);
            const a = this.display;
            a.position.set(r.x, r.y),
            a.scale.set(s, s)
        }
        this.display.visible = i
    }
}
class pa {
    display = new se;
    circleGfx = new Me;
    lineGfx = new Me;
    safePos = m.create(0, 0);
    safeRad = 0;
    playerPos = m.create(0, 0);
    constructor() {
        this.display.addChild(this.circleGfx),
        this.display.addChild(this.lineGfx),
        this.circleGfx.visible = !1,
        this.lineGfx.visible = !1
    }
    render(e, t, i, r, s) {
        if (this.circleGfx.visible = r,
        this.lineGfx.visible = s,
        r || s) {
            const a = !m.eq(this.safePos, e, 1e-4)
              , o = Math.abs(this.safeRad - t) > 1e-4
              , h = !m.eq(this.playerPos, i, 1e-4);
            if (a && (this.safePos.x = e.x,
            this.safePos.y = e.y),
            o && (this.safeRad = t),
            h && (this.playerPos.x = i.x,
            this.playerPos.y = i.y),
            a && this.circleGfx.position.set(this.safePos.x, this.safePos.y),
            o && (this.circleGfx.clear(),
            this.circleGfx.lineStyle(1.5, 16777215),
            this.circleGfx.drawCircle(0, 0, t)),
            a || o || h) {
                const u = m.length(m.sub(i, e)) < t ? .5 : 1;
                this.lineGfx.clear(),
                this.lineGfx.lineStyle(2, 65280, u),
                this.lineGfx.moveTo(i.x, i.y),
                this.lineGfx.lineTo(e.x, e.y)
            }
        }
    }
}
class fa {
    mode = ti.Inactive;
    circleT = 0;
    circleTOld = 0;
    duration = 0;
    interpolationT = 0;
    gasRenderer;
    circleOld;
    circleNew;
    constructor(e) {
        const t = (Math.sqrt(2) + .01) * 1024;
        this.circleOld = {
            pos: m.create(0, 0),
            rad: t
        },
        this.circleNew = {
            pos: m.create(0, 0),
            rad: t
        },
        this.gasRenderer = new Br(e,16711680)
    }
    Obb() {
        this.gasRenderer.free()
    }
    resize() {
        this.gasRenderer.resize()
    }
    isActive() {
        return this.mode != ti.Inactive
    }
    getCircle(e) {
        const t = this.mode == ti.Moving ? b.lerp(e, this.circleTOld, this.circleT) : 0;
        return {
            pos: m.lerp(t, this.circleOld.pos, this.circleNew.pos),
            rad: b.lerp(t, this.circleOld.rad, this.circleNew.rad)
        }
    }
    setProgress(e) {
        this.circleTOld = this.circleT,
        this.circleT = e,
        this.interpolationT = 0
    }
    setFullState(e, t, i, r) {
        if (t.mode != this.mode) {
            const s = Math.ceil(t.duration * (1 - e));
            r.setWaitingForPlayers(!1),
            r.displayGasAnnouncement(t.mode, s)
        }
        this.mode = t.mode,
        this.duration = t.duration,
        this.setProgress(e),
        this.circleOld.pos = m.copy(t.posOld),
        this.circleOld.rad = t.radOld,
        this.circleNew.pos = m.copy(t.posNew),
        this.circleNew.rad = t.radNew
    }
    FQpmn(e, t) {
        this.interpolationT += e;
        let i = 1;
        t.bAEQ && (i = b.clamp(this.interpolationT / t.NRB, 0, 1));
        const r = this.getCircle(i)
          , s = t.SlQA(r.pos)
          , a = t.VFn(r.rad);
        this.gasRenderer.render(s, a, this.isActive())
    }
}
const ii = {};
function wa(l) {
    const e = he[l];
    if (e.type === "structure") {
        const t = [];
        for (let s = 0; s < e.layers.length; s++) {
            const a = e.layers[s]
              , o = b.oriToRad(a.ori)
              , h = H.transform(Qe.getBoundingCollider(a.type), a.pos, o, 1);
            t.push(H.toAabb(h))
        }
        for (let s = 0; s < e.stairs.length; s++)
            t.push(e.stairs[s].collision);
        const i = be.boundingAabb(t)
          , r = m.create(1, 1);
        return i.min = m.sub(i.min, r),
        i.max = m.add(i.max, r),
        H.createAabb(i.min, i.max)
    }
    if (e.type === "building") {
        const t = [];
        for (let r = 0; r < e.floor.surfaces.length; r++) {
            const s = e.floor.surfaces[r].collision;
            for (let a = 0; a < s.length; a++)
                t.push(s[a])
        }
        for (let r = 0; r < e.ceiling.zoomRegions.length; r++) {
            const s = e.ceiling.zoomRegions[r];
            s.zoomIn && t.push(s.zoomIn),
            s.zoomOut && t.push(s.zoomOut)
        }
        for (let r = 0; r < e.mapObjects.length; r++) {
            const s = e.mapObjects[r];
            let a = s.type;
            if (typeof a == "function" && (a = a()),
            a !== "") {
                const o = b.oriToRad(s.ori)
                  , h = H.transform(Qe.getBoundingCollider(a), s.pos, o, s.scale);
                t.push(H.toAabb(h))
            }
        }
        const i = be.boundingAabb(t);
        return H.createAabb(i.min, i.max)
    }
    return e.type === "decal" ? H.toAabb(e.collision) : e.type === "loot_spawner" ? H.createCircle(m.create(0, 0), 3) : (Ut(e.collision !== void 0),
    e.collision)
}
const Qe = {
    getBoundingCollider(l) {
        if (ii[l])
            return ii[l];
        const e = wa(l);
        return ii[l] = e,
        e
    },
    getBridgeDims(l) {
        const e = Qe.getBoundingCollider(l)
          , t = H.toAabb(e)
          , i = m.mul(m.sub(t.max, t.min), .5)
          , r = i.x > i.y
          , s = m.create(r ? 1 : 0, r ? 0 : 1)
          , a = m.dot(s, i) * 2
          , o = m.dot(m.perp(s), i) * 2;
        return {
            length: a,
            width: o
        }
    },
    getBridgeOverlapCollider(l, e, t, i) {
        const r = he[l]
          , s = Qe.getBridgeDims(l)
          , a = m.create(1, 0)
          , o = m.add(m.mul(a, s.length * 1.5), m.mul(m.perp(a), s.width * r.terrain.bridge.nearbyWidthMult))
          , h = H.createAabbExtents(m.create(0, 0), m.mul(o, .5));
        return H.transform(h, e, t, i)
    }
};
function Wi(l, e, t) {
    const i = e.length;
    let r, s, a, o, h;
    return t ? (l = b.fmod(l, 1),
    r = ~~(l * (i - 1)),
    a = r,
    o = (a + 1) % (i - 1),
    s = a > 0 ? a - 1 : i - 2,
    h = (o + 1) % (i - 1)) : (l = b.clamp(l, 0, 1),
    r = ~~(l * (i - 1)),
    a = r === i - 1 ? r - 1 : r,
    o = a + 1,
    s = a > 0 ? a - 1 : a,
    h = o < i - 1 ? o + 1 : o),
    {
        pt: l * (i - 1) - a,
        p0: e[s],
        p1: e[a],
        p2: e[o],
        p3: e[h]
    }
}
function qi(l, e, t, i, r) {
    return .5 * (2 * t + l * (-e + i) + l * l * (2 * e - 5 * t + 4 * i - r) + l * l * l * (-e + 3 * t - 3 * i + r))
}
function Hi(l, e, t, i, r) {
    return .5 * (-e + i + 2 * l * (2 * e - 5 * t + 4 * i - r) + 3 * l * l * (-e + 3 * t - 3 * i + r))
}
class Sa {
    points = [];
    arcLens = [];
    totalArcLen;
    looped;
    constructor(e, t) {
        Ut(e.length > 1),
        this.totalArcLen = 0,
        this.looped = t;
        for (let s = 0; s < e.length; s++)
            this.points.push(m.copy(e[s]));
        const i = e.length * 4;
        let r = this.points[0];
        for (let s = 0; s <= i; s++) {
            const a = s / i
              , o = this.getPos(a)
              , h = s === 0 ? 0 : this.arcLens[s - 1];
            this.arcLens[s] = h + m.length(m.sub(o, r)),
            r = m.copy(o)
        }
        this.totalArcLen = this.arcLens[this.arcLens.length - 1]
    }
    getPos(e) {
        const t = Wi(e, this.points, this.looped)
          , {pt: i} = t
          , {p0: r} = t
          , {p1: s} = t
          , {p2: a} = t
          , {p3: o} = t;
        return m.create(qi(i, r.x, s.x, a.x, o.x), qi(i, r.y, s.y, a.y, o.y))
    }
    getTangent(e) {
        const t = Wi(e, this.points, this.looped)
          , {pt: i} = t
          , {p0: r} = t
          , {p1: s} = t
          , {p2: a} = t
          , {p3: o} = t;
        return m.create(Hi(i, r.x, s.x, a.x, o.x), Hi(i, r.y, s.y, a.y, o.y))
    }
    getNormal(e) {
        const t = this.getTangent(e);
        return m.perp(m.normalizeSafe(t, m.create(1, 0)))
    }
    getClosestTtoPoint(e) {
        let t = Number.MAX_VALUE
          , i = 0;
        for (let I = 0; I < this.points.length - 1; I++) {
            const v = b.distToSegmentSq(e, this.points[I], this.points[I + 1]);
            v < t && (t = v,
            i = I)
        }
        const r = i
          , s = r + 1
          , a = this.points[r]
          , o = this.points[s]
          , h = m.sub(o, a)
          , f = b.clamp(m.dot(m.sub(e, a), h) / m.dot(h, h), 0, 1)
          , u = this.points.length - 1
          , d = b.clamp((r + f - .1) / u, 0, 1)
          , p = b.clamp((r + f + .1) / u, 0, 1);
        let w = (r + f) / u
          , S = Number.MAX_VALUE;
        const g = 8;
        for (let I = 0; I <= g; I++) {
            const v = b.lerp(I / g, d, p)
              , k = this.getPos(v)
              , _ = m.lengthSqr(m.sub(k, e));
            _ < S && (w = v,
            S = _)
        }
        const y = this.getTangent(w)
          , M = m.length(y);
        if (M > 0) {
            const I = this.getPos(w)
              , v = m.dot(y, m.sub(e, I)) / M
              , k = w + v / (M * u);
            m.lengthSqr(m.sub(e, this.getPos(k))) < m.lengthSqr(m.sub(e, I)) && (w = k)
        }
        return w
    }
    getTfromArcLen(e) {
        e = b.clamp(e, 0, this.totalArcLen);
        let t = 0;
        for (; e > this.arcLens[t]; )
            t++;
        if (t === 0)
            return 0;
        const i = b.delerp(e, this.arcLens[t - 1], this.arcLens[t])
          , r = this.arcLens.length - 1
          , s = (t - 1) / r
          , a = t / r;
        return b.lerp(i, s, a)
    }
    getArcLen(e) {
        e = b.clamp(e, 0, 1);
        const t = this.arcLens.length - 1
          , i = Math.floor(e * t)
          , r = i < t - 1 ? i + 1 : i
          , s = b.fmod(e, 1 / t) / (1 / t);
        return b.lerp(s, this.arcLens[i], this.arcLens[r])
    }
}
class ga {
    spline;
    waterWidth;
    shoreWidth;
    looped;
    center;
    waterPoly;
    shorePoly;
    waterWidths;
    shoreWidths;
    aabb;
    constructor(e, t, i, r, s) {
        this.spline = new Sa(e,i),
        this.waterWidth = t,
        this.shoreWidth = b.clamp(t * .75, 4, 8),
        this.looped = i,
        this.center = m.create(0, 0);
        for (let d = 0; d < this.spline.points.length; d++)
            this.center = m.add(this.center, this.spline.points[d]);
        this.center = m.div(this.center, this.spline.points.length);
        let a = 0;
        for (let d = 0; d < this.spline.points.length; d++) {
            const p = m.length(m.sub(this.spline.points[d], this.center));
            a += p
        }
        a /= this.spline.points.length;
        const o = m.mul(m.sub(s.max, s.min), .5)
          , h = m.add(s.min, o);
        this.waterPoly = [],
        this.shorePoly = [],
        this.waterWidths = [],
        this.shoreWidths = [];
        for (let d = 0; d < e.length; d++) {
            const p = e[d];
            let w = this.spline.getNormal(d / (e.length - 1))
              , S = !1;
            if (!this.looped && (d === 0 || d === e.length - 1)) {
                const z = m.sub(p, h);
                let P = m.create(0, 0)
                  , T = m.create(1, 0);
                if (Math.abs(z.x) > Math.abs(z.y) ? (P = m.create(z.x > 0 ? s.max.x : s.min.x, p.y),
                T = m.create(z.x > 0 ? 1 : -1, 0)) : (P = m.create(p.x, z.y > 0 ? s.max.y : s.min.y),
                T = m.create(0, z.y > 0 ? 1 : -1)),
                m.lengthSqr(m.sub(P, p)) < 1) {
                    let C = m.perp(T);
                    m.dot(w, C) < 0 && (C = m.neg(C)),
                    w = C,
                    S = !0
                }
            }
            let {waterWidth: g} = this;
            if (!this.looped) {
                const z = e.length;
                g = (1 + (2 * (Math.max(1 - d / z, d / z) - .5)) ** 3 * 1.5) * this.waterWidth
            }
            this.waterWidths.push(g);
            let {shoreWidth: y} = this
              , M = null;
            for (let z = 0; z < r.length; z++) {
                const P = r[z]
                  , T = P.spline.getClosestTtoPoint(p)
                  , C = P.spline.getPos(T)
                  , N = m.length(m.sub(C, p));
                N < P.waterWidth * 2 && (y = b.max(y, P.shoreWidth)),
                (d === 0 || d === e.length - 1) && N < 1.5 && !S && (M = P)
            }
            d > 0 && (y = (this.shoreWidths[d - 1] + y) / 2),
            this.shoreWidths.push(y),
            y += g;
            const I = function(P, T, C) {
                const N = m.add(P, T);
                if (!b.pointInsidePolygon(N, C)) {
                    const L = b.rayPolygonIntersect(P, T, C);
                    if (L)
                        return m.mul(T, L)
                }
                return T
            };
            let v, k, _, A;
            if (this.looped) {
                let z = m.sub(p, this.center);
                const P = m.length(z);
                z = P > 1e-4 ? m.div(z, P) : m.create(1, 0);
                const T = b.lerp(b.min(g / a, 1) ** .5, g, (1 - (a - g) / P) * P)
                  , C = b.lerp(b.min(y / a, 1) ** .5, y, (1 - (a - y) / P) * P);
                v = m.add(p, m.mul(z, g)),
                k = m.add(p, m.mul(z, -T)),
                _ = m.add(p, m.mul(z, y)),
                A = m.add(p, m.mul(z, -C))
            } else {
                let z = m.mul(w, g)
                  , P = m.mul(w, -g)
                  , T = m.mul(w, y)
                  , C = m.mul(w, -y);
                M && (z = I(p, z, M.waterPoly),
                P = I(p, P, M.waterPoly),
                T = I(p, T, M.shorePoly),
                C = I(p, C, M.shorePoly)),
                v = m.add(p, z),
                k = m.add(p, P),
                _ = m.add(p, T),
                A = m.add(p, C)
            }
            v = be.clampPosToAabb(v, s),
            k = be.clampPosToAabb(k, s),
            _ = be.clampPosToAabb(_, s),
            A = be.clampPosToAabb(A, s),
            this.waterPoly.splice(d, 0, v),
            this.waterPoly.splice(this.waterPoly.length - d, 0, k),
            this.shorePoly.splice(d, 0, _),
            this.shorePoly.splice(this.shorePoly.length - d, 0, A)
        }
        let f = m.create(Number.MAX_VALUE, Number.MAX_VALUE)
          , u = m.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
        for (let d = 0; d < this.shorePoly.length; d++)
            f = m.minElems(f, this.shorePoly[d]),
            u = m.maxElems(u, this.shorePoly[d]);
        this.aabb = H.createAabb(f, u, 0)
    }
    distanceToShore(e) {
        const t = this.spline.getClosestTtoPoint(e)
          , i = m.length(m.sub(e, this.spline.getPos(t)));
        return b.max(this.waterWidth - i, 0)
    }
    getWaterWidth(e) {
        const t = this.spline.points.length
          , i = b.clamp(Math.floor(e * t), 0, t);
        return this.waterWidths[i]
    }
}
function Lr(l, e, t, i, r) {
    const s = m.create(l.min.x, l.min.y)
      , a = m.create(l.max.x, l.min.y)
      , o = m.create(l.min.x, l.max.y)
      , h = m.create(l.max.x, l.max.y)
      , f = a.x - s.x
      , u = o.y - s.y
      , d = f / (e + 1)
      , p = u / (t + 1)
      , w = [];
    w.push(m.copy(s));
    for (let S = 1; S <= e; ++S)
        w.push(m.create(s.x + d * S, s.y + r(-i, i)));
    w.push(m.copy(a));
    for (let S = 1; S <= t; ++S)
        w.push(m.create(a.x + r(-i, i), a.y + p * S));
    w.push(m.copy(h));
    for (let S = 1; S <= e; ++S)
        w.push(m.create(h.x - d * S, h.y + r(-i, i)));
    w.push(m.copy(o));
    for (let S = 1; S <= t; ++S)
        w.push(m.create(o.x + r(-i, i), o.y - p * S));
    return w
}
function ya(l, e, t, i, r, s) {
    const {shoreVariation: o} = O.map
      , {grassVariation: h} = O.map
      , f = x.seededRand(s)
      , u = m.create(t, t)
      , d = m.create(l - t, e - t)
      , p = m.create(u.x, u.y)
      , w = m.create(d.x, d.y)
      , S = H.createAabb(p, w)
      , g = Lr(S, 64, 64, o, f)
      , y = m.create(l * .5, e * .5)
      , M = g.map(k => {
        const _ = m.normalize(m.sub(y, k))
          , A = f(-2, h)
          , z = i + A;
        return m.add(k, m.mul(_, z))
    }
    )
      , I = H.createAabb(m.create(0, 0), m.create(l, e))
      , v = [];
    for (let k = 0; k < r.length; k++) {
        const _ = r[k]
          , A = new ga(_.points,_.width,_.looped,v,I);
        v.push(A)
    }
    return {
        shore: g,
        grass: M,
        rivers: v
    }
}
function Gi(l, e, t, i, r, s) {
    const a = l;
    return a.dead || !a.collidable || a.isWindow || a.height < i || !x.sameLayer(a.layer, r) || s && r & 2 && a.layer == 0 ? null : H.intersectSegment(a.collider, e, t)
}
function Qi(l, e, t, i, r) {
    const s = dt.intersectSegmentDist(l, e, t, i, 0, r, !1);
    return m.add(e, m.mul(t, s))
}
const dt = {
    intersectSegment(l, e, t, i, r, s, a) {
        const o = m.add(e, m.mul(t, i))
          , h = [];
        for (let f = 0; f < l.length; f++) {
            const u = l[f]
              , d = Gi(u, e, o, r, s, a);
            if (d) {
                const p = m.length(m.sub(d.point, e));
                h.push({
                    id: u.__id,
                    dist: p
                })
            }
        }
        return h.sort( (f, u) => f.dist - u.dist),
        h.length > 0 ? h[0] : null
    },
    intersectSegmentDist(l, e, t, i, r, s, a) {
        let o = i;
        const h = m.add(e, m.mul(t, i));
        for (let f = 0; f < l.length; f++) {
            const u = l[f]
              , d = Gi(u, e, h, r, s, a);
            d && (o = b.min(o, m.length(m.sub(d.point, e))))
        }
        return o
    },
    scanCollider(l, e, t, i, r, s, a, o, h, f) {
        const u = H.intersectCircle(l, t, a);
        if (!u)
            return null;
        if (u.pen >= a)
            return {
                dist: 0
            };
        const d = m.perp(u.dir)
          , p = Qi(e, t, m.neg(d), .5 * s, i)
          , w = Qi(e, t, d, .5 * s, i);
        let S = m.sub(w, p);
        const g = m.length(S);
        S = g > 1e-4 ? m.div(S, g) : m.create(1, 0);
        const y = [];
        for (let I = 0; I < o; I++) {
            const v = I / b.max(o - 1, 1);
            y.push(m.add(p, m.mul(S, g * v)))
        }
        const M = r;
        for (let I = 0; I < y.length; I++) {
            const v = y[I]
              , k = H.intersectCircle(l, v, a);
            if (!k)
                continue;
            const _ = m.neg(k.dir)
              , A = dt.intersectSegmentDist(e, v, _, a, M, i, !0)
              , z = H.intersectSegment(l, v, m.add(v, m.mul(_, a)))
              , P = z ? m.length(m.sub(z.point, v)) : 0
              , T = z && P <= A;
            if (h) {
                const C = T ? 65280 : 16711680;
                f?.addRay(v, _, a, C)
            }
            if (T)
                return {
                    dist: P
                }
        }
        return null
    }
};
function xa(l, e, t) {
    const i = e - l
      , r = i * t;
    return Math.abs(r) < .001 ? i : r
}
class za {
    __id;
    __type;
    active;
    sprites = [];
    particleEmitters = [];
    soundEmitters = [];
    isNew;
    residue;
    ceilingDead;
    ceilingDamaged;
    playedCeilingDeadFx;
    playedSolvedPuzzleFx;
    hasPuzzle;
    puzzleErrSeqModified;
    puzzleErrSeq;
    puzzleSolved;
    soundEmitterTicker;
    type;
    pos;
    ori;
    rot;
    scale;
    layer;
    occupied;
    imgs = [];
    zIdx;
    bounds;
    ceiling;
    surfaces;
    vusF() {
        this.isNew = !1,
        this.residue = null,
        this.ceilingDead = !1,
        this.ceilingDamaged = !1,
        this.playedCeilingDeadFx = !1,
        this.playedSolvedPuzzleFx = !1,
        this.hasPuzzle = !1,
        this.puzzleErrSeqModified = !1,
        this.puzzleErrSeq = 0,
        this.puzzleSolved = !1,
        this.soundEmitterTicker = 0
    }
    Obb() {
        for (let e = 0; e < this.sprites.length; e++) {
            const t = this.sprites[e];
            t.active = !1,
            t.sprite.visible = !1,
            t.sprite.parent?.removeChild(t.sprite),
            t.sprite.removeChildren()
        }
        for (let e = 0; e < this.particleEmitters.length; e++)
            this.particleEmitters[e].stop();
        this.particleEmitters = [];
        for (let e = 0; e < this.soundEmitters.length; e++)
            this.soundEmitters[e].instance?.stop();
        this.soundEmitters = []
    }
    allocSprite() {
        for (let t = 0; t < this.sprites.length; t++) {
            const i = this.sprites[t];
            if (!i.active)
                return i.active = !0,
                i.sprite
        }
        const e = new ae;
        return e.anchor.set(.5, .5),
        this.sprites.push({
            active: !0,
            sprite: e
        }),
        e
    }
    HCidV(e, t, i, r) {
        t && (this.type = e.type,
        this.pos = m.copy(e.pos),
        this.ori = e.ori,
        this.rot = b.oriToRad(e.ori),
        this.scale = 1,
        this.layer = e.layer),
        this.ceilingDead = e.ceilingDead,
        this.ceilingDamaged = e.ceilingDamaged,
        this.occupied = e.occupied,
        this.hasPuzzle = e.hasPuzzle,
        this.hasPuzzle && (this.puzzleErrSeqModified = e.puzzleErrSeq != this.puzzleErrSeq,
        this.puzzleSolved = e.puzzleSolved,
        this.puzzleErrSeq = e.puzzleErrSeq);
        const s = he[this.type];
        if (i) {
            this.isNew = !0,
            this.playedCeilingDeadFx = s.ceiling.destroy !== void 0 && r.map.deadCeilingIds.includes(this.__id),
            this.playedSolvedPuzzleFx = this.hasPuzzle && r.map.solvedPuzzleIds.includes(this.__id);
            const a = u => {
                const d = u.pos || m.create(0, 0)
                  , p = b.oriToRad(u.rot || 0)
                  , w = this.allocSprite();
                u.sprite && u.sprite != "none" ? w.texture = J.from(u.sprite) : w.texture = J.EMPTY,
                w.tint = u.tint;
                const S = r.map.getMapDef().biome.valueAdjust;
                return S < 1 && (w.tint = x.adjustValue(w.tint, S)),
                w.posOffset = m.rotate(d, this.rot),
                w.rotOffset = p,
                w.imgAlpha = u.alpha,
                w.alpha = w.imgAlpha,
                w.defScale = u.scale,
                w.mirrorY = !!u.mirrorY,
                w.mirrorX = !!u.mirrorX,
                w.visible = !0,
                w
            }
            ;
            this.bounds = H.transform(Qe.getBoundingCollider(this.type), this.pos, this.rot, this.scale),
            this.zIdx = s.zIdx || 0,
            this.surfaces = [];
            for (let u = 0; u < s.floor.surfaces.length; u++) {
                const d = s.floor.surfaces[u]
                  , p = {
                    type: d.type,
                    data: d.data || {},
                    colliders: []
                };
                for (let w = 0; w < d.collision.length; w++)
                    p.colliders.push(H.transform(d.collision[w], this.pos, this.rot, this.scale));
                this.surfaces.push(p)
            }
            const o = Object.assign({
                dist: 5.5,
                width: 2.75,
                linger: 0,
                fadeRate: 12
            }, s.ceiling.vision);
            this.ceiling = {
                zoomRegions: [],
                vision: o,
                visionTicker: 0,
                fadeAlpha: 1
            };
            for (let u = 0; u < s.ceiling.zoomRegions.length; u++) {
                const d = s.ceiling.zoomRegions[u];
                this.ceiling.zoomRegions?.push({
                    zoomIn: d.zoomIn ? H.transform(d.zoomIn, this.pos, this.rot, this.scale) : null,
                    zoomOut: d.zoomOut ? H.transform(d.zoomOut, this.pos, this.rot, this.scale) : null
                })
            }
            this.imgs = [];
            for (let u = 0; u < s.floor.imgs.length; u++)
                this.imgs.push({
                    sprite: a(s.floor.imgs[u]),
                    isCeiling: !1,
                    zOrd: this.zIdx,
                    zIdx: this.__id * 100 + u
                });
            for (let u = 0; u < s.ceiling.imgs.length; u++) {
                const d = s.ceiling.imgs[u];
                this.imgs.push({
                    sprite: a(d),
                    isCeiling: !0,
                    removeOnDamaged: !!d.removeOnDamaged,
                    zOrd: 750 - this.zIdx,
                    zIdx: this.__id * 100 + u
                })
            }
            const h = s.occupiedEmitters || [];
            for (let u = 0; u < h.length; u++) {
                const d = h[u]
                  , p = d.rot !== void 0 ? d.rot : 0
                  , w = this.rot + p;
                let S = m.add(this.pos, m.rotate(d.pos, w));
                const g = d.dir || m.create(1, 0);
                let y = m.rotate(g, w)
                  , M = d.scale
                  , I = null;
                if (d.parentToCeiling) {
                    let k = -1;
                    for (let _ = 0; _ < this.imgs.length; _++)
                        this.imgs[_].isCeiling && (k = _);
                    if (k >= 0) {
                        const _ = this.imgs[k];
                        I = _.sprite,
                        S = m.mul(d.pos, 32),
                        S.y *= -1,
                        y = m.rotate(m.create(1, 0), d.rot),
                        M = 1 / _.sprite.defScale
                    }
                }
                const v = r.particleBarn.addEmitter(d.type, {
                    pos: S,
                    dir: y,
                    scale: M,
                    layer: d.layer,
                    parent: I
                });
                this.particleEmitters.push(v)
            }
            const f = s.soundEmitters || [];
            for (let u = 0; u < f.length; u++) {
                const d = f[u]
                  , p = m.add(this.pos, m.rotate(d.pos, this.rot));
                this.soundEmitters.push({
                    instance: null,
                    sound: d.sound,
                    channel: d.channel,
                    pos: p,
                    range: d.range,
                    falloff: d.falloff,
                    volume: d.volume
                })
            }
        }
    }
    nYcwKO(e, t, i, r, s, a, o, h, f) {
        if (this.hasPuzzle) {
            const S = he[this.type];
            if (this.puzzleErrSeqModified && (this.puzzleErrSeqModified = !1,
            !this.isNew)) {
                let g = this
                  , y = m.length(m.sub(a.HiVuim, g.pos));
                const M = t.oymOX.yQIfil();
                for (let I = 0; I < M.length; I++) {
                    const v = M[I];
                    if (v.active && v.isPuzzlePiece && v.parentBuildingId == this.__id) {
                        const k = m.length(m.sub(a.HiVuim, v.pos));
                        k < y && (g = v,
                        y = k)
                    }
                }
                r.playSound(S.puzzle?.sound.fail, {
                    channel: "sfx",
                    soundPos: g.pos,
                    layer: g.layer,
                    filter: "muffled"
                })
            }
            this.puzzleSolved && !this.playedSolvedPuzzleFx && (t.solvedPuzzleIds.push(this.__id),
            this.playedSolvedPuzzleFx = !0,
            !this.isNew && S.puzzle?.sound.complete != "none" && r.playSound(S.puzzle?.sound.complete, {
                channel: "sfx",
                soundPos: this.pos,
                layer: this.layer,
                filter: "muffled"
            }))
        }
        if (this.ceilingDead && !this.playedCeilingDeadFx && (t.deadCeilingIds.push(this.__id),
        this.playedCeilingDeadFx = !0,
        this.isNew || this.destroyCeilingFx(i, r)),
        this.isNew = !1,
        this.ceilingDead && !this.residue) {
            const S = he[this.type];
            if (S.ceiling.destroy?.residue) {
                const g = this.allocSprite();
                g.texture = J.from(S.ceiling.destroy.residue),
                g.position.set(0, 0),
                g.scale.set(1, 1),
                g.rotation = 0,
                g.tint = 16777215,
                g.visible = !0,
                this.imgs[0].sprite.addChild(g),
                this.residue = g
            }
        }
        this.ceiling.visionTicker -= e;
        const u = this.ceiling.vision;
        let d = !1;
        for (let S = 0; S < this.ceiling.zoomRegions.length; S++) {
            const g = this.ceiling.zoomRegions[S].zoomIn;
            if (g && (this.layer == a.layer || a.layer & 2) && dt.scanCollider(g, t.oymOX.yQIfil(), a.HiVuim, a.layer, .5, u.width * 2, u.dist, 5, f.render.buildings?.ceiling, pi)) {
                d = !0;
                break
            }
        }
        this.ceilingDead && (d = !0),
        d && (this.ceiling.visionTicker = u.linger + 1e-4),
        a.noCeilingRevealTicker > 0 && !this.ceilingDead && (this.ceiling.visionTicker = 0);
        const p = this.ceiling.visionTicker > 0
          , w = xa(this.ceiling.fadeAlpha, p ? 0 : 1, e * (p ? 12 : u?.fadeRate));
        this.ceiling.fadeAlpha += w,
        d && a.noCeilingRevealTicker <= 0 && a.layer & 2 && !x.sameLayer(a.layer, this.layer) && (this.ceiling.fadeAlpha = 0);
        for (let S = 0; S < this.particleEmitters.length; S++)
            this.particleEmitters[S].enabled = this.occupied;
        if (this.soundEmitterTicker += e,
        this.soundEmitterTicker > .1) {
            this.soundEmitterTicker = 0;
            for (let S = 0; S < this.soundEmitters.length; S++) {
                const g = this.soundEmitters[S];
                if (!g.instance && r.isSoundLoaded(g.sound, g.channel) && (g.instance = r.playSound(g.sound, {
                    channel: g.channel,
                    loop: !0,
                    forceStart: !0,
                    startSilent: !0
                })),
                g.instance) {
                    const y = m.sub(h.HiVuim, g.pos)
                      , M = m.length(y)
                      , I = b.remap(M, g.range.min, g.range.max, 1, 0)
                      , v = Math.pow(I, g.falloff)
                      , k = b.lerp(this.ceiling.fadeAlpha, 1, .25);
                    let _ = r.baseVolume * r.getTypeVolume("sound") * g.volume * v * k;
                    x.sameAudioLayer(this.layer, a.layer) || (_ = 0),
                    _ < .003 && (_ = 0),
                    g.instance.volume = _
                }
            }
        }
        for (let S = 0; S < this.imgs.length; S++) {
            const g = this.imgs[S]
              , y = g.isCeiling ? this.ceiling.fadeAlpha : 1;
            this.positionSprite(g.sprite, y, h),
            g.removeOnDamaged && this.ceilingDamaged && (g.sprite.visible = !this.ceilingDamaged);
            let M = this.layer;
            g.isCeiling && (this.layer == a.layer || a.layer & 2 && this.layer == 1) && (M |= 2),
            o.addPIXIObj(g.sprite, M, g.zOrd, g.zIdx)
        }
    }
    isInsideCeiling(e) {
        for (let t = 0; t < this.ceiling.zoomRegions.length; t++) {
            const i = this.ceiling.zoomRegions[t].zoomIn;
            if (i && H.intersect(i, e))
                return !0
        }
        return !1
    }
    getDistanceToBuilding(e, t) {
        let i = t;
        for (let r = 0; r < this.ceiling.zoomRegions.length; r++) {
            const s = this.ceiling.zoomRegions[r].zoomIn;
            if (s) {
                const a = H.intersectCircle(s, e, t);
                a && (i = b.clamp(t - a.pen, 0, i))
            }
        }
        return i
    }
    destroyCeilingFx(e, t) {
        const i = he[this.type].ceiling.destroy
          , r = this.surfaces[0];
        for (let s = 0; s < r.colliders.length; s++) {
            const a = H.toAabb(r.colliders[s]);
            for (let o = 0; o < i.particleCount; o++) {
                const h = m.create(x.random(a.min.x, a.max.x), x.random(a.min.y, a.max.y))
                  , f = m.mul(m.randomUnit(), x.random(0, 15));
                e.addParticle(i.particle, this.layer, h, f)
            }
            break
        }
        t.playSound(i.sound || "ceiling_break_01", {
            channel: "sfx",
            soundPos: this.pos
        })
    }
    positionSprite(e, t, i) {
        const r = i.SlQA(m.add(this.pos, e.posOffset))
          , s = i.zHRVv(this.scale * e.defScale);
        e.position.set(r.x, r.y),
        e.scale.set(s, s),
        e.mirrorY && (e.scale.y *= -1),
        e.mirrorX && (e.scale.x *= -1),
        e.rotation = -this.rot + e.rotOffset,
        e.alpha = e.imgAlpha * t
    }
    render(e, t, i) {}
}
class Ne {
    wzvBpI = [];
    SotSa = 0;
    Bdkhkg;
    constructor(e) {
        this.Bdkhkg = {
            type: e
        },
        Ut(e !== void 0)
    }
    KmVg() {
        let e = null;
        for (let t = 0; t < this.wzvBpI.length; t++)
            if (!this.wzvBpI[t].active) {
                e = this.wzvBpI[t];
                break
            }
        return e || (e = new this.Bdkhkg.type,
        this.wzvBpI.push(e)),
        e.active = !0,
        e.vusF(),
        this.SotSa++,
        e
    }
    Obb(e) {
        if (e.Obb(),
        e.active = !1,
        this.SotSa--,
        this.wzvBpI.length > 128 && this.SotSa < this.wzvBpI.length / 2) {
            const t = [];
            for (let i = 0; i < this.wzvBpI.length; i++)
                this.wzvBpI[i].active && t.push(this.wzvBpI[i]);
            this.wzvBpI = t
        }
    }
    yQIfil() {
        return this.wzvBpI
    }
}
class Ar {
    sPI = {};
    Mcdd = {};
    pNnz = 0;
    WUYR(e, t) {
        this.Mcdd[e] = t
    }
    xPPj(e) {
        return this.sPI[e]
    }
    ELy(e, t) {
        const i = this.xPPj(e);
        if (!i) {
            const r = {
                id: e,
                ids: Object.keys(this.sPI),
                stream: t._view._view
            };
            return xe.logError(`getTypeById${JSON.stringify(r)}`),
            xe.storeGeneric("objectPoolErr", "getTypeById"),
            ye.Invalid
        }
        return i.__type
    }
    BsiUaJ(e, t, i, r) {
        let s = this.xPPj(t)
          , a = !1;
        return s === void 0 && (s = this.Mcdd[e].KmVg(),
        s.__id = t,
        s.__type = e,
        this.sPI[t] = s,
        this.pNnz++,
        a = !0),
        s.HCidV(i, !0, a, r),
        s
    }
    QNo(e, t, i) {
        const r = this.xPPj(e);
        r ? r.HCidV(t, !1, !1, i) : (xe.storeGeneric("objectPoolErr", "updateObjPart"),
        console.error("updateObjPart, missing object", e))
    }
    ezjqM(e) {
        const t = this.xPPj(e);
        t === void 0 ? (console.error("deleteObj, missing object", e),
        xe.storeGeneric("objectPoolErr", "deleteObj")) : (this.Mcdd[t.__type].Obb(t),
        delete this.sPI[e])
    }
}
class ba {
    __id;
    __type;
    active;
    sprite = new ae;
    isNew;
    smokeEmitter;
    img;
    type;
    layer;
    healthT;
    dead;
    isSkin;
    rot;
    scale;
    pos;
    imgMirrorX;
    imgMirrorY;
    exploded;
    collidable;
    destructible;
    height;
    isWall;
    isWindow;
    isBush;
    isDoor;
    isButton;
    isPuzzlePiece;
    parentBuildingId;
    button;
    door;
    imgScale;
    explodeParticle;
    skinPlayerId;
    visualPosOld;
    posInterpTicker;
    collider;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    vusF() {
        this.isNew = !1,
        this.smokeEmitter = null,
        this.sprite.visible = !1,
        this.img = "",
        this.visualPosOld = m.create(0, 0)
    }
    Obb() {
        this.sprite.visible = !1,
        this.sprite.parent?.removeChild(this.sprite),
        this.door?.casingSprite && (this.door.casingSprite.destroy(),
        this.door.casingSprite = null),
        this.smokeEmitter && (this.smokeEmitter.stop(),
        this.smokeEmitter = null)
    }
    HCidV(e, t, i, r) {
        t && (this.type = e.type,
        this.layer = e.layer,
        this.healthT = e.healthT,
        this.dead = e.dead,
        this.isSkin = e.isSkin,
        this.isSkin && (this.skinPlayerId = e.skinPlayerId));
        const s = he[this.type];
        if (m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(i ? e.pos : this.pos),
        this.posInterpTicker = 0),
        this.pos = m.copy(e.pos),
        this.rot = b.oriToRad(e.ori),
        this.scale = e.scale,
        this.imgScale = s.img.scale,
        this.imgMirrorY = s.img.mirrorY,
        this.imgMirrorX = s.img.mirrorX,
        this.collider = H.transform(s.collision, this.pos, this.rot, this.scale),
        i) {
            if (this.isNew = !0,
            this.exploded = r.map.deadObstacleIds.includes(this.__id),
            this.explodeParticle = s.explodeParticle,
            this.collidable = s.collidable && !this.isSkin,
            this.destructible = s.destructible,
            this.height = s.height,
            this.isWall = !!s.isWall,
            this.isWindow = !!s.isWindow,
            this.isBush = !!s.isBush,
            this.isDoor = s.door !== void 0,
            this.isDoor) {
                this.door = {
                    openOneWay: s.door?.openOneWay,
                    closedPos: m.copy(e.pos),
                    autoOpen: s.door?.autoOpen,
                    interactionRad: s.door?.interactionRad,
                    interpSpeed: s.door?.openSpeed,
                    interpPos: m.copy(e.pos),
                    interpRot: b.oriToRad(e.ori),
                    seq: e.door?.seq,
                    seqOld: e.door?.seq,
                    open: e.door?.open,
                    wasOpen: e.door?.open,
                    locked: e.door?.locked,
                    casingSprite: null
                };
                const f = s.door?.casingImg;
                if (f !== void 0) {
                    let u = f.pos || m.create(0, 0);
                    u = m.rotate(u, this.rot + Math.PI * .5);
                    const d = new ae;
                    d.texture = J.from(f.sprite),
                    d.anchor.set(.5, .5),
                    d.posOffset = u,
                    d.imgScale = f.scale,
                    d.tint = f.tint,
                    d.alpha = f.alpha,
                    d.visible = !0,
                    this.door.casingSprite = d
                }
            }
            this.isButton = s.button !== void 0,
            this.isButton && (this.button = {
                interactionRad: s.button?.interactionRad,
                interactionText: s.button?.interactionText || "game-use",
                seq: e.button?.seq,
                seqOld: e.button?.seq
            }),
            this.isPuzzlePiece = e.isPuzzlePiece,
            this.parentBuildingId = this.isPuzzlePiece ? e.parentBuildingId : 0
        }
        if (this.isDoor && t) {
            this.door.canUse = e.door?.canUse,
            this.door.open = e.door?.open,
            this.door.seq = e.door?.seq;
            const f = m.rotate(m.create(s.door?.slideOffset, 0), this.rot + Math.PI * .5);
            this.door.closedPos = e.door?.open ? m.add(e.pos, f) : m.copy(e.pos)
        }
        if (this.isButton && t && (this.button.onOff = e.button?.onOff,
        this.button.canUse = e.button?.canUse,
        this.button.seq = e.button?.seq),
        s.explosion !== void 0 && !this.smokeEmitter && e.healthT < .5 && !e.dead) {
            const f = m.normalize(m.create(1, 1));
            this.smokeEmitter = r.particleBarn.addEmitter("smoke_barrel", {
                pos: this.pos,
                dir: f,
                layer: this.layer
            })
        }
        let a = !1
          , o = this.dead ? s.img.residue : s.img.sprite;
        if (this.isButton && this.button.onOff && !this.dead && s.button?.useImg ? o = s.button.useImg : this.isButton && !this.button.canUse && s.button?.offImg && (o = s.button.offImg),
        o != this.img) {
            let f = m.create(.5, .5);
            this.isDoor && (f = s.door?.spriteAnchor);
            const u = o !== void 0;
            u || this.sprite.parent?.removeChild(this.sprite),
            u && (this.sprite.texture = o == "none" || !o ? J.EMPTY : J.from(o),
            this.sprite.anchor.set(f.x, f.y),
            this.sprite.tint = s.img.tint,
            this.sprite.imgAlpha = this.dead ? .75 : s.img.alpha,
            this.sprite.zOrd = s.img.zIdx,
            this.sprite.zIdx = Math.floor(this.scale * 1e3) * 65535 + this.__id,
            this.sprite.alpha = this.sprite.imgAlpha,
            a = !0),
            this.sprite.visible = u,
            this.img = o
        }
        const h = r.map.getMapDef().biome.valueAdjust;
        a && h < 1 && (this.sprite.tint = x.adjustValue(this.sprite.tint, h))
    }
    getInteraction() {
        return this.isButton && this.button.canUse ? {
            rad: this.button.interactionRad,
            action: this.button.interactionText,
            object: `game-${this.type}`
        } : this.isDoor && this.door.canUse && !this.door.autoOpen ? {
            rad: this.door.interactionRad,
            action: this.door.open ? "game-close-door" : "game-open-door",
            object: ""
        } : null
    }
    update(e, t, i, r, s, a, o) {
        if (this.isButton) {
            const h = this.button;
            if (h.seq != h.seqOld) {
                const f = he[this.type];
                if (f.button?.useParticle) {
                    const d = H.toAabb(this.collider)
                      , p = m.mul(m.sub(d.max, d.min), .5)
                      , w = m.add(d.min, p)
                      , S = m.mul(m.randomUnit(), x.random(5, 15));
                    r.addParticle(f.button.useParticle, this.layer, w, S)
                }
                const u = this.button.onOff ? f.button?.sound.on : f.button?.sound.off;
                u && s.playSound(u, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            h.seqOld = h.seq
        }
        if (this.isDoor) {
            const h = this.door
              , f = h.interpSpeed
              , u = m.sub(this.pos, h.interpPos)
              , d = m.length(u);
            let p = f * e;
            d < p && (p = d);
            const w = d > 1e-4 ? m.div(u, d) : m.create(1, 0);
            h.interpPos = m.add(h.interpPos, m.mul(w, p));
            const S = Math.PI * h.interpSpeed
              , g = b.angleDiff(h.interpRot, this.rot);
            let y = b.sign(g) * S * e;
            if (Math.abs(g) < Math.abs(y) && (y = g),
            h.interpRot += y,
            h.seq != h.seqOld) {
                const I = he[this.type].door?.sound.change || "";
                I != "" && s.playSound(I, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                }),
                h.seqOld = h.seq
            }
            if (h.open != h.wasOpen) {
                const M = he[this.type]
                  , I = h.open ? M.door?.sound.open : M.door?.sound.close;
                s.playSound(I, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                }),
                h.wasOpen = h.open
            }
        }
        if (this.dead && !this.exploded && (t.deadObstacleIds.push(this.__id),
        this.exploded = !0,
        this.smokeEmitter && (this.smokeEmitter.stop(),
        this.smokeEmitter = null),
        !this.isNew)) {
            const h = he[this.type]
              , f = H.toAabb(this.collider)
              , u = m.mul(m.sub(f.max, f.min), .5)
              , d = m.add(f.min, u)
              , p = Math.floor(x.random(5, 11));
            for (let w = 0; w < p; w++) {
                const S = m.mul(m.randomUnit(), x.random(5, 15))
                  , g = Array.isArray(this.explodeParticle) ? this.explodeParticle[Math.floor(Math.random() * this.explodeParticle.length)] : this.explodeParticle;
                r.addParticle(g, this.layer, d, S)
            }
            s.playSound(h.sound?.explode, {
                channel: "sfx",
                soundPos: d,
                layer: this.layer,
                filter: "muffled"
            })
        }
        if (this.smokeEmitter) {
            const h = this.isSkin ? .3 : .5;
            this.smokeEmitter.pos = m.copy(this.pos),
            this.smokeEmitter.enabled = !this.dead && this.healthT < h
        }
        if (this.sprite.visible && this.img) {
            let h = this.dead ? 5 : this.sprite.zOrd
              , f = this.sprite.zIdx
              , u = this.layer;
            if (!this.dead && h >= 50 && this.layer == 0 && a.layer == 0 && (h += 100,
            u |= 2),
            !this.dead && this.isSkin) {
                const d = i.getPlayerById(this.skinPlayerId);
                d && (h = b.max(b.max(h, d.renderZOrd), 21),
                d.renderLayer != 0 && (u = d.renderLayer,
                h = d.renderZOrd),
                f = d.renderZIdx + 262144)
            }
            o.addPIXIObj(this.sprite, u, h, f),
            this.isDoor && this.door.casingSprite && o.addPIXIObj(this.door.casingSprite, u, h + 1, f)
        }
        this.isNew = !1
    }
    render(e, t, i, r) {
        let s = this.isDoor ? this.door.interpPos : this.pos;
        if (this.isSkin && t.bAEQ) {
            this.posInterpTicker += e;
            const u = b.clamp(this.posInterpTicker / t.NRB, 0, 1);
            s = m.lerp(u, this.visualPosOld, this.pos)
        }
        const a = this.isDoor ? this.door.interpRot : this.rot
          , o = this.scale
          , h = t.SlQA(s)
          , f = t.zHRVv(o * this.imgScale);
        if (this.sprite.position.set(h.x, h.y),
        this.sprite.scale.set(f, f),
        this.imgMirrorY && (this.sprite.scale.y *= -1),
        this.imgMirrorX && (this.sprite.scale.x *= -1),
        this.sprite.rotation = -a,
        this.isDoor && this.door?.casingSprite) {
            const u = t.SlQA(m.add(this.door.closedPos, this.door.casingSprite.posOffset))
              , d = t.zHRVv(o * this.door.casingSprite.imgScale);
            this.door.casingSprite.position.set(u.x, u.y),
            this.door.casingSprite.scale.set(d, d),
            this.door.casingSprite.rotation = -a,
            this.door.casingSprite.visible = !this.dead
        }
    }
}
class ka {
    __id;
    __type;
    active;
    soundTransitionT;
    soundEnabledT;
    type;
    layer;
    pos;
    rot;
    scale;
    interiorSoundAlt;
    interiorSoundEnabled;
    aabb;
    layers;
    stairs;
    mask;
    vusF() {
        this.soundTransitionT = 0
    }
    Obb() {}
    HCidV(e, t, i, r) {
        if (t) {
            this.type = e.type,
            this.layer = 0,
            this.pos = m.copy(e.pos),
            this.rot = b.oriToRad(e.ori),
            this.scale = 1,
            this.interiorSoundAlt = e.interiorSoundAlt,
            this.interiorSoundEnabled = e.interiorSoundEnabled,
            i && (this.soundTransitionT = this.interiorSoundAlt ? 1 : 0,
            this.soundEnabledT = this.interiorSoundEnabled ? 1 : 0),
            this.aabb = H.transform(Qe.getBoundingCollider(this.type), this.pos, this.rot, this.scale);
            const s = he[this.type];
            this.layers = [];
            for (let a = 0; a < s.layers.length; a++) {
                const o = s.layers[a]
                  , h = e.layerObjIds[a]
                  , f = o?.inheritOri === void 0 || o.inheritOri
                  , u = o.underground !== void 0 ? o.underground : a == 1
                  , d = m.add(this.pos, o.pos)
                  , p = b.oriToRad(f ? e.ori + o.ori : o.ori)
                  , w = H.transform(Qe.getBoundingCollider(o.type), d, p, 1);
                this.layers.push({
                    objId: h,
                    collision: w,
                    underground: u
                })
            }
            this.stairs = [];
            for (let a = 0; a < s.stairs.length; a++) {
                const o = s.stairs[a]
                  , h = H.transform(o.collision, this.pos, this.rot, this.scale)
                  , f = m.rotate(o.downDir, this.rot)
                  , u = be.splitAabb(h, f);
                this.stairs.push({
                    collision: h,
                    center: m.add(h.min, m.mul(m.sub(h.max, h.min), .5)),
                    downDir: f,
                    downAabb: H.createAabb(u[0].min, u[0].max),
                    upAabb: H.createAabb(u[1].min, u[1].max),
                    noCeilingReveal: !!o.noCeilingReveal,
                    lootOnly: !!o.lootOnly
                })
            }
            this.mask = [];
            for (let a = 0; a < s.mask.length; a++)
                this.mask.push(H.transform(s.mask[a], this.pos, this.rot, this.scale));
            r.renderer.layerMaskDirty = !0
        }
    }
    update(e, t, i, r) {
        he[this.type].interiorSound && this.updateInteriorSounds(e, t, i, r)
    }
    updateInteriorSounds(e, t, i, r) {
        const s = he[this.type];
        H.createCircle(i.HiVuim, .001),
        t.qbU.yQIfil();
        const a = this.layers.length > 0 ? t.getBuildingById(this.layers[0].objId) : null
          , o = this.layers.length > 1 ? t.getBuildingById(this.layers[1].objId) : null
          , h = s.interiorSound?.outsideMaxDist !== void 0 ? s.interiorSound.outsideMaxDist : 10
          , f = s.interiorSound?.outsideVolume !== void 0 ? s.interiorSound.outsideVolume : 0
          , u = s.interiorSound?.undergroundVolume !== void 0 ? s.interiorSound.undergroundVolume : 1;
        let d = 0
          , p = 0;
        if (i.layer != 1) {
            if (a) {
                const I = a.getDistanceToBuilding(i.HiVuim, h)
                  , v = b.remap(I, h, 0, 0, 1)
                  , k = i.layer & 2
                  , _ = a.ceiling.fadeAlpha;
                d = v * (1 - _),
                p = v * _ * (k ? u : f)
            }
        } else if (o) {
            const I = o.getDistanceToBuilding(i.HiVuim, h)
              , v = b.remap(I, h, 0, 0, 1);
            d = 0,
            p = v * u
        }
        const w = s.interiorSound?.transitionTime !== void 0 ? s.interiorSound.transitionTime : 1;
        this.interiorSoundAlt && (this.soundTransitionT = b.clamp(this.soundTransitionT + e / w, 0, 1));
        const S = Math.abs(this.soundTransitionT - .5) * 2;
        this.interiorSoundEnabled || (this.soundEnabledT = b.clamp(this.soundEnabledT - e * .5, 0, 1));
        const g = this.soundTransitionT > .5 ? s.interiorSound?.soundAlt : s.interiorSound?.sound
          , y = r.getTrack("interior_0");
        y.sound = g,
        y.filter = "",
        y.weight = g ? d * S * this.soundEnabledT : 0;
        const M = r.getTrack("interior_1");
        M.sound = g,
        M.filter = s.interiorSound?.filter,
        M.weight = g ? p * S * this.soundEnabledT : 0
    }
    render(e, t, i) {}
    insideStairs(e) {
        for (let t = 0; t < this.stairs.length; t++)
            if (H.intersect(this.stairs[t]?.collision, e))
                return !0;
        return !1
    }
    insideMask(e) {
        for (let t = 0; t < this.mask.length; t++)
            if (H.intersect(this.mask[t], e))
                return !0;
        return !1
    }
}
function mt(l, e, t) {
    l.moveTo(e.x, e.y),
    l.lineTo(t.x, t.y)
}
function et(l, e) {
    let t = e[0];
    l.moveTo(t.x, t.y);
    for (let i = 1; i < e.length; ++i)
        t = e[i],
        l.lineTo(t.x, t.y);
    l.closePath()
}
function $i(l, e, t) {
    const i = e.max.x - e.min.x
      , r = e.max.y - e.min.y
      , s = b.max(e.offsetDist, .001)
      , a = e.roughness
      , o = Math.round(i * a / s)
      , h = Math.round(r * a / s)
      , f = x.seededRand(t);
    et(l, Lr(e, o, h, s, f))
}
class Er {
    constructor(e) {
        this.decalBarn = e
    }
    display = {
        ground: new Me
    };
    mapName = "";
    mapDef = {};
    factionMode = !1;
    perkMode = !1;
    turkeyMode = !1;
    seed = 0;
    width = 0;
    height = 0;
    mapData = {
        places: [],
        objects: [],
        groundPatches: []
    };
    mapLoaded = !1;
    mapTexture = null;
    oymOX = new Ne(ba);
    qbU = new Ne(za);
    SopFaJ = new Ne(ka);
    deadObstacleIds = [];
    deadCeilingIds = [];
    solvedPuzzleIds = [];
    lootDropSfxIds = [];
    terrain = null;
    cameraEmitter = null;
    Obb() {
        const e = this.qbU.yQIfil();
        for (let t = 0; t < e.length; t++)
            e[t].Obb();
        this.mapTexture?.destroy(!0),
        this.display.ground.destroy({
            children: !0
        }),
        this.cameraEmitter?.stop(),
        this.cameraEmitter = null
    }
    resize(e, t) {
        this.renderMap(e, t)
    }
    loadMap(e, t, i, r) {
        this.mapName = e.mapName;
        const s = Nt[this.mapName];
        if (!s)
            throw new Error(`Failed loading mapDef ${this.mapName}`);
        this.mapDef = x.cloneDeep(s),
        this.factionMode = !!this.mapDef.gameMode.factionMode,
        this.perkMode = !!this.mapDef.gameMode.perkMode,
        this.turkeyMode = !!this.mapDef.gameMode.turkeyMode,
        this.seed = e.seed,
        this.width = e.width,
        this.height = e.height,
        this.terrain = ya(this.width, this.height, e.shoreInset, e.grassInset, e.rivers, this.seed),
        this.mapData = {
            places: e.places,
            objects: e.objects,
            groundPatches: e.groundPatches
        },
        this.mapLoaded = !0;
        const a = this.mapDef.biome.particles.camera;
        if (a) {
            const o = m.normalize(m.create(1, -1));
            this.cameraEmitter?.stop(),
            this.cameraEmitter = r.addEmitter(a, {
                pos: m.create(0, 0),
                dir: o,
                layer: 99999
            })
        }
        this.display.ground.clear(),
        this.renderTerrain(this.display.ground, 2 / t.hPMoEE, i, !1)
    }
    getMapDef() {
        if (!this.mapLoaded)
            throw new Error("Map not loaded!");
        return this.mapDef
    }
    getMapTexture() {
        return this.mapTexture
    }
    nYcwKO(e, t, i, r, s, a, o, h, f, u) {
        const d = this.oymOX.yQIfil();
        for (let w = 0; w < d.length; w++) {
            const S = d[w];
            S.active && (S.update(e, this, i, r, s, t, o),
            S.render(e, h, u, t.layer))
        }
        const p = this.qbU.yQIfil();
        for (let w = 0; w < p.length; w++) {
            const S = p[w];
            S.active && (S.nYcwKO(e, this, r, s, a, t, o, h, u),
            S.render(h, u, t.layer))
        }
        for (let w = this.SopFaJ.yQIfil(), S = 0; S < w.length; S++) {
            const g = w[S];
            g.active && (g.update(e, this, t, a),
            g.render(h, u, t.layer))
        }
        if (this.cameraEmitter) {
            this.cameraEmitter.pos = m.copy(h.HiVuim),
            this.cameraEmitter.enabled = !0;
            const w = 120
              , S = t.poQV() * 2.5;
            this.cameraEmitter.radius = b.min(S, w);
            const g = this.cameraEmitter.radius
              , y = g * g / (w * w);
            this.cameraEmitter.rateMult = 1 / y;
            const M = t.layer == 0 ? 1 : 0;
            this.cameraEmitter.alpha = b.lerp(e * 6, this.cameraEmitter.alpha, M)
        }
    }
    renderTerrain(e, t, i, r) {
        const s = this.width
          , a = this.height
          , o = this.terrain
          , h = {
            x: 0,
            y: 0
        }
          , f = {
            x: s,
            y: 0
        }
          , u = {
            x: 0,
            y: a
        }
          , d = {
            x: s,
            y: a
        }
          , p = this.mapDef.biome.colors
          , w = this.mapData.groundPatches;
        e.beginFill(p.background),
        e.drawRect(-120, -120, s + 240, 120),
        e.drawRect(-120, a, s + 240, 120),
        e.drawRect(-120, -120, 120, a + 240),
        e.drawRect(s, -120, 120, a + 240),
        e.endFill(),
        e.beginFill(p.beach),
        et(e, o?.shore),
        e.beginHole(),
        et(e, o?.grass),
        e.endHole(),
        e.endFill(),
        i && (e.beginFill(p.grass),
        et(e, o?.grass),
        e.endFill());
        for (let g = 0; g < w.length; g++) {
            const y = w[g];
            y.order == 0 && (!r || y.useAsMapShape) && (e.beginFill(y.color),
            $i(e, y, this.seed),
            e.endFill())
        }
        e.beginFill(p.riverbank);
        for (let g = 0; g < o.rivers.length; g++)
            et(e, o.rivers[g].shorePoly);
        e.endFill(),
        e.beginFill(p.water);
        for (let g = 0; g < o.rivers.length; g++)
            et(e, o.rivers[g].waterPoly);
        e.endFill(),
        e.beginFill(p.water),
        e.moveTo(u.x, u.y),
        e.lineTo(d.x, d.y),
        e.lineTo(f.x, f.y),
        e.lineTo(h.x, h.y),
        e.beginHole(),
        et(e, o.shore),
        e.endHole(),
        e.closePath(),
        e.endFill();
        const S = e;
        S.lineStyle(t, 0, .15);
        for (let g = 0; g <= s; g += O.map.gridSize)
            mt(S, {
                x: g,
                y: 0
            }, {
                x: g,
                y: a
            });
        for (let g = 0; g <= a; g += O.map.gridSize)
            mt(S, {
                x: 0,
                y: g
            }, {
                x: s,
                y: g
            });
        S.lineStyle(t, 0, 0);
        for (let g = 0; g < w.length; g++) {
            const y = w[g];
            y.order == 1 && (!r || y.useAsMapShape) && (e.beginFill(y.color),
            $i(e, y, this.seed),
            e.endFill())
        }
    }
    FQpmn(e) {
        const t = e.SlQA(m.create(0, 0))
          , i = e.SlQA(m.create(1, 1))
          , r = m.sub(i, t);
        this.display.ground.position.set(t.x, t.y),
        this.display.ground.scale.set(r.x, r.y)
    }
    getMinimapRender(e) {
        const t = he[e.type]
          , i = t.type == "building" ? 750 + (t.zIdx || 0) : t.img.zIdx || 0;
        let r = [];
        if (t.map?.shapes !== void 0)
            r = t.map?.shapes;
        else {
            let s = null;
            (s = t.type == "obstacle" ? t.collision : t.ceiling.zoomRegions.length > 0 && t.ceiling.zoomRegions[0].zoomIn ? t.ceiling.zoomRegions[0].zoomIn : Qe.getBoundingCollider(e.type)) && r.push({
                collider: H.copy(s),
                scale: t.map?.scale || 1,
                color: t.map?.color
            })
        }
        return {
            obj: e,
            zIdx: i,
            shapes: r
        }
    }
    renderMap(e, t) {
        if (this.mapLoaded) {
            const i = new se
              , r = new se
              , s = this.mapDef.biome.colors
              , a = this.mapData.places
              , o = this.mapData.objects;
            let h = B.screenHeight;
            B.mobile && (B.isLandscape || (h = B.screenWidth),
            h *= b.min(B.pixelRatio, 2));
            const f = this.height / h
              , u = new Me;
            u.beginFill(s.grass),
            u.drawRect(0, 0, this.width, this.height),
            u.endFill(),
            this.renderTerrain(u, f, t, !0);
            const d = {
                x: 0,
                y: 0
            }
              , p = {
                x: this.width,
                y: 0
            }
              , w = {
                x: 0,
                y: this.height
            }
              , S = {
                x: this.width,
                y: this.height
            };
            u.lineStyle(f * 2, 0, 1),
            mt(u, d, w),
            mt(u, w, S),
            mt(u, S, p),
            mt(u, p, d),
            u.position.y = this.height,
            u.scale.y = -1,
            i.addChild(u);
            const g = [];
            for (let I = 0; I < o.length; I++) {
                const v = o[I];
                g.push(this.getMinimapRender(v))
            }
            g.sort( (I, v) => I.zIdx - v.zIdx);
            const y = new Me;
            for (let I = 0; I < g.length; I++) {
                const v = g[I]
                  , k = v.obj;
                for (let _ = 0; _ < v.shapes.length; _++) {
                    const A = v.shapes[_]
                      , z = H.transform(A.collider, k.pos, b.oriToRad(k.ori), k.scale)
                      , P = A.scale !== void 0 ? A.scale : 1;
                    switch (y.beginFill(A.color, 1),
                    z.type) {
                    case H.Type.Circle:
                        y.drawCircle(z.pos.x, this.height - z.pos.y, z.rad * P);
                        break;
                    case H.Type.Aabb:
                        {
                            let T = m.mul(m.sub(z.max, z.min), .5);
                            const C = m.add(z.min, T);
                            T = m.mul(T, P),
                            y.drawRect(C.x - T.x, this.height - C.y - T.y, T.x * 2, T.y * 2),
                            y.endFill()
                        }
                    }
                }
            }
            i.addChild(y);
            const M = new se;
            for (let I = 0; I < a.length; I++) {
                const v = a[I]
                  , k = new rs({
                    fontFamily: "Arial",
                    fontSize: B.mobile ? 20 : 22,
                    fontWeight: "bold",
                    fill: ["#ffffff"],
                    stroke: "#000000",
                    strokeThickness: 1,
                    dropShadow: !0,
                    dropShadowColor: "#000000",
                    dropShadowBlur: 1,
                    dropShadowAngle: Math.PI / 3,
                    dropShadowDistance: 1,
                    wordWrap: !1,
                    align: "center"
                })
                  , _ = new Mt(v.name,k);
                _.anchor.set(.5, .5),
                _.x = v.pos.x * this.height / f,
                _.y = v.pos.y * this.height / f,
                _.alpha = .75,
                M.addChild(_)
            }
            r.addChild(M),
            this.mapTexture ? this.mapTexture.resize(h, h) : this.mapTexture = ss.create({
                width: h,
                height: h,
                scaleMode: as.LINEAR,
                resolution: 1
            }),
            i.scale = new zi(h / this.height,h / this.height),
            e.render(i, {
                renderTexture: this.mapTexture,
                clear: !0
            }),
            e.render(r, {
                renderTexture: this.mapTexture,
                clear: !1
            }),
            i.destroy({
                children: !0,
                texture: !0,
                baseTexture: !0
            }),
            r.destroy({
                children: !0,
                texture: !0,
                baseTexture: !0
            })
        }
    }
    getGroundSurface(e, t) {
        const i = (u, d={}) => {
            if (u == "water") {
                const p = this.getMapDef().biome.colors;
                d.waterColor = d.waterColor !== void 0 ? d.waterColor : p.water,
                d.rippleColor = d.rippleColor !== void 0 ? d.rippleColor : p.waterRipple
            }
            return {
                type: u,
                data: d
            }
        }
          , r = this.decalBarn.decalPool.yQIfil();
        for (let u = 0; u < r.length; u++) {
            const d = r[u];
            if (d.active && d.surface && x.sameLayer(d.layer, t) && H.intersectCircle(d.collider, e, 1e-4))
                return i(d.surface.type, d.surface.data)
        }
        let s = null
          , a = 0;
        const o = t & 2
          , h = this.qbU.yQIfil();
        for (let u = 0; u < h.length; u++) {
            const d = h[u];
            if (d.active && d.zIdx >= a && (d.layer == t || o) && (d.layer != 1 || !o))
                for (let p = 0; p < d.surfaces.length; p++) {
                    const w = d.surfaces[p];
                    for (let S = 0; S < w.colliders.length; S++)
                        if (H.intersectCircle(w.colliders[S], e, 1e-4)) {
                            a = d.zIdx,
                            s = w;
                            break
                        }
                }
        }
        if (s)
            return i(s.type, s.data);
        let f = !1;
        if (t != 1) {
            const u = this.terrain?.rivers;
            for (let d = 0; d < u.length; d++) {
                const p = u[d];
                if (be.testPointAabb(e, p.aabb.min, p.aabb.max) && b.pointInsidePolygon(e, p.shorePoly) && (f = !0,
                b.pointInsidePolygon(e, p.waterPoly)))
                    return i("water", {
                        river: p
                    })
            }
        }
        return i(b.pointInsidePolygon(e, this.terrain?.grass) ? f ? this.mapDef.biome.sound.riverShore : "grass" : b.pointInsidePolygon(e, this.terrain?.shore) ? "sand" : "water")
    }
    isInOcean(e) {
        return !b.pointInsidePolygon(e, this.terrain?.shore)
    }
    distanceToShore(e) {
        return b.distToPolygon(e, this.terrain?.shore)
    }
    insideStructureStairs(e) {
        const t = this.SopFaJ.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.insideStairs(e))
                return !0
        }
        return !1
    }
    getBuildingById(e) {
        const t = this.qbU.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.__id == e)
                return r
        }
        return null
    }
    insideStructureMask(e) {
        const t = this.SopFaJ.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.insideMask(e))
                return !0
        }
        return !1
    }
    insideBuildingCeiling(e, t) {
        const i = this.qbU.yQIfil();
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            if (s.active && (!t || s.ceiling.visionTicker > 0 && !s.ceilingDead) && s.isInsideCeiling(e))
                return !0
        }
        return !1
    }
}
class va {
    __id;
    __type;
    active;
    sprite = new ae;
    playedLandFx;
    landed;
    fallInstance;
    chuteDeployed;
    soundUpdateThrottle;
    pos;
    isNew;
    fallTicker;
    rad;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    vusF() {
        this.playedLandFx = !1,
        this.landed = !1,
        this.fallInstance = null,
        this.chuteDeployed = !1,
        this.soundUpdateThrottle = 0,
        this.pos = m.create(0, 0),
        this.isNew = !1,
        this.fallTicker = 0
    }
    Obb() {
        this.fallInstance?.stop(),
        this.fallInstance = null,
        this.sprite.visible = !1
    }
    HCidV(e, t, i, r) {
        if (i) {
            this.isNew = !0,
            this.fallTicker = e.fallT * O.airdrop.fallTime;
            const s = r.map.getMapDef().biome.airdrop.airdropImg;
            this.sprite.texture = J.from(s)
        }
        t && (this.pos = m.copy(e.pos)),
        this.landed = e.landed
    }
}
class _a {
    airdropPool = new Ne(va);
    Obb() {
        const e = this.airdropPool.yQIfil();
        for (let t = 0; t < e.length; t++)
            e[t].Obb()
    }
    nYcwKO(e, t, i, r, s, a, o) {
        const h = this.airdropPool.yQIfil();
        for (let f = 0; f < h.length; f++) {
            const u = h[f];
            if (!u.active)
                continue;
            u.fallTicker += e;
            const d = b.clamp(u.fallTicker / O.airdrop.fallTime, 0, 1);
            let p = 0;
            if ((x.sameLayer(p, t.layer) || t.layer & 2) && (!(t.layer & 2) || !r.insideStructureMask(H.createCircle(u.pos, 1))) && (p |= 2),
            u.landed && !u.playedLandFx && (u.playedLandFx = !0,
            !u.isNew)) {
                for (let M = 0; M < 10; M++) {
                    const I = m.randomUnit();
                    s.addParticle("airdropSmoke", p, u.pos, I)
                }
                const g = r.getGroundSurface(u.pos, p);
                if (g.type == "water")
                    for (let M = 0; M < 12; M++) {
                        const I = m.add(u.pos, m.mul(m.randomUnit(), x.random(4.5, 6)));
                        s.addRippleParticle(I, p, g.data.rippleColor).setDelay(M * .075)
                    }
                const y = g.type == "water" ? "airdrop_crash_02" : "airdrop_crash_01";
                o.playSound(y, {
                    channel: "sfx",
                    soundPos: u.pos,
                    layer: p,
                    filter: "muffled"
                }),
                o.stopSound(u.fallInstance),
                u.fallInstance = null
            }
            !u.chuteDeployed && d <= .1 && (o.playSound("airdrop_chute_01", {
                channel: "sfx",
                soundPos: u.pos,
                layer: p,
                rangeMult: 1.75
            }),
            u.chuteDeployed = !0),
            !u.landed && !u.fallInstance && (u.fallInstance = o.playSound("airdrop_fall_01", {
                channel: "sfx",
                soundPos: u.pos,
                layer: p,
                rangeMult: 1.75,
                ignoreMinAllowable: !0,
                offset: u.fallTicker
            })),
            u.fallInstance && u.soundUpdateThrottle < 0 ? (u.soundUpdateThrottle = .1,
            o.updateSound(u.fallInstance, "sfx", u.pos, {
                layer: p,
                rangeMult: 1.75,
                ignoreMinAllowable: !0
            })) : u.soundUpdateThrottle -= e,
            u.rad = b.lerp((1 - d) ** 1.1, 5, 12),
            a.addPIXIObj(u.sprite, p, 1500, u.__id);
            const w = i.SlQA(u.pos)
              , S = i.zHRVv(2 * u.rad / i.hPMoEE);
            u.sprite.position.set(w.x, w.y),
            u.sprite.scale.set(S, S),
            u.sprite.tint = 16776960,
            u.sprite.alpha = 1,
            u.sprite.visible = !u.landed,
            u.isNew = !1
        }
    }
}
function Ji(l, e, t, i) {
    const r = Math.atan2(i.y, i.x);
    return {
        p0: m.add(t, m.rotate(l, r)),
        p1: m.add(t, m.rotate(e, r))
    }
}
function Ia(l, e, t, i, r) {
    Wt[l.bulletType].addFlare ? t.addFlare(l, i, r) : e.addBullet(l, i, r)
}
function Si(l, e, t, i, r, s, a) {
    const o = Math.floor(x.random(1, 2));
    let h = m.mul(i, 9.5);
    for (let f = 0; f < o; f++)
        h = m.rotate(h, (Math.random() - .5) * Math.PI / 3),
        s.addParticle(l, r, t, h);
    a.playGroup(e, {
        channel: "hits",
        soundPos: t,
        layer: r,
        filter: "muffled"
    })
}
class Ta {
    bullets = [];
    tracerColors = {};
    onMapLoad(e) {
        this.tracerColors = x.mergeDeep(O.tracerColors, e.getMapDef().biome.tracerColors)
    }
    addBullet(e, t, i) {
        let r = null;
        for (let S = 0; S < this.bullets.length; S++)
            if (!this.bullets[S].alive && !this.bullets[S].collided) {
                r = this.bullets[S];
                break
            }
        r || (r = {},
        r.alive = !1,
        r.container = new se,
        r.container.pivot.set(14.5, 0),
        r.container.visible = !1,
        r.bulletTrail = ae.from("player-bullet-trail-02.img"),
        r.bulletTrail.anchor.set(.5, .5),
        r.container.addChild(r.bulletTrail),
        this.bullets.push(r));
        const s = Wt[e.bulletType]
          , a = 1 + e.varianceT * s.variance
          , o = b.remap(e.distAdjIdx, 0, 16, -1, 1);
        let h = s.distance / Math.pow(O.bullet.reflectDistDecay, e.reflectCount);
        e.clipDistance && (h = e.distance),
        r.alive = !0,
        r.isNew = !0,
        r.collided = !1,
        r.scale = 1,
        r.playerId = e.playerId,
        r.startPos = m.copy(e.pos),
        r.pos = m.copy(e.pos),
        r.dir = m.copy(e.dir),
        r.layer = e.layer,
        r.speed = s.speed * a,
        r.distance = h * a + o,
        r.damageSelf = s.shrapnel || e.reflectCount > 0,
        r.reflectCount = e.reflectCount,
        r.reflectObjId = e.reflectObjId,
        r.whizHeard = !1;
        const f = Math.atan2(r.dir.x, r.dir.y);
        r.container.rotation = f - Math.PI / 2,
        r.layer = e.layer;
        const u = t.getPlayerById(r.playerId);
        u && u.layer & 2 && (r.layer |= 2);
        let d = s.tracerWidth;
        e.trailSmall && (d *= .5),
        e.trailThick && (d *= 2),
        r.bulletTrail.scale.set(.8, d),
        r.tracerLength = s.tracerLength,
        r.suppressed = !!s.suppressed;
        const p = this.tracerColors[s.tracerColor];
        let w = p.regular;
        e.trailSaturated ? w = p.chambered || p.saturated : u?.surface?.data.isBright && (w = p.saturated),
        r.bulletTrail.tint = w,
        r.tracerAlphaRate = p.alphaRate,
        r.tracerAlphaMin = p.alphaMin,
        r.bulletTrail.alpha = 1,
        r.reflectCount > 0 && (r.bulletTrail.alpha *= .5),
        r.container.visible = !0,
        i.addPIXIObj(r.container, r.layer, 20)
    }
    nYcwKO(e, t, i, r, s, a, o, h) {
        const f = t.playerPool.yQIfil();
        for (let u = 0; u < this.bullets.length; u++) {
            const d = this.bullets[u];
            if (d.collided && (d.scale = b.max(d.scale - e * 6, 0),
            d.scale <= 0 && (d.collided = !1,
            d.container.visible = !1)),
            d.alive) {
                const p = d.distance - m.length(m.sub(d.startPos, d.pos))
                  , w = b.min(p, e * d.speed)
                  , S = m.copy(d.pos);
                if (d.pos = m.add(d.pos, m.mul(d.dir, w)),
                !s.pjeWp.sTD && x.sameAudioLayer(s.layer, d.layer) && m.length(m.sub(r.HiVuim, d.pos)) < 7.5 && !d.whizHeard && d.playerId != s.__id && (h.playGroup("bullet_whiz", {
                    soundPos: d.pos,
                    fallOff: 4
                }),
                d.whizHeard = !0),
                d.tracerAlphaRate && d.suppressed) {
                    const k = d.tracerAlphaRate;
                    d.bulletTrail.alpha = b.max(d.tracerAlphaMin, d.bulletTrail.alpha * k)
                }
                const g = []
                  , y = i.oymOX.yQIfil();
                for (let k = 0; k < y.length; k++) {
                    const _ = y[k];
                    if (_.active && !_.dead && x.sameLayer(_.layer, d.layer) && _.height >= O.bullet.height && (d.reflectCount <= 0 || _.__id != d.reflectObjId)) {
                        const A = H.intersectSegment(_.collider, S, d.pos);
                        A && g.push({
                            type: "obstacle",
                            obstacleType: _.type,
                            collidable: _.collidable,
                            point: A.point,
                            normal: A.normal
                        })
                    }
                }
                for (let k = 0; k < f.length; k++) {
                    const _ = f[k];
                    if (_.active && !_.pjeWp.sTD && (x.sameLayer(_.pjeWp.ySWeiH, d.layer) || _.pjeWp.ySWeiH & 2) && (_.__id != d.playerId || d.damageSelf)) {
                        let A = null;
                        if (_.ZZb()) {
                            const P = _
                              , T = P.AbrxK()
                              , C = Ji(T.p0, T.p1, P.HMBbm, P.JCasYr)
                              , N = Ji(T.p0, T.p1, P.HiVuim, P.HjwR)
                              , L = be.intersectSegmentSegment(S, d.pos, C.p0, C.p1)
                              , V = be.intersectSegmentSegment(S, d.pos, N.p0, N.p1) || L;
                            if (V) {
                                const E = m.normalize(m.perp(m.sub(N.p1, N.p0)));
                                A = {
                                    point: V.point,
                                    normal: E
                                }
                            }
                        }
                        const z = be.intersectSegmentCircle(S, d.pos, _.HiVuim, _.mjdwp);
                        if (z && (!A || m.length(m.sub(z.point, d.startPos)) < m.length(m.sub(A.point, d.startPos))) ? (g.push({
                            type: "player",
                            player: _,
                            point: z.point,
                            normal: z.normal,
                            layer: _.layer,
                            collidable: !0
                        }),
                        _.lJQXO("steelskin") && g.push({
                            type: "pan",
                            point: m.add(z.point, m.mul(z.normal, .1)),
                            normal: z.normal,
                            layer: _.layer,
                            collidable: !1
                        })) : A && g.push({
                            type: "pan",
                            point: A.point,
                            normal: A.normal,
                            layer: _.layer,
                            collidable: !0
                        }),
                        z || A)
                            break
                    }
                }
                for (let k = 0; k < g.length; k++) {
                    const _ = g[k];
                    _.dist = m.length(m.sub(_.point, S))
                }
                g.sort( (k, _) => k.dist - _.dist);
                let M = !1;
                const I = t.getPlayerById(d.playerId);
                I && (I.pjeWp.sTD || I.pjeWp.wLG) && (M = !0);
                let v = !1;
                for (let k = 0; k < g.length; k++) {
                    const _ = g[k];
                    if (_.type == "obstacle") {
                        const A = he[_?.obstacleType];
                        Si(A.hitParticle, A.sound.bullet, _.point, _.normal, d.layer, o, h),
                        v = _.collidable
                    } else if (_.type == "player") {
                        if (!M) {
                            const A = _.player;
                            if (i.turkeyMode && I?.lJQXO("turkey_shoot")) {
                                const P = m.mul(m.randomUnit(), x.random(3, 6));
                                o.addParticle("turkeyFeathersHit", A.layer, A.HiVuim, P)
                            }
                            const z = m.sub(_.point, A?.HiVuim);
                            z.y *= -1,
                            o.addParticle("bloodSplat", A.layer, m.mul(z, r.hPMoEE), m.create(0, 0), 1, 1, A.container),
                            h.playGroup("player_bullet_hit", {
                                soundPos: A.HiVuim,
                                fallOff: 1,
                                layer: A.layer,
                                filter: "muffled"
                            })
                        }
                        v = _.collidable
                    } else
                        _.type == "pan" && (Si("barrelChip", U.pan.sound.bullet, _.point, _.normal, _.layer, o, h),
                        v = _.collidable);
                    if (v) {
                        d.pos = _.point;
                        break
                    }
                }
                if (!(d.layer & 2)) {
                    const k = i.SopFaJ.yQIfil();
                    let _ = d.layer;
                    for (let A = 0; A < k.length; A++) {
                        const z = k[A];
                        if (z.active) {
                            let P = !1
                              , T = !1;
                            for (let C = 0; C < z.stairs.length; C++) {
                                const N = z.stairs[C];
                                if (!N?.lootOnly && H.intersectSegment(N?.collision, d.pos, S)) {
                                    P = !0;
                                    break
                                }
                            }
                            for (let C = 0; C < z.mask.length; C++)
                                if (H.intersectSegment(z.mask[C], d.pos, S)) {
                                    T = !0;
                                    break
                                }
                            P && !T && (_ |= 2)
                        }
                    }
                    _ != d.layer && (d.layer = _,
                    a.addPIXIObj(d.container, d.layer, 20))
                }
                (v || b.eqAbs(p, w)) && (d.collided = !0,
                d.alive = !1),
                d.isNew = !1
            }
        }
    }
    createBulletHit(e, t, i) {
        const r = e.getPlayerById(t);
        r && i.playGroup("player_bullet_hit", {
            soundPos: r.HiVuim,
            fallOff: 1,
            layer: r.layer,
            filter: "muffled"
        })
    }
    FQpmn(e, t) {
        e.zHRVv(1);
        for (let i = 0; i < this.bullets.length; i++) {
            const r = this.bullets[i];
            if (r.alive || r.collided) {
                const s = m.length(m.sub(r.pos, r.startPos))
                  , a = e.SlQA(r.pos);
                r.container.position.set(a.x, a.y);
                const o = e.zHRVv(1)
                  , h = b.min(r.tracerLength * 15, s / 2);
                r.container.scale.set(o * h * r.scale, o)
            }
        }
    }
}
function Ma() {
    const l = {
        fontFamily: "Arial",
        fontWeight: "bold",
        fontSize: B.pixelRatio > 1 ? 30 : 24,
        align: "center",
        fill: 16777215,
        stroke: 0,
        strokeThickness: 0,
        dropShadow: !0,
        dropShadowColor: "#000000",
        dropShadowBlur: 1,
        dropShadowAngle: Math.PI / 3,
        dropShadowDistance: 1
    }
      , e = new Mt("",l);
    return e.anchor.set(.5, .5),
    e.scale.set(.5, .5),
    e
}
class Pa {
    __id;
    __type;
    active = !1;
    pos = m.create(0, 0);
    container = new se;
    sprite = ae.from("skull.img");
    nameText = Ma();
    nameTextSet;
    layer;
    playerId;
    constructor() {
        this.container.addChild(this.sprite),
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(.4, .4),
        this.sprite.tint = 5921370,
        this.nameText.anchor.set(.5, -1),
        this.nameText.tint = x.rgbToInt(x.hsvToRgb(0, 0, .5)),
        this.container.addChild(this.nameText),
        this.container.visible = this.sprite
    }
    vusF() {}
    Obb() {
        this.container.visible = !1
    }
    HCidV(e, t, i, r) {
        this.pos = m.copy(e.pos),
        t && (this.layer = e.layer,
        this.playerId = e.playerId),
        i && (this.nameTextSet = !1,
        this.container.visible = !0)
    }
}
class Ca {
    deadBodyPool = new Ne(Pa);
    nYcwKO(e, t, i, r, s, a) {
        const o = this.deadBodyPool.yQIfil();
        for (let h = 0; h < o.length; h++) {
            const f = o[h];
            if (f.active) {
                f.nameTextSet || (f.nameText.text = t.getPlayerName(f.playerId, i.__id, !1),
                f.nameTextSet = !0);
                const u = H.createCircle(f.pos, 1)
                  , d = r.insideStructureStairs(u);
                let p = f.layer
                  , w = 12;
                f.layer == 0 && i.layer == 0 && d && (p |= 2,
                w += 100),
                a.addPIXIObj(f.container, p, w, f.__id);
                const S = s.SlQA(f.pos)
                  , g = s.zHRVv(1);
                f.container.position.set(S.x, S.y),
                f.container.scale.set(g, g)
            }
        }
    }
    getDeadBodyById(e) {
        const t = this.deadBodyPool.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.playerId == e)
                return r
        }
        return null
    }
}
function ri(l, e, t) {
    return l == 0 ? e : l == 1 ? t : x.lerpColor(l, e, t)
}
class Da {
    __id;
    __type;
    active;
    decalRender = null;
    isNew;
    goreT;
    hasGore;
    type;
    pos;
    rot;
    scale;
    layer;
    goreKills;
    collider;
    surface;
    vusF() {
        this.isNew = !1,
        this.goreT = 0
    }
    Obb() {
        this.decalRender && (this.decalRender.free(),
        this.decalRender = null)
    }
    HCidV(e, t, i, r) {
        if (t) {
            const s = he[e.type];
            this.type = e.type,
            this.pos = m.copy(e.pos),
            this.rot = b.oriToRad(e.ori),
            this.scale = e.scale,
            this.layer = e.layer,
            this.goreKills = e.goreKills,
            this.collider = H.transform(s.collision, this.pos, this.rot, this.scale),
            this.surface = s.surface ? x.cloneDeep(s.surface) : null,
            this.hasGore = s.gore !== void 0,
            this.isNew = i,
            this.isNew && (this.decalRender = r.decalBarn.allocDecalRender(),
            this.decalRender.init(this, r.map, r.renderer))
        }
    }
    update(e, t) {
        if (this.hasGore) {
            const i = he[this.type];
            let r = b.delerp(this.goreKills, i.gore?.fade.start, i.gore?.fade.end);
            if (r = Math.pow(r, i.gore?.fade.pow),
            this.goreT = this.isNew ? r : b.lerp(e * i.gore?.fade.speed, this.goreT, r),
            i.gore?.tint !== void 0) {
                const s = ri(this.goreT, i.img.tint, i.gore.tint);
                this.decalRender.setTint(s)
            }
            i.gore?.alpha !== void 0 && (this.decalRender.spriteAlpha = b.lerp(this.goreT, i.img.alpha, i.gore.alpha)),
            i.gore?.waterColor !== void 0 && this.surface && (this.surface.data.waterColor = ri(this.goreT, i.surface?.data.waterColor, i.gore.waterColor)),
            i.gore?.rippleColor !== void 0 && this.surface && (this.surface.data.rippleColor = ri(this.goreT, i.surface?.data.rippleColor, i.gore.rippleColor))
        }
        this.isNew = !1
    }
}
class Ba {
    sprite = new ae;
    pos;
    rot;
    scale;
    layer;
    zIdx;
    zOrd;
    imgScale;
    spriteAlpha;
    valueAdjust;
    inWater;
    flicker;
    flickerMin;
    flickerMax;
    flickerTarget;
    flickerRate;
    flickerCooldown;
    active;
    deactivated;
    fadeout;
    fadeAlpha;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    init(e, t, i) {
        const r = he[e.type];
        this.pos = m.copy(e.pos),
        this.rot = e.rot,
        this.scale = e.scale,
        this.layer = e.layer,
        this.zIdx = r.img.zIdx,
        this.zOrd = e.__id;
        const s = r.img;
        if (this.sprite.texture = J.from(s.sprite),
        this.sprite.alpha = 1,
        this.sprite.visible = !0,
        this.imgScale = r.img.scale,
        this.spriteAlpha = s.alpha,
        this.valueAdjust = s.ignoreAdjust ? 1 : t.getMapDef().biome.valueAdjust,
        this.setTint(s.tint),
        this.inWater = !1,
        r.height < .25) {
            const a = t.getGroundSurface(e.pos, e.layer);
            this.inWater = a.type == "water"
        }
        this.flicker = r.img.flicker,
        this.flicker && (this.flickerMin = r.img.flickerMin,
        this.flickerMax = r.img.flickerMax,
        this.flickerTarget = this.imgScale,
        this.flickerRate = r.img.flickerRate,
        this.flickerCooldown = 0),
        this.active = !0,
        this.deactivated = !1,
        this.fadeout = r.lifetime !== void 0,
        this.fadeAlpha = 1
    }
    free() {
        this.deactivated = !0
    }
    setTint(e) {
        this.valueAdjust < 1 && (e = x.adjustValue(e, this.valueAdjust)),
        this.sprite.tint = e
    }
    update(e, t, i) {
        this.deactivated && this.fadeout && (this.fadeAlpha = b.lerp(e * 3, this.fadeAlpha, 0),
        this.fadeAlpha < .01 && (this.fadeAlpha = 0)),
        this.deactivated && (!this.fadeout || b.eqAbs(this.fadeAlpha, 0)) && (this.sprite.visible = !1,
        this.active = !1),
        this.flicker && (this.flickerCooldown < 0 ? (this.flickerTarget = x.random(this.flickerMin, this.flickerMax),
        this.flickerCooldown = x.random(.05, this.flickerRate)) : (this.imgScale = b.lerp(this.flickerRate - this.flickerCooldown, this.imgScale, this.flickerTarget),
        this.flickerCooldown -= e));
        const r = t.SlQA(this.pos)
          , s = t.zHRVv(this.scale * this.imgScale);
        this.sprite.position.set(r.x, r.y),
        this.sprite.scale.set(s, s),
        this.sprite.rotation = -this.rot,
        this.sprite.alpha = this.spriteAlpha * (this.inWater ? .3 : 1) * this.fadeAlpha,
        i.addPIXIObj(this.sprite, this.layer, this.zIdx, this.zOrd)
    }
}
class Rr {
    decalPool = new Ne(Da);
    decalRenders = [];
    allocDecalRender() {
        let e = null;
        for (let t = 0; t < this.decalRenders.length; t++) {
            const i = this.decalRenders[t];
            if (!i.active) {
                e = i;
                break
            }
        }
        return e || (e = new Ba,
        this.decalRenders.push(e)),
        e
    }
    nYcwKO(e, t, i, r) {
        const s = this.decalPool.yQIfil();
        for (let a = 0; a < s.length; a++) {
            const o = s[a];
            o.active && o.update(e)
        }
        for (let a = 0; a < this.decalRenders.length; a++) {
            const o = this.decalRenders[a];
            o.active && o.update(e, t, i)
        }
    }
    FQpmn(e, t, i) {}
}
class La {
    active;
    pos;
    vel;
    layer;
    particle;
    ticker;
    colCount;
    constructor() {
        this.active = !1
    }
    init(e, t, i, r) {
        this.pos = m.copy(e),
        this.vel = m.copy(t),
        this.layer = i,
        this.particle = r,
        this.ticker = 0,
        this.colCount = 0,
        this.active = !0
    }
    update(e, t, i) {
        const r = m.copy(this.pos);
        this.pos = m.add(this.pos, m.mul(this.vel, e)),
        this.vel = m.mul(this.vel, 1 / (1 + e * 5));
        const s = []
          , a = t.oymOX.yQIfil();
        for (let f = 0; f < a.length; f++) {
            const u = a[f];
            u.active && !u.dead && x.sameLayer(this.layer, u.layer) && s.push(u.collider)
        }
        const o = i.playerPool.yQIfil();
        for (let f = 0; f < o.length; f++) {
            const u = o[f];
            u.active && !u.dead && x.sameLayer(this.layer, u.layer) && s.push(H.createCircle(u.HiVuim, u.mjdwp, 0))
        }
        const h = [];
        for (let f = 0; f < s.length; f++) {
            const u = H.intersectSegment(s[f], r, this.pos);
            if (u) {
                const d = m.length(m.sub(u.point, r));
                h.push({
                    point: u.point,
                    normal: u.normal,
                    dist: d
                })
            }
        }
        if (h.sort( (f, u) => f.dist - u.dist),
        h.length > 0) {
            const f = h[0]
              , u = m.normalizeSafe(this.vel, m.create(1, 0))
              , d = m.length(this.vel)
              , p = m.sub(u, m.mul(f.normal, m.dot(f.normal, u) * 2))
              , w = this.colCount++ > 0 ? .35 : 1;
            this.pos = m.add(f.point, m.mul(f.normal, .01)),
            this.vel = m.mul(p, d * w)
        }
        this.particle.pos = m.copy(this.pos),
        this.ticker += e,
        this.ticker >= this.particle.life && (this.particle.free(),
        this.active = !1)
    }
}
class Aa {
    active;
    type;
    done;
    pos;
    layer;
    ticker;
    lifetime;
    soundInstance;
    soundUpdateThrottle;
    constructor(e) {
        this.active = !1
    }
    init(e, t, i) {
        const r = Di[e].explosionEffectType
          , s = Xi[r];
        this.active = !0,
        this.done = !1,
        this.type = e,
        this.pos = m.copy(t),
        this.layer = i,
        this.ticker = 0,
        this.lifetime = s.lifetime,
        this.soundInstance = null,
        this.soundUpdateThrottle = 0
    }
    free() {
        this.active = !1
    }
    update(e, t, i, r, s, a) {
        const o = Di[this.type].explosionEffectType
          , h = Xi[o];
        if (this.ticker == 0) {
            let d = !0;
            if (this.type == "explosion_bomb_iron") {
                const y = H.createCircle(this.pos, .5);
                s.insideBuildingCeiling(y, !0) && (d = !1)
            }
            if (d && (h.burst.particle && i.addParticle(h.burst.particle, this.layer, this.pos, m.create(0, 0), h.burst.scale, 0, null),
            h.scatter))
                for (let y = 0; y < h.scatter.count; y++) {
                    const M = i.addParticle(h.scatter.particle, this.layer, this.pos, m.create(0, 0), 1, 0, null)
                      , I = t.addPhysicsParticle()
                      , v = m.mul(m.randomUnit(), x.random(h.scatter.speed.min, h.scatter.speed.max));
                    I.init(this.pos, v, this.layer, M)
                }
            const p = s.getGroundSurface(this.pos, this.layer)
              , w = p.type == "water" ? h.burst.sound.water : h.burst.sound.grass;
            let S = 0;
            h.burst.sound.detune != null && (S = h.burst.sound.detune);
            let g = 1;
            if (h.burst.sound.volume != null && (g = h.burst.sound.volume),
            this.soundInstance = r.playSound(w, {
                channel: "sfx",
                soundPos: this.pos,
                layer: this.layer,
                filter: "muffled",
                rangeMult: 2,
                ignoreMinAllowable: !0,
                detune: S,
                volumeScale: g
            }),
            p.type == "water")
                for (let y = 0; y < h.rippleCount; y++) {
                    const M = h.rippleCount * .5
                      , I = m.add(this.pos, m.mul(m.randomUnit(), x.random(0, M)));
                    i.addRippleParticle(I, this.layer, p.data.rippleColor).setDelay(y * .06)
                }
        }
        if (this.soundInstance && this.soundUpdateThrottle < 0) {
            this.soundUpdateThrottle = .1;
            let d = 1;
            h.burst.sound.volume != null && (d = h.burst.sound.volume),
            r.updateSound(this.soundInstance, "sfx", this.pos, {
                layer: this.layer,
                filter: "muffled",
                volumeScale: d
            })
        } else
            this.soundUpdateThrottle -= e;
        this.ticker += e;
        const f = b.min(this.ticker / h.shakeDur, 1)
          , u = b.lerp(f, h.shakeStr, 0);
        a.GpG(this.pos, u),
        this.ticker >= this.lifetime && (this.active = !1)
    }
}
class Ea {
    explosions;
    physicsParticles;
    constructor() {
        this.explosions = [],
        this.physicsParticles = []
    }
    addExplosion(e, t, i) {
        let r = null;
        for (let s = 0; s < this.explosions.length; s++)
            if (!this.explosions[s].active) {
                r = this.explosions[s];
                break
            }
        r || (r = new Aa(this),
        this.explosions.push(r)),
        r.init(e, t, i)
    }
    addPhysicsParticle() {
        let e = null;
        for (let t = 0; t < this.physicsParticles.length; t++) {
            const i = this.physicsParticles[t];
            if (!i.active) {
                e = i;
                break
            }
        }
        return e || (e = new La,
        this.physicsParticles.push(e)),
        e
    }
    nYcwKO(e, t, i, r, s, a, o) {
        for (let h = 0; h < this.explosions.length; h++) {
            const f = this.explosions[h];
            f.active && (f.update(e, this, s, a, t, r),
            f.active || f.free())
        }
        for (let h = 0; h < this.physicsParticles.length; h++) {
            const f = this.physicsParticles[h];
            f.active && f.update(e, t, i)
        }
    }
}
const Xi = {
    frag: {
        burst: {
            particle: "explosionBurst",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    smoke: {
        burst: {
            particle: "explosionBurst",
            scale: 0,
            sound: {
                grass: "explosion_smoke_01",
                water: "explosion_smoke_01"
            }
        },
        rippleCount: 10,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 6
    },
    strobe: {
        burst: {
            particle: "explosionBurst",
            scale: .25,
            sound: {
                grass: "explosion_04",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 2
    },
    barrel: {
        burst: {
            particle: "explosionBurst",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    usas: {
        burst: {
            particle: "explosionUSAS",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .12,
        shakeDur: .25,
        lifetime: 1.25
    },
    rounds: {
        burst: {
            particle: "explosionRounds",
            scale: .32,
            sound: {
                grass: "explosion_04",
                water: "explosion_04",
                detune: 500,
                volume: .5
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    rounds_sg: {
        burst: {
            particle: "explosionRounds",
            scale: .32,
            sound: {
                grass: "explosion_04",
                water: "explosion_04",
                detune: 500,
                volume: .2
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    mirv: {
        burst: {
            particle: "explosionMIRV",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    mirv_mini: {
        burst: {
            particle: "explosionMIRV",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: .1,
        shakeDur: .2,
        lifetime: 1.25
    },
    martyr_nade: {
        burst: {
            particle: "explosionBurst",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: .1,
        shakeDur: .2,
        lifetime: 1.25
    },
    snowball: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "snowball_01",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "snowball_impact",
            count: 5,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    snowball_heavy: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "snowball_02",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "snowball_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "potato_01",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 5,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato_heavy: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "potato_02",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato_cannonball: {
        burst: {
            particle: "explosionPotato",
            scale: .75,
            sound: {
                grass: "explosion_05",
                water: "explosion_02"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 10,
        shakeStr: .12,
        shakeDur: .25,
        lifetime: 1.25
    },
    potato_smgshot: {
        burst: {
            particle: "",
            scale: .2,
            sound: {
                grass: "potato_01",
                water: "potato_02",
                detune: 250,
                volume: .5
            }
        },
        scatter: {
            particle: "potato_smg_impact",
            count: 2,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: .5
    },
    bomb_iron: {
        burst: {
            particle: "explosionBomb",
            scale: 2,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 12,
        shakeStr: .25,
        shakeDur: .4,
        lifetime: 2
    }
};
class Ra {
    bullets = [];
    addFlare(e, t, i) {
        let r = null;
        for (let w = 0; w < this.bullets.length; w++)
            if (!this.bullets[w].alive && !this.bullets[w].collided) {
                r = this.bullets[w];
                break
            }
        r || (r = {},
        r.alive = !1,
        r.flareContainer = new se,
        r.flareContainer.visible = !1,
        r.flare = ae.from("part-flare-01.img"),
        r.flare.anchor.set(.5, .5),
        r.flareContainer.addChild(r.flare),
        r.trailContainer = new se,
        r.trailContainer.visible = !1,
        r.trailContainer.pivot.set(14.5, 0),
        r.bulletTrail = ae.from("player-bullet-trail-02.img"),
        r.bulletTrail.anchor.set(.5, .5),
        r.trailContainer.addChild(r.bulletTrail),
        this.bullets.push(r));
        const s = Wt[e.bulletType]
          , a = 1 + e.varianceT * s.variance
          , o = b.remap(e.distAdjIdx, 0, 32, -1, 1)
          , h = s.distance / Math.pow(O.bullet.reflectDistDecay, e.reflectCount);
        r.alive = !0,
        r.isNew = !0,
        r.collided = !1,
        r.flareScale = .01,
        r.trailScale = 1,
        r.timeAlive = 0,
        r.maxTimeAlive = 2.5,
        r.startPos = m.copy(e.pos),
        r.pos = m.copy(e.pos),
        r.dir = m.copy(e.dir),
        r.layer = e.layer,
        r.speed = s.speed * a,
        r.distance = h * a + o;
        const f = Math.atan2(r.dir.x, r.dir.y);
        r.flareContainer.rotation = f - Math.PI / 2,
        r.trailContainer.rotation = f - Math.PI / 2,
        r.layer = e.layer;
        const u = t.getPlayerById(r.playerId);
        u && u.layer & 2 && (r.layer |= 2);
        const d = O.tracerColors[s.tracerColor];
        let p = d.regular;
        u?.isOnBrightSurface && (p = d.saturated),
        r.bulletTrail.scale.set(.8, s.tracerWidth),
        r.tracerLength = s.tracerLength,
        r.bulletTrail.tint = p,
        r.tracerAlphaRate = d.alphaRate,
        r.tracerAlphaMin = d.alphaMin,
        r.bulletTrail.alpha = 1,
        r.flare.scale.set(1, 1),
        r.flare.tint = s.flareColor,
        r.flare.alpha = .8,
        r.maxFlareScale = s.maxFlareScale,
        r.smokeThrottle = 0,
        r.flareContainer.visible = !0,
        r.trailContainer.visible = !0
    }
    nYcwKO(e, t, i, r, s, a, o, h) {
        for (let f = 0; f < this.bullets.length; f++) {
            const u = this.bullets[f];
            if (u.collided && (u.flareScale = b.max(u.flareScale - e * .5, 0),
            u.flare.alpha = b.max(u.flare.alpha - e, 0),
            u.trailScale = b.max(u.trailScale - e * 6, 0),
            u.bulletTrail.alpha = b.max(u.bulletTrail.alpha - e, 0),
            u.pos = m.add(u.pos, m.mul(u.dir, e * u.speed)),
            u.flare.alpha <= 0 && (u.collided = !1,
            u.flareContainer.visible = !1,
            u.trailContainer.visible = !1)),
            u.alive) {
                if (u.tracerAlphaRate) {
                    const S = s.__id == u.playerId ? u.tracerAlphaRate : u.tracerAlphaRate * .9;
                    u.bulletTrail.alpha = b.max(u.tracerAlphaMin, u.bulletTrail.alpha * S)
                }
                u.timeAlive += e,
                u.flareScale = b.easeOutExpo(u.timeAlive / u.maxTimeAlive) * u?.maxFlareScale,
                u.smokeThrottle <= 0 ? u.smokeThrottle = .05 : u.smokeThrottle -= e;
                const d = u.distance - m.length(m.sub(u.startPos, u.pos))
                  , p = b.min(d, e * u.speed);
                u.pos = m.add(u.pos, m.mul(u.dir, p)),
                b.eqAbs(d, p) && (u.collided = !0,
                u.alive = !1);
                let w = 0;
                (x.sameLayer(w, s.layer) || s.layer & 2) && (!(s.layer & 2) || !i.insideStructureMask(H.createCircle(u.pos, 1))) && (w |= 2),
                a.addPIXIObj(u.trailContainer, w, 1e3, 0),
                a.addPIXIObj(u.flareContainer, w, 1e3, 1),
                u.isNew = !1
            }
        }
    }
    FQpmn(e) {
        for (let t = 0; t < this.bullets.length; t++) {
            const i = this.bullets[t];
            if (i.alive || i.collided) {
                const r = e.SlQA(i.pos);
                i.flareContainer.position.set(r.x, r.y);
                const s = e.zHRVv(1);
                i.flareContainer.scale.set(s * i.flareScale, s * i.flareScale);
                const a = m.length(m.sub(i.pos, i.startPos));
                i.trailContainer.position.set(r.x, r.y);
                const o = b.min(i.tracerLength * 15, a / 2);
                i.trailContainer.scale.set(s * o * i.trailScale, s)
            }
        }
    }
}
class Oa {
    __id;
    __type;
    active;
    ticker = 0;
    playDropSfx = !1;
    container = new ae;
    sprite = new ae;
    emitter = null;
    updatedData;
    pos;
    visualPosOld;
    posInterpTicker;
    isOld;
    layer;
    type;
    count;
    isPreloadedGun;
    ownerId;
    rad;
    imgScale;
    constructor() {
        this.container.anchor.set(.5, .5),
        this.container.scale.set(1, 1),
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(.8, .8),
        this.container.addChild(this.sprite)
    }
    vusF() {
        this.updatedData = !1,
        this.visualPosOld = m.create(0, 0)
    }
    Obb() {
        this.container.visible = !1,
        this.emitter && (this.emitter.stop(),
        this.emitter = null)
    }
    HCidV(e, t, i, r) {
        if (this.updatedData = !0,
        m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(i ? e.pos : this.pos),
        this.posInterpTicker = 0),
        this.pos = m.copy(e.pos),
        t && (this.layer = e.layer,
        this.type = e.type,
        this.count = e.count,
        this.isOld = e.isOld,
        this.isPreloadedGun = e.isPreloadedGun,
        this.ownerId = e.hasOwner ? e.ownerId : 0),
        i) {
            const s = U[this.type];
            this.ticker = 0,
            this.isOld && (this.ticker = 10),
            !this.isOld && s.sound.drop && !r.map.lootDropSfxIds.includes(this.__id) && (this.playDropSfx = !0),
            this.rad = O.lootRadius[s.type],
            this.imgScale = s.lootImg?.scale * 1.25;
            const a = s.lootImg.innerScale || .8;
            this.sprite.scale.set(a, a),
            this.sprite.texture = J.from(s.lootImg?.sprite),
            this.sprite.tint = s.lootImg?.tint,
            this.container.texture = s.lootImg.border ? J.from(s.lootImg.border) : J.EMPTY,
            this.isPreloadedGun && (this.container.texture = J.from("loot-circle-outer-06.img"));
            const o = U[s.ammo];
            o ? this.container.tint = o.lootImg.tintDark : s.lootImg.borderTint ? this.container.tint = s.lootImg.borderTint : this.container.tint = 0,
            s.type == "xp" && s.emitter && (this.emitter = r.particleBarn.addEmitter(s.emitter, {
                pos: this.pos,
                layer: this.layer
            })),
            this.sprite.rotation = s?.lootImg?.rot ? s.lootImg.rot : 0,
            this.sprite.scale.x = s.lootImg.mirror ? -a : a,
            this.container.visible = !0
        }
        (i || t) && r.renderer.addPIXIObj(this.container, this.layer, 13, this.__id)
    }
}
class Fa {
    lootPool = new Ne(Oa);
    closestLoot = null;
    nYcwKO(e, t, i, r, s, a) {
        this.closestLoot = null;
        let o = Number.MAX_VALUE;
        const h = this.lootPool.yQIfil();
        for (let f = 0; f < h.length; f++) {
            const u = h[f];
            if (u.active) {
                if (x.sameLayer(u.layer, t.layer) && !t.pjeWp.sTD && (u.ownerId == 0 || u.ownerId == t.__id)) {
                    const y = u.pos
                      , M = B.touch ? t.mjdwp + u.rad * O.player.touchLootRadMult : u.rad
                      , I = m.sub(t.HiVuim, y)
                      , v = m.lengthSqr(I);
                    v < M * M && v < o && (o = v,
                    this.closestLoot = u)
                }
                if (u.ticker += e,
                u.playDropSfx) {
                    i.lootDropSfxIds.push(u.__id),
                    u.playDropSfx = !1;
                    const y = U[u.type];
                    r.playSound(y.sound?.drop, {
                        channel: "sfx",
                        soundPos: u.pos,
                        layer: u.layer,
                        filter: "muffled"
                    })
                }
                u.emitter && (u.emitter.pos = m.add(u.pos, m.create(0, .1)),
                u.emitter.layer = u.layer);
                const d = b.delerp(u.ticker, 0, 1)
                  , p = b.easeOutElastic(d, .75);
                let w = u.pos;
                if (s.bAEQ) {
                    u.posInterpTicker += e;
                    const y = b.clamp(u.posInterpTicker / s.NRB, 0, 1);
                    w = m.lerp(y, u.visualPosOld, u.pos)
                }
                const S = s.SlQA(w)
                  , g = s.zHRVv(u.imgScale * p);
                u.container.position.set(S.x, S.y),
                u.container.scale.set(g, g)
            }
        }
    }
    getClosestLoot() {
        return this.closestLoot
    }
}
if (window.self !== window.top) {
    let l = function(e) {
        let t = e.target;
        for (; t && t !== document.body; ) {
            const i = getComputedStyle(t).overflowY;
            if (i === "auto" || i === "scroll")
                return;
            t = t.parentElement
        }
        e.preventDefault()
    };
    window.addEventListener("wheel", l, {
        passive: !1
    }),
    window.addEventListener("touchmove", l, {
        passive: !1
    }),
    document.addEventListener("keydown", e => {
        if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(e.key)) {
            const i = e.target
              , r = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
            if (e.key === " " && (r.includes(i.tagName) || i.isContentEditable))
                return;
            e.preventDefault()
        }
    }
    )
}
function Na() {
    try {
        return window !== window.parent && document.referrer ? new URL(document.referrer).origin.includes("gamemonetize") : window.location.href.includes("gamemonetize")
    } catch (l) {
        return console.error("Error in isWithinGameMonetize:", l),
        window.location.href.includes("gamemonetize")
    }
}
function ja() {
    return new URLSearchParams(self.location.search).has("crazygames")
}
function Va() {
    try {
        return window !== window.parent && document.referrer ? new URL(document.referrer).origin.includes("poki") : !1
    } catch (l) {
        return console.error("Error in isWithinPoki:", l),
        !1
    }
}
class Ua {
    isPoki = Va();
    isCrazyGames = ja();
    isGameMonetize = Na();
    isAnySDK;
    respawns = [];
    adCallback = () => {}
    ;
    constructor() {
        this.isAnySDK = this.isPoki || this.isCrazyGames || this.isGameMonetize
    }
    async init() {
        this.isAnySDK ? (c("#btn-start-fullscreen").hide(),
        c("#left-column").hide(),
        c("#btn-discord-top-right").show(),
        c(".surviv-shirts").css("background-image", "url(./img/discord-promo.png)").html('<a href="https://discord.gg/6uRdCdkTPt" target="_blank"></a>')) : (c(".btn-kofi").show(),
        c(".surviv-shirts").css("background-image", "url(./img/survev-kofi.png)").html('<a href="https://ko-fi.com/survev" target="_blank"></a>')),
        this.isPoki ? await this.initPoki() : this.isGameMonetize ? this.initGameMonetize() : this.isCrazyGames && await this.initCrazyGames()
    }
    disableBloodParticles() {
        return this.isCrazyGames
    }
    gameLoadComplete() {
        this.isPoki && window.PokiSDK.gameLoadingFinished()
    }
    gamePlayStart() {
        this.isCrazyGames ? window.CrazyGames.SDK.game.gameplayStart() : this.isPoki && window.PokiSDK.gameplayStart()
    }
    gamePlayStop() {
        this.isCrazyGames ? window.CrazyGames.SDK.game.gameplayStop() : this.isPoki && window.PokiSDK.gameplayStop()
    }
    requestMidGameAd(e) {
        this.isPoki ? this.requestPokiMidGameAd(e) : this.isGameMonetize ? this.requestGameMonetizeMidgameAd(e) : this.isCrazyGames ? this.requestCrazyGamesMidGameAd(e) : e()
    }
    async getPlayerName() {
        if (this.isCrazyGames && window.CrazyGames.SDK.user.isUserAccountAvailable) {
            const e = await window.CrazyGames.SDK.user.getUser();
            if (e)
                return e.username
        }
    }
    hideInviteButton() {
        this.isCrazyGames && window.CrazyGames.SDK.game.hideInviteButton()
    }
    showInviteButton(e) {
        this.isCrazyGames && window.CrazyGames.SDK.game.showInviteButton({
            roomID: e
        })
    }
    supportsInviteLink() {
        return this.isCrazyGames || this.isPoki
    }
    async getInviteLink(e) {
        if (this.isCrazyGames)
            return window.CrazyGames.SDK.game.inviteLink({
                roomID: e
            });
        if (this.isPoki)
            return await window.PokiSDK.shareableURL({
                roomID: e
            })
    }
    getRoomInviteParam() {
        if (this.isCrazyGames)
            return window.CrazyGames.SDK.game.getInviteParam("roomID");
        if (this.isPoki)
            return window.PokiSDK.getURLParam("roomID")
    }
    async requestAd(e) {
        if (this.isCrazyGames) {
            const t = e.split("x").map(Number);
            await this.requestCrazyGamesBanner(`survev-io_${e}`, t[0], t[1])
        }
    }
    removeAllAds() {
        this.isCrazyGames && window.CrazyGames.SDK.banner.clearAllBanners()
    }
    requestCrazyGamesMidGameAd(e) {
        const t = {
            adFinished: e,
            adError: e,
            adStarted: () => console.log("Start midgame ad")
        };
        window.CrazyGames.SDK.ad.requestAd("midgame", t)
    }
    requestGameMonetizeMidgameAd(e) {
        window.sdk && window.sdk.showBanner ? (window.sdk.showBanner(),
        this.adCallback) : e()
    }
    requestPokiMidGameAd(e) {
        window.PokiSDK.commercialBreak( () => {}
        ).then( () => {
            e()
        }
        )
    }
    initGameMonetize() {
        const e = document.createElement("script");
        e.src = "https://api.gamemonetize.com/sdk.js",
        e.id = "gamemonetize-sdk",
        document.head.appendChild(e),
        window.SDK_OPTIONS = {
            gameId: void 0,
            onEvent: t => {
                switch (t.name) {
                case "SDK_GAME_START":
                    this.adCallback(),
                    this.adCallback = () => {}
                    ;
                    break;
                case "SDK_READY":
                    console.log("Successfully loaded GameMonetize SDK");
                    break
                }
            }
        }
    }
    async initPoki() {
        return new Promise(function(e) {
            const t = document.createElement("script");
            t.src = "https://game-cdn.poki.com/scripts/v2/poki-sdk.js",
            document.head.appendChild(t),
            t.addEventListener("load", async function() {
                window.PokiSDK.init().then( () => {
                    console.log("Poki SDK successfully initialized")
                }
                ).catch( () => {
                    console.log("Initialized, something went wrong, load you game anyway")
                }
                ),
                e()
            })
        }
        )
    }
    initCrazyGames() {
        return new Promise( (e, t) => {
            const i = document.createElement("script");
            i.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js",
            document.head.appendChild(i),
            i.addEventListener("load", async () => {
                await window.CrazyGames.SDK.init(),
                this.requestCrazyGamesBanner("survev-io_728x90", 728, 90),
                setInterval( () => {
                    const r = document.getElementById("start-menu-wrapper");
                    getComputedStyle(r).display != "none" && this.requestCrazyGamesBanner("survev-io_728x90", 728, 90)
                }
                , 6e4),
                e()
            }
            ),
            i.addEventListener("error", () => {
                console.log("CrazyGames SDK load error"),
                t()
            }
            )
        }
        )
    }
    async requestCrazyGamesBanner(e, t, i) {
        try {
            await window.CrazyGames.SDK.banner.requestBanner({
                id: e,
                width: t,
                height: i
            })
        } catch (r) {
            console.log("Banner request error", r)
        }
    }
}
const we = new Ua;
class n {
    constructor(e, t) {
        this.min = e,
        this.max = t
    }
    getRandom() {
        return x.random(this.min, this.max)
    }
}
function Be(l) {
    return l instanceof n ? l.getRandom() : l
}
function Wa(l) {
    return l instanceof Function ? l() : l
}
class Ki {
    active = !1;
    ticker = 0;
    def = {};
    sprite = new ae;
    hasParent = !1;
    pos;
    vel;
    rot;
    delay;
    life;
    drag;
    rotVel;
    rotDrag;
    scaleUseExp;
    scale;
    scaleEnd;
    scaleExp;
    alphaUseExp;
    alpha;
    alphaEnd;
    alphaExp;
    alphaIn;
    alphaInStart;
    alphaInEnd;
    emitterIdx;
    valueAdjust;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(1, 1),
        this.sprite.visible = !1
    }
    init(e, t, i, r, s, a, o, h, f, u) {
        const d = ki[t];
        this.active = !0,
        this.ticker = 0,
        h ? (this.hasParent = !0,
        h.addChild(this.sprite)) : (this.hasParent = !1,
        e.addPIXIObj(this.sprite, i, f)),
        this.pos = m.copy(r),
        this.vel = m.copy(s),
        this.rot = o,
        this.def = d,
        this.delay = 0,
        this.life = Be(d.life),
        this.drag = Be(d.drag),
        this.rotVel = Be(d.rotVel) * (Math.random() < .5 ? -1 : 1),
        this.rotDrag = Be(d.drag) / 2,
        this.scaleUseExp = d.scale.exp !== void 0,
        this.scale = Be(d.scale.start) * a,
        this.scaleEnd = this.scaleUseExp ? 0 : Be(d.scale?.end) * a,
        this.scaleExp = this.scaleUseExp ? d.scale.exp : 0,
        this.alphaUseExp = d.alpha.exp !== void 0,
        this.alpha = Be(d.alpha.start),
        this.alphaEnd = this.alphaUseExp ? 0 : Be(d.alpha?.end),
        this.alphaExp = this.alphaUseExp ? d.alpha.exp : 0,
        this.alphaIn = d.alphaIn !== void 0,
        this.alphaInStart = this.alphaIn ? Be(d.alphaIn?.start) : 0,
        this.alphaInEnd = this.alphaIn ? Be(d.alphaIn?.end) : 0,
        this.emitterIdx = -1;
        const p = Array.isArray(d.image) ? d.image[Math.floor(Math.random() * d.image.length)] : d.image;
        this.sprite.texture = J.from(p),
        this.sprite.visible = !1,
        this.valueAdjust = d.ignoreValueAdjust ? 1 : u,
        this.setColor(Wa(d.color)),
        we.disableBloodParticles() && t == "bloodSplat" ? this.sprite.renderable = !1 : this.sprite.renderable = !0
    }
    free() {
        this.active = !1,
        this.sprite.visible = !1
    }
    setDelay(e) {
        this.delay = e
    }
    setColor(e) {
        this.valueAdjust < 1 && (e = x.adjustValue(e, this.valueAdjust)),
        this.sprite.tint = e
    }
}
class qa {
    active = !1;
    enabled;
    type;
    pos;
    dir;
    scale;
    layer;
    duration;
    radius;
    ticker;
    nextSpawn;
    spawnCount;
    parent;
    alpha;
    rateMult;
    zOrd;
    init(e, t={}) {
        const i = Fr[e];
        this.active = !0,
        this.enabled = !0,
        this.type = e,
        this.pos = t.pos ? m.copy(t.pos) : m.create(0, 0),
        this.dir = t.dir ? m.copy(t.dir) : m.create(0, 1),
        this.scale = t.scale !== void 0 ? t.scale : 1,
        this.layer = t.layer || 0,
        this.duration = t.duration !== void 0 ? t.duration : Number.MAX_VALUE,
        this.radius = t.radius !== void 0 ? t.radius : i.radius,
        this.ticker = 0,
        this.nextSpawn = 0,
        this.spawnCount = 0,
        this.parent = t.parent || null,
        this.alpha = 1,
        this.rateMult = t.rateMult !== void 0 ? t.rateMult : 1;
        const r = ki[i.particle];
        this.zOrd = i.zOrd !== void 0 ? i.zOrd : r.zOrd !== void 0 ? r.zOrd : 20
    }
    free() {
        this.active = !1
    }
    stop() {
        this.duration = this.ticker
    }
}
class Or {
    constructor(e) {
        this.renderer = e;
        for (let t = 0; t < 256; t++)
            this.particles[t] = new Ki
    }
    particles = [];
    emitters = [];
    valueAdjust = 1;
    onMapLoad(e) {
        this.valueAdjust = e.getMapDef().biome.valueAdjust
    }
    Obb() {
        for (let e = 0; e < this.particles.length; e++) {
            const t = this.particles[e].sprite;
            t.parent?.removeChild(t),
            t.destroy({
                children: !0
            })
        }
    }
    addParticle(e, t, i, r, s, a, o, h) {
        let f = null;
        for (let u = 0; u < this.particles.length; u++)
            if (!this.particles[u].active) {
                f = this.particles[u];
                break
            }
        return f || (f = new Ki,
        this.particles.push(f)),
        s = s !== void 0 ? s : 1,
        a = a !== void 0 ? a : Math.random() * Math.PI * 2,
        h = h !== void 0 ? h : ki[e].zOrd || 20,
        f.init(this.renderer, e, t, i, r, s, a, o, h, this.valueAdjust),
        f
    }
    addRippleParticle(e, t, i) {
        const r = this.addParticle("waterRipple", t, e, m.create(0, 0), 1, 0, null);
        return r.setColor(i),
        r
    }
    addEmitter(e, t={}) {
        let i = null;
        for (let r = 0; r < this.emitters.length; r++)
            if (!this.emitters[r].active) {
                i = this.emitters[r];
                break
            }
        return i || (i = new qa,
        this.emitters.push(i)),
        i.init(e, t),
        i
    }
    nYcwKO(e, t, i) {
        for (let r = 0; r < this.emitters.length; r++) {
            const s = this.emitters[r];
            if (s.active && s.enabled) {
                s.ticker += e,
                s.nextSpawn -= e;
                const a = Fr[s.type];
                for (; s.nextSpawn <= 0 && s.spawnCount < a.maxCount; ) {
                    const o = s.scale * s.radius
                      , h = m.add(s.pos, x.randomPointInCircle(o))
                      , f = m.rotate(s.dir, (Math.random() - .5) * a.angle)
                      , u = m.mul(f, Be(a.speed))
                      , d = Be(a.rot)
                      , p = this.addParticle(a.particle, s.layer, h, u, s.scale, d, s.parent, s.zOrd);
                    p.emitterIdx = r;
                    let w = Be(a.rate);
                    if (a.maxRate) {
                        const S = b.easeInExpo(b.min(1, s.ticker / a.maxElapsed))
                          , g = Be(a.maxRate);
                        w = b.lerp(S, w, g)
                    }
                    s.nextSpawn += w * s.rateMult,
                    s.spawnCount++
                }
                s.ticker >= s.duration && s.free()
            }
        }
        for (let r = 0; r < this.particles.length; r++) {
            const s = this.particles[r];
            if (s.active && (s.ticker += e,
            s.ticker >= s.delay)) {
                const a = b.min((s.ticker - s.delay) / s.life, 1);
                s.vel = m.mul(s.vel, 1 / (1 + e * s.drag)),
                s.pos = m.add(s.pos, m.mul(s.vel, e)),
                s.rotVel *= 1 / (1 + e * s.rotDrag),
                s.rot += s.rotVel * e,
                s.scaleUseExp && (s.scale += e * s.scaleExp),
                s.alphaUseExp && (s.alpha = b.max(s.alpha + e * s.alphaExp, 0));
                const o = s.hasParent ? s.pos : t.SlQA(s.pos);
                let h = s.scaleUseExp ? s.scale : b.remap(a, s.def.scale.lerp?.min, s.def.scale.lerp?.max, s.scale, s.scaleEnd)
                  , f = s.alphaUseExp ? s.alpha : b.remap(a, s.def.alpha.lerp?.min, s.def.alpha.lerp?.max, s.alpha, s.alphaEnd);
                s.alphaIn && a < s.def.alphaIn?.lerp?.max && (f = b.remap(a, s.def.alphaIn?.lerp?.min, s.def.alphaIn?.lerp?.max, s.alphaInStart, s.alphaInEnd)),
                s.emitterIdx >= 0 && (f *= this.emitters[s.emitterIdx].alpha),
                s.hasParent || (h = t.zHRVv(h)),
                s.sprite.position.set(o.x, o.y),
                s.sprite.scale.set(h, h),
                s.sprite.rotation = s.rot,
                s.sprite.alpha = f,
                s.sprite.visible = !0,
                a >= 1 && s.free()
            }
        }
    }
}
const ki = {
    archwayBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.2,.35),
            end: new n(.08,.12),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.06, .84, x.random(.46, .48)))
        }
    },
    bloodSplat: {
        image: ["part-splat-01.img", "part-splat-02.img", "part-splat-03.img"],
        life: .5,
        drag: 1,
        rotVel: 0,
        scale: {
            start: .04,
            end: new n(.15,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(16711680, 1, x.random(.45, .8)))
        }
    },
    barrelPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.08,.18),
            end: new n(.07,.17),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.09, .8, x.random(.66, .68)))
        }
    },
    barrelChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.01, .02, x.random(.38, .41)))
        }
    },
    barrelBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.01, .02, x.random(.38, .41)))
        }
    },
    blackChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, .08, x.random(.16, .18)))
        }
    },
    blueChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.64, 1, x.random(.83, .85)))
        }
    },
    book: {
        image: ["part-book-01.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.09,.19),
            end: new n(.07,.17),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, .42, x.random(.72, .74)))
        }
    },
    bottleBrownChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 7878664
    },
    bottleBrownBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 7878664
    },
    bottleBlueChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 19544
    },
    bottleWhiteBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .75,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 16777215
    },
    bottleWhiteChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: .75,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 16777215
    },
    bottleBlueBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 19544
    },
    brickChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, .71, x.random(.32, .34)))
        }
    },
    clothBreak: {
        image: ["part-cloth-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.95, 1)))
        }
    },
    clothHit: {
        image: ["part-cloth-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.95, 1)))
        }
    },
    depositBoxGreyBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(7,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.25),
            end: new n(.12,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.36, .38)))
        }
    },
    depositBoxGoldBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(6,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.2,.35),
            end: new n(.18,.25),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.11, .84, x.random(.64, .66)))
        }
    },
    glassChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 8444415
    },
    glassPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 8444415
    },
    goldChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.11, .84, x.random(.88, .9)))
        }
    },
    pinkChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, .52, x.random(.98, 1)))
        }
    },
    ltblueChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.5, .65, x.random(.98, 1)))
        }
    },
    yellowChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.16, .73, x.random(.98, 1)))
        }
    },
    greenChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.4, .18, x.random(.5, .62)))
        }
    },
    greenPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.08,.16),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 3884335
    },
    greenhouseBreak: {
        image: ["part-spark-02.img", "part-plate-01.img", "part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 8444415
    },
    hutBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.1, .81, x.random(.78, .82)))
        }
    },
    leaf: {
        image: ["part-leaf-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.5, .75)))
        }
    },
    leafPrickly: {
        image: ["part-leaf-01sv.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.8, .85)))
        }
    },
    leafRiver: {
        image: ["part-leaf-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.5, .75)))
        }
    },
    lockerBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(7,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.2),
            end: new n(.12,.15),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.1, .23, x.random(.51, .53)))
        }
    },
    ltgreenChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.2, .42, x.random(.38, .42)))
        }
    },
    outhouseChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, .57, x.random(.4, .46)))
        }
    },
    outhouseBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, .79, x.random(.52, .54)))
        }
    },
    outhousePlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, .57, x.random(.4, .46)))
        }
    },
    potChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.06, .84, x.random(.73, .77)))
        }
    },
    potBreak: {
        image: ["part-pot-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.06, .84, x.random(.73, .77)))
        }
    },
    potatoChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.075, .43, x.random(.48, .5)))
        }
    },
    potatoBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.075, .43, x.random(.48, .5)))
        }
    },
    pumpkinChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.07, 1, x.random(.98, 1)))
        }
    },
    pumpkinBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, 1, x.random(.95, .97)))
        }
    },
    squashChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.31, .86, x.random(.35, .36)))
        }
    },
    squashBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.31, .86, x.random(.35, .36)))
        }
    },
    redChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.98, 1, x.random(.52, .54)))
        }
    },
    redBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.98, 1, x.random(.52, .54)))
        }
    },
    redPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.02, 1, x.random(.26, .28)))
        }
    },
    rockChip: {
        image: ["map-stone-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.5, .75)))
        }
    },
    rockBreak: {
        image: ["map-stone-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.5, .75)))
        }
    },
    rockEyeChip: {
        image: ["map-stone-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.03,.06),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 2696225
    },
    rockEyeBreak: {
        image: ["map-stone-01.img"],
        life: new n(.8,1),
        drag: new n(4,12),
        rotVel: 0,
        scale: {
            start: new n(.05,.1),
            end: new n(.03,.06),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 2696225
    },
    shackBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.1, .24, x.random(.38, .41)))
        }
    },
    shackGreenBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 5730406
    },
    tanChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.1, .35, x.random(.48, .52)))
        }
    },
    teahouseBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.6, .31, x.random(.42, .45)))
        }
    },
    teapavilionBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, .8, x.random(.6, .62)))
        }
    },
    toiletBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.97, 0, x.random(.95, .97)))
        }
    },
    toiletMetalBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(4,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.01, .02, x.random(.38, .41)))
        }
    },
    turkeyFeathersHit: {
        image: ["part-feather-01.img", "part-feather-02.img"],
        life: new n(1,1.5),
        drag: new n(1,10),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.12),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return 16777215
        }
    },
    turkeyFeathersDeath: {
        image: ["part-feather-01.img", "part-feather-02.img"],
        life: new n(1,1.5),
        drag: new n(1,10),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.25),
            end: new n(.12,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return 16777215
        }
    },
    whiteChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.97, 0, x.random(.95, .97)))
        }
    },
    whitePlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.97, 0, x.random(.95, .97)))
        }
    },
    windowBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 8444415
    },
    woodChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.05, 1, x.random(.35, .45)))
        }
    },
    woodLog: {
        image: ["part-log-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.05, 1, x.random(.35, .45)))
        }
    },
    woodPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.05, 1, x.random(.25, .35)))
        }
    },
    woodShard: {
        image: ["part-spark-02.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.06,.15),
            end: new n(.02,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.05, 1, x.random(.25, .35)))
        }
    },
    "9mm": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "9mm_cursed": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "762mm": {
        image: ["part-shell-02.img"],
        life: new n(.75,1),
        drag: new n(1.5,2.5),
        rotVel: new n(Math.PI * 2.5,Math.PI * 2.5),
        scale: {
            start: .075,
            end: .045,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.925,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "556mm": {
        image: ["part-shell-04.img"],
        life: new n(.75,1),
        drag: new n(1.5,2.5),
        rotVel: new n(Math.PI * 2.5,Math.PI * 2.5),
        scale: {
            start: .075,
            end: .045,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.925,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "12gauge": {
        image: ["part-shell-03.img"],
        life: new n(.5,.75),
        drag: new n(1,2),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .1,
            end: .05,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "50AE": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "308sub": {
        image: ["part-shell-05.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    flare: {
        image: ["part-shell-03.img"],
        life: new n(.5,.75),
        drag: new n(1,2),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .1,
            end: .05,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    "45acp": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .07,
            end: .04,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    potato_ammo: {
        image: ["part-wedge-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .07,
            end: .04,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 16777215
    },
    bugle_ammo: {
        image: ["part-note-02.img"],
        life: new n(1.25,1.3),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 1,Math.PI * 1),
        scale: {
            start: .1,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16767488
    },
    fragPin: {
        image: ["part-frag-pin-01.img"],
        life: new n(.5,.5),
        drag: new n(.9,1),
        rotVel: 0,
        scale: {
            start: .18,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16777215
    },
    fragLever: {
        image: ["part-frag-lever-01.img"],
        life: new n(.5,.5),
        drag: new n(.9,1),
        rotVel: Math.PI * 9,
        scale: {
            start: .18,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16777215
    },
    explosionBurst: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.065, 1, x.random(.98, .99)))
        }
    },
    explosionMIRV: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 1, x.random(.82, .84)))
        }
    },
    explosionSmoke: {
        image: ["part-smoke-01.img"],
        life: new n(2,3),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    explosionUSAS: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, 1, x.random(.98, .99)))
        }
    },
    explosionRounds: {
        image: ["part-frag-burst-03.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.08, .7, x.random(.75, .8)))
        }
    },
    explosionBomb: {
        image: ["part-frag-burst-02.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 16777215
    },
    explosionPotato: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 11363866
    },
    explosionPotatoSMG: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 12888074
    },
    airdropSmoke: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        zOrd: 499,
        life: new n(1,1.5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.67,.72),
            end: new n(.55,.61),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    airdropCrate01: {
        image: ["part-airdrop-01.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate01h: {
        image: ["part-airdrop-01h.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate01x: {
        image: ["part-airdrop-01x.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02: {
        image: ["part-airdrop-02.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02h: {
        image: ["part-airdrop-02h.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02x: {
        image: ["part-airdrop-02x.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate03: {
        image: ["part-airdrop-03.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate04: {
        image: ["part-airdrop-04.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell01a: {
        image: ["part-class-shell-01a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell01b: {
        image: ["part-class-shell-01b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell02a: {
        image: ["part-class-shell-02a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell02b: {
        image: ["part-class-shell-02b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell03a: {
        image: ["part-class-shell-03a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell03b: {
        image: ["part-class-shell-03b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    cabinSmoke: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        life: new n(3,3.25),
        drag: new n(.2,.22),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.6,.65),
            lerp: new n(0,1)
        },
        alpha: {
            start: .7,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: .7,
            lerp: new n(0,.1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.69, .695)))
        }
    },
    bathhouseSteam: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        life: new n(10,12),
        drag: new n(.04,.06),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.9,.95),
            lerp: new n(0,1)
        },
        alpha: {
            start: .5,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: .5,
            lerp: new n(0,.1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.99, .995)))
        }
    },
    bunkerBubbles: {
        image: ["player-ripple-01.img"],
        zOrd: 10,
        life: new n(2.25,2.5),
        drag: new n(1.85,2.15),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.65,.7),
            lerp: new n(0,1)
        },
        alpha: {
            start: .25,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.95, 1)))
        }
    },
    waterRipple: {
        image: ["player-ripple-01.img"],
        zOrd: 10,
        life: 1.75,
        drag: 0,
        rotVel: 0,
        scale: {
            start: .15,
            exp: .5
        },
        alpha: {
            start: 1,
            exp: -1
        },
        color: 11792639
    },
    leafAutumn: {
        image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    leafHalloween: {
        image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.5, .55)))
        },
        ignoreValueAdjust: !0
    },
    leafSpring: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    leafSummer: {
        image: ["part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.7, .95)))
        },
        ignoreValueAdjust: !0
    },
    leafPotato: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img", "part-potato-02.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    potato: {
        image: ["part-potato-02.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    snow: {
        image: ["part-snow-01.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    snowball_impact: {
        image: ["part-snow-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    potato_impact: {
        image: ["part-potato-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95)))
        }
    },
    potato_smg_impact: {
        image: ["part-potato-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16770437
    },
    heal_basic: {
        image: ["part-heal-basic.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_heart: {
        image: ["part-heal-heart.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_moon: {
        image: ["part-heal-moon.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_tomoe: {
        image: ["part-heal-tomoe.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: new n(Math.PI * .5,Math.PI * 1),
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(0, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_basic: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.3, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_star: {
        image: ["part-boost-star.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.3, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_naturalize: {
        image: ["part-boost-naturalize.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .35,Math.PI * .7),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.3, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_shuriken: {
        image: ["part-boost-shuriken.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.3, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    revive_basic: {
        image: ["part-heal-basic.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.83, 1, x.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    leafStim: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.37, 1, x.random(.95, 1)))
        }
    },
    takedownStim: {
        image: ["part-takedown-01.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: 13107200
    },
    inspireStim: {
        image: ["part-note-01.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return x.rgbToInt(x.hsvToRgb(.13, 1, x.random(.98, 1)))
        }
    },
    xp_common: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? x.rgbToInt(x.hsvToRgb(.12, .97, x.random(.95, 1))) : x.rgbToInt(x.hsvToRgb(.16, 1, x.random(.95, 1)))
        },
        ignoreValueAdjust: !0
    },
    xp_rare: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? x.rgbToInt(x.hsvToRgb(.05, .94, x.random(.85, .88))) : x.rgbToInt(x.hsvToRgb(.06, .95, x.random(.95, 1)))
        },
        ignoreValueAdjust: !0
    },
    xp_mythic: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? x.rgbToInt(x.hsvToRgb(0, .96, x.random(.91, .94))) : x.rgbToInt(x.hsvToRgb(.03, .95, x.random(.92, .95)))
        },
        ignoreValueAdjust: !0
    }
}
  , Fr = {
    smoke_barrel: {
        particle: "explosionSmoke",
        rate: new n(.2,.3),
        radius: 0,
        speed: new n(2,3),
        angle: Math.PI * .1,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    cabin_smoke_parent: {
        particle: "cabinSmoke",
        rate: new n(.72,.83),
        radius: 0,
        speed: new n(64,96),
        angle: Math.PI * .1,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    bathhouse_steam: {
        particle: "bathhouseSteam",
        rate: new n(2,3),
        radius: 1,
        speed: new n(1.5,2),
        angle: Math.PI * .1,
        maxCount: Number.MAX_VALUE
    },
    bunker_bubbles_01: {
        particle: "bunkerBubbles",
        rate: new n(.3,.325),
        radius: 0,
        speed: new n(1.6,1.8),
        angle: Math.PI * -2.2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    bunker_bubbles_02: {
        particle: "bunkerBubbles",
        rate: new n(.4,.425),
        radius: 0,
        speed: new n(1.6,1.8),
        angle: Math.PI * -2.2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    falling_leaf: {
        particle: "leafAutumn",
        rate: new n(.08,.12),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_halloween: {
        particle: "leafHalloween",
        rate: new n(.08,.12),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_spring: {
        particle: "leafSpring",
        rate: new n(.1,.14),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_summer: {
        particle: "leafSummer",
        rate: new n(.18,.24),
        radius: 120,
        speed: new n(1.4,2.4),
        angle: Math.PI * .2,
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_potato: {
        particle: "leafPotato",
        rate: new n(.1,.14),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_potato: {
        particle: "potato",
        rate: new n(.2,.24),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_snow_fast: {
        particle: "snow",
        rate: new n(.12,.17),
        maxRate: new n(.05,.07),
        maxElapsed: 240,
        radius: 70,
        speed: new n(1,1.5),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_snow_slow: {
        particle: "snow",
        rate: new n(.08,.12),
        radius: 70,
        speed: new n(1,1.5),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    heal_basic: {
        particle: "heal_basic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_heart: {
        particle: "heal_heart",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_moon: {
        particle: "heal_moon",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_tomoe: {
        particle: "heal_tomoe",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    boost_basic: {
        particle: "boost_basic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_star: {
        particle: "boost_star",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_naturalize: {
        particle: "boost_naturalize",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_shuriken: {
        particle: "boost_shuriken",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    revive_basic: {
        particle: "revive_basic",
        rate: new n(.5,.55),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    windwalk: {
        particle: "leafStim",
        rate: new n(.1,.12),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    takedown: {
        particle: "takedownStim",
        rate: new n(.1,.12),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    inspire: {
        particle: "inspireStim",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_common: {
        particle: "xp_common",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_rare: {
        particle: "xp_rare",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_mythic: {
        particle: "xp_mythic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    }
}
  , Ha = 1.25
  , gi = .75
  , Ga = .75
  , Nr = 2;
class Qa {
    active = !1;
    sprite = new ae;
    soundRangeMult;
    id;
    pos;
    planeDir;
    actionComplete;
    dirty;
    soundInstance;
    soundUpdateThrottle;
    alpha;
    renderAlpha;
    spriteUpdateTime;
    type;
    config;
    rad;
    planeSound;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    vusF(e, t) {
        switch (this.id = e.id,
        this.pos = m.copy(e.pos),
        this.planeDir = m.copy(e.planeDir),
        this.actionComplete = e.actionComplete,
        this.active = !0,
        this.dirty = !1,
        this.soundInstance = null,
        this.soundUpdateThrottle = 0,
        this.alpha = gi,
        this.renderAlpha = 1,
        this.spriteUpdateTime = 0,
        this.type = e.action,
        this.config = this.type == O.Plane.Airdrop ? O.airdrop : O.airstrike,
        this.rad = this.config.planeRad,
        this.type) {
        case O.Plane.Airdrop:
            this.sprite.texture = J.from(t.getMapDef().biome.airdrop.planeImg),
            this.planeSound = t.getMapDef().biome.airdrop.planeSound;
            break;
        case O.Plane.Airstrike:
            this.sprite.texture = J.from("map-plane-02.img"),
            this.planeSound = "fighter_01"
        }
        this.sprite.visible = !0,
        this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y)
    }
    Obb(e) {
        this.spriteUpdateTime >= Nr && (this.soundInstance && (e.stopSound(this.soundInstance),
        this.soundInstance = null),
        this.sprite.visible = !1,
        this.active = !1)
    }
}
class $a {
    constructor(e) {
        this.container = e,
        e.addChild(this.gfx)
    }
    active = !1;
    pos = m.create(0, 0);
    rad = 0;
    duration = 0;
    ticker = 0;
    gfx = new Me;
    renderPos;
    renderRad;
    vusF(e, t, i) {
        this.active = !0,
        this.pos = m.copy(e),
        this.rad = t,
        this.duration = i,
        this.ticker = 0,
        this.renderPos = m.create(0, 0),
        this.renderRad = 0,
        this.gfx.visible = !0
    }
    nYcwKO(e) {
        this.ticker += e,
        this.gfx.visible = !0,
        this.ticker >= this.duration && (this.gfx.visible = !1,
        this.active = !1)
    }
    render(e, t, i) {
        const r = e.getMapPosFromWorldPos(this.pos, t)
          , s = e.getMapPosFromWorldPos(m.add(this.pos, m.create(this.rad, 0)), t)
          , a = m.length(m.sub(s, r))
          , o = !m.eq(this.renderPos, r, 1e-4)
          , h = !b.eqAbs(this.renderRad, a, 1e-4);
        o && (this.renderPos = m.copy(r)),
        h && (this.renderRad = a),
        o && this.gfx.position.set(this.renderPos.x, this.renderPos.y),
        h && (this.gfx.clear(),
        this.gfx.lineStyle(1.5, 15400704),
        this.gfx.beginFill(15400704, .2),
        this.gfx.drawCircle(0, 0, this.renderRad),
        this.gfx.endFill());
        const f = b.smoothstep(this.ticker, 0, .5) * (1 - b.smoothstep(this.ticker, this.duration - .5, this.duration));
        this.gfx.alpha = f
    }
}
class Ja {
    constructor(e) {
        this.audioManager = e
    }
    planes = [];
    airstrikeZones = [];
    airstrikeZoneContainer = new se;
    Obb() {
        for (let e = 0; e < this.planes.length; e++)
            this.planes[e].Obb(this.audioManager)
    }
    updatePlanes(e, t) {
        for (let i = 0; i < this.planes.length; i++)
            this.planes[i].dirty = !0;
        for (let i = 0; i < e.length; i++) {
            const r = e[i];
            let s = null;
            for (let a = 0; a < this.planes.length; a++) {
                const o = this.planes[a];
                if (o.active && o.id == r.id) {
                    s = o;
                    break
                }
            }
            s ||= this.addPlane(r, t),
            s.dirty = !1,
            s.actionComplete = r.actionComplete
        }
        for (let i = 0; i < this.planes.length; i++) {
            const r = this.planes[i];
            r.active && r.dirty && r.Obb(this.audioManager)
        }
    }
    addPlane(e, t) {
        let i = null;
        for (let r = 0; r < this.planes.length; r++)
            if (!this.planes[r].active) {
                i = this.planes[r];
                break
            }
        return i || (i = new Qa,
        this.planes.push(i)),
        i.vusF(e, t),
        i
    }
    createAirstrikeZone(e) {
        let t = null;
        for (let i = 0; i < this.airstrikeZones.length; i++)
            if (!this.airstrikeZones[i]) {
                t = this.airstrikeZones[i];
                break
            }
        return t || (t = new $a(this.airstrikeZoneContainer),
        this.airstrikeZones.push(t)),
        t.vusF(e.pos, e.rad, e.duration),
        t
    }
    nYcwKO(e, t, i, r, s) {
        for (let a = 0; a < this.planes.length; a++) {
            const o = this.planes[a];
            if (o.active) {
                let h = 0;
                if ((x.sameLayer(h, i.layer) || i.layer & 2) && (!(i.layer & 2) || !r.insideStructureMask(H.createCircle(o.pos, 1))) && (h |= 2),
                o.pos = m.add(o.pos, m.mul(o.planeDir, e * o.config.planeVel)),
                o.actionComplete && (o.spriteUpdateTime = Math.min(o.spriteUpdateTime + e, Nr),
                o.rad = b.lerp(o.spriteUpdateTime, o.config.planeRad, o.config.planeRad * Ha),
                o.alpha = b.lerp(o.spriteUpdateTime, gi, gi * Ga),
                o.soundRangeMult = b.max(0, b.lerp(o.spriteUpdateTime, o.config.soundRangeMult, o.config.soundRangeMult - o.config.soundRangeDelta))),
                o.soundInstance)
                    o.soundUpdateThrottle < 0 ? (this.audioManager.updateSound(o.soundInstance, "sfx", o.pos, {
                        layer: h,
                        rangeMult: o.config.soundRangeMult,
                        ignoreMinAllowable: !0,
                        fallOff: o.config.fallOff
                    }),
                    o.soundUpdateThrottle = .1) : o.soundUpdateThrottle -= e;
                else {
                    const w = m.length(m.sub(i.HiVuim, o.pos))
                      , S = o.config.soundRangeMax * o.config.soundRangeMult;
                    let g = 0;
                    if (o.type == O.Plane.Airstrike) {
                        const v = b.max(150, w);
                        g = (1 - b.clamp(b.max(0, v) / 800, 0, 1)) * 2.25
                    }
                    w < S && (o.soundInstance = this.audioManager.playSound(o.planeSound, {
                        channel: "sfx",
                        soundPos: o.pos,
                        layer: h,
                        loop: !0,
                        rangeMult: 2.5,
                        ignoreMinAllowable: !0,
                        fallOff: o.config.fallOff,
                        offset: g
                    }))
                }
                s.addPIXIObj(o.sprite, h, 1501, o.id);
                const f = t.SlQA(o.pos)
                  , u = t.zHRVv(o.rad / t.hPMoEE)
                  , d = r.insideBuildingCeiling(H.createCircle(i.HiVuim, .01), !0);
                let p = o.alpha;
                i.layer == 1 ? p = 0 : (d || i.layer & 1) && (p = .15),
                o.renderAlpha = b.lerp(e * 3, o.renderAlpha, p),
                o.sprite.position.set(f.x, f.y),
                o.sprite.scale.set(u, u),
                o.sprite.tint = 16776960,
                o.sprite.alpha = o.renderAlpha,
                o.sprite.visible = !0
            }
        }
        for (let a = 0; a < this.airstrikeZones.length; a++) {
            const o = this.airstrikeZones[a];
            o.active && o.nYcwKO(e)
        }
    }
    renderAirstrikeZones(e, t, i) {
        for (let r = 0; r < this.airstrikeZones.length; r++) {
            const s = this.airstrikeZones[r];
            s.active && s.render(e, t, i)
        }
    }
}
function q(l, e) {
    return {
        time: l,
        bones: e
    }
}
function ie(l, e, t) {
    return {
        time: l,
        fn: e,
        args: t
    }
}
class D {
    constructor(e=m.create(0, 0), t=0, i=m.create(0, 0)) {
        this.pivot = e,
        this.rot = t,
        this.pos = i,
        this.pivot = m.copy(e),
        this.rot = 0,
        this.pos = m.copy(i)
    }
    copy(e) {
        m.set(this.pivot, e.pivot),
        this.rot = e.rot,
        m.set(this.pos, e.pos)
    }
    rotate(e) {
        return this.rot = e,
        this
    }
    offset(e) {
        return this.pos = m.copy(e),
        this
    }
    static identity = new D(m.create(0, 0));
    static lerp(e, t, i) {
        const r = new D;
        return r.pos = m.lerp(e, t.pos, i.pos),
        r.rot = b.lerp(e, t.rot, i.rot),
        r.pivot = m.lerp(e, t.pivot, i.pivot),
        r
    }
}
var it = (l => (l[l.HandL = 0] = "HandL",
l[l.HandR = 1] = "HandR",
l[l.FootL = 2] = "FootL",
l[l.FootR = 3] = "FootR",
l))(it || {});
Ut(Object.keys(it).length % 2 == 0);
const Yi = {
    fists: {
        0: new D(m.create(14, -12.25)),
        1: new D(m.create(14, 12.25))
    },
    slash: {
        0: new D(m.create(18, -8.25)),
        1: new D(m.create(6, 20.25))
    },
    meleeTwoHanded: {
        0: new D(m.create(10.5, -14.25)),
        1: new D(m.create(18, 6.25))
    },
    meleeKatana: {
        0: new D(m.create(8.5, 13.25)),
        1: new D(m.create(-3, 17.75))
    },
    meleeNaginata: {
        0: new D(m.create(19, -7.25)),
        1: new D(m.create(8.5, 24.25))
    },
    machete: {
        0: new D(m.create(14, -12.25)),
        1: new D(m.create(1, 17.75))
    },
    rifle: {
        0: new D(m.create(28, 5.25)),
        1: new D(m.create(14, 1.75))
    },
    dualRifle: {
        0: new D(m.create(5.75, -16)),
        1: new D(m.create(5.75, 16))
    },
    bullpup: {
        0: new D(m.create(28, 5.25)),
        1: new D(m.create(24, 1.75))
    },
    launcher: {
        0: new D(m.create(20, 10)),
        1: new D(m.create(2, 22))
    },
    pistol: {
        0: new D(m.create(14, 1.75)),
        1: new D(m.create(14, 1.75))
    },
    dualPistol: {
        0: new D(m.create(15.75, -8.75)),
        1: new D(m.create(15.75, 8.75))
    },
    throwable: {
        0: new D(m.create(15.75, -9.625)),
        1: new D(m.create(15.75, 9.625))
    },
    downed: {
        0: new D(m.create(14, -12.25)),
        1: new D(m.create(14, 12.25)),
        2: new D(m.create(-15.75, -9)),
        3: new D(m.create(-15.75, 9))
    }
}
  , $ = U
  , Xa = {
    none: {
        keyframes: [],
        effects: []
    },
    fists: {
        keyframes: [q(0, {
            1: new D(m.create(14, 12.25))
        }), q($.fists.attack.damageTimes[0], {
            1: new D(m.create(29.75, 1.75))
        }), q($.fists.attack.cooldownTime, {
            1: new D(m.create(14, 12.25))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cut: {
        keyframes: [q(0, {
            1: new D(m.create(14, 12.25))
        }), q($.fists.attack.damageTimes[0] * .25, {
            1: new D(m.create(14, 12.25)).rotate(-Math.PI * .35)
        }), q($.fists.attack.damageTimes[0] * 1.25, {
            1: new D(m.create(14, 12.25)).rotate(Math.PI * .35)
        }), q($.fists.attack.cooldownTime, {
            1: new D(m.create(14, 12.25))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cutReverse: {
        keyframes: [q(0, {
            1: new D(m.create(1, 17.75))
        }), q($.fists.attack.damageTimes[0] * .4, {
            1: new D(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), q($.fists.attack.damageTimes[0] * 1.4, {
            1: new D(m.create(25, 6.25)).rotate(-Math.PI * .5)
        }), q($.fists.attack.cooldownTime, {
            1: new D(m.create(1, 17.75))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    thrust: {
        keyframes: [q(0, {
            1: new D(m.create(14, 12.25))
        }), q($.fists.attack.damageTimes[0] * .4, {
            1: new D(m.create(5, 12.25)).rotate(Math.PI * .1)
        }), q($.fists.attack.damageTimes[0] * 1.4, {
            1: new D(m.create(25, 6.25)).rotate(-Math.PI * 0)
        }), q($.fists.attack.cooldownTime, {
            1: new D(m.create(14, 12.25))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    slash: {
        keyframes: [q(0, {
            0: new D(m.create(18, -8.25)),
            1: new D(m.create(6, 20.25))
        }), q($.fists.attack.damageTimes[0], {
            0: new D(m.create(6, -22.25)),
            1: new D(m.create(6, 20.25)).rotate(-Math.PI * .6)
        }), q($.fists.attack.cooldownTime, {
            0: new D(m.create(18, -8.25)),
            1: new D(m.create(6, 20.25)).rotate(0)
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    hook: {
        keyframes: [q(0, {
            1: new D(m.create(14, 12.25))
        }), q($.hook.attack.damageTimes[0] * .25, {
            1: new D(m.create(14, 12.25)).rotate(Math.PI * .1)
        }), q($.hook.attack.damageTimes[0], {
            1: new D(m.create(24, 1.75))
        }), q($.hook.attack.damageTimes[0] + .05, {
            1: new D(m.create(14, 12.25)).rotate(Math.PI * -.3)
        }), q($.hook.attack.damageTimes[0] + .1, {
            1: new D(m.create(14, 12.25))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.hook.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    pan: {
        keyframes: [q(0, {
            1: new D(m.create(14, 12.25))
        }), q(.15, {
            1: new D(m.create(22, -8.25)).rotate(-Math.PI * .2)
        }), q(.25, {
            1: new D(m.create(28, -8.25)).rotate(Math.PI * .5)
        }), q(.55, {
            1: new D(m.create(14, 12.25))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.pan.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    axeSwing: {
        keyframes: [q(0, {
            0: new D(m.create(10.5, -14.25)),
            1: new D(m.create(18, 6.25))
        }), q($.woodaxe.attack.damageTimes[0] * .4, {
            0: new D(m.create(9, -14.25)).rotate(Math.PI * .4),
            1: new D(m.create(18, 6.25)).rotate(Math.PI * .4)
        }), q($.woodaxe.attack.damageTimes[0], {
            0: new D(m.create(9, -14.25)).rotate(-Math.PI * .4),
            1: new D(m.create(18, 6.25)).rotate(-Math.PI * .4)
        }), q($.woodaxe.attack.cooldownTime, {
            0: new D(m.create(10.5, -14.25)),
            1: new D(m.create(18, 6.25))
        })],
        effects: [ie($.woodaxe.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), ie($.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    hammerSwing: {
        keyframes: [q(0, {
            0: new D(m.create(10.5, -14.25)),
            1: new D(m.create(18, 6.25))
        }), q($.stonehammer.attack.damageTimes[0] * .4, {
            0: new D(m.create(9, -14.25)).rotate(Math.PI * .4),
            1: new D(m.create(18, 6.25)).rotate(Math.PI * .4)
        }), q($.stonehammer.attack.damageTimes[0], {
            0: new D(m.create(9, -14.25)).rotate(-Math.PI * .4),
            1: new D(m.create(18, 6.25)).rotate(-Math.PI * .4)
        }), q($.stonehammer.attack.cooldownTime, {
            0: new D(m.create(10.5, -14.25)),
            1: new D(m.create(18, 6.25))
        })],
        effects: [ie($.stonehammer.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), ie($.stonehammer.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    katanaSwing: {
        keyframes: [q(0, {
            0: new D(m.create(8.5, 13.25)),
            1: new D(m.create(-3, 17.75))
        }), q($.katana.attack.damageTimes[0] * .3, {
            0: new D(m.create(8.5, 13.25)).rotate(Math.PI * .2),
            1: new D(m.create(-3, 17.75)).rotate(Math.PI * .2)
        }), q($.katana.attack.damageTimes[0] * .9, {
            0: new D(m.create(8.5, 13.25)).rotate(-Math.PI * 1.2),
            1: new D(m.create(-3, 17.75)).rotate(-Math.PI * 1.2)
        }), q($.katana.attack.cooldownTime, {
            0: new D(m.create(8.5, 13.25)),
            1: new D(m.create(-3, 17.75))
        })],
        effects: [ie($.katana.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), ie($.katana.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    naginataSwing: {
        keyframes: [q(0, {
            0: new D(m.create(19, -7.25)),
            1: new D(m.create(8.5, 24.25))
        }), q($.naginata.attack.damageTimes[0] * .3, {
            0: new D(m.create(19, -7.25)).rotate(Math.PI * .3),
            1: new D(m.create(8.5, 24.25)).rotate(Math.PI * .3)
        }), q($.naginata.attack.damageTimes[0] * .9, {
            0: new D(m.create(19, -7.25)).rotate(-Math.PI * .85),
            1: new D(m.create(8.5, 24.25)).rotate(-Math.PI * .85)
        }), q($.naginata.attack.cooldownTime, {
            0: new D(m.create(19, -7.25)),
            1: new D(m.create(8.5, 24.25))
        })],
        effects: [ie($.naginata.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), ie($.naginata.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    sawSwing: {
        keyframes: [q(0, {
            1: new D(m.create(1, 17.75))
        }), q($.saw.attack.damageTimes[0] * .4, {
            1: new D(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), q($.saw.attack.damageTimes[0], {
            1: new D(m.create(25, 6.25)).rotate(-Math.PI * .3)
        }), q($.saw.attack.damageTimes[1] - .1, {
            1: new D(m.create(25, 17.75)).rotate(-Math.PI * .25)
        }), q($.saw.attack.damageTimes[1] * .6, {
            1: new D(m.create(-36, 7.75)).rotate(-Math.PI * .25)
        }), q($.saw.attack.damageTimes[1] + .2, {
            1: new D(m.create(1, 17.75))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie(.4, "animPlaySound", {
            sound: "swing"
        }), ie($.saw.attack.damageTimes[0], "animMeleeCollision", {}), ie($.saw.attack.damageTimes[1], "animMeleeCollision", {
            playerHit: "playerHit2"
        })]
    },
    cutReverseShort: {
        keyframes: [q(0, {
            1: new D(m.create(1, 17.75))
        }), q($.saw.attack.damageTimes[0] * .4, {
            1: new D(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), q($.saw.attack.damageTimes[0], {
            1: new D(m.create(25, 6.25)).rotate(-Math.PI * .3)
        }), q($.fists.attack.cooldownTime, {
            1: new D(m.create(14, 17.75))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "swing"
        }), ie($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cook: {
        keyframes: [q(0, {
            0: new D(m.create(15.75, -9.625)),
            1: new D(m.create(15.75, 9.625))
        }), q(.1, {
            0: new D(m.create(14, -1.75)),
            1: new D(m.create(14, 1.75))
        }), q(.3, {
            0: new D(m.create(14, -1.75)),
            1: new D(m.create(14, 1.75))
        }), q(.4, {
            0: new D(m.create(22.75, -1.75)),
            1: new D(m.create(1.75, 14))
        }), q(99999, {
            0: new D(m.create(22.75, -1.75)),
            1: new D(m.create(1.75, 14))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "pullPin"
        }), ie(.1, "animSetThrowableState", {
            state: "cook"
        })]
    },
    throw: {
        keyframes: [q(0, {
            0: new D(m.create(22.75, -1.75)),
            1: new D(m.create(1.75, 14.175))
        }), q(.15, {
            0: new D(m.create(5.25, -15.75)),
            1: new D(m.create(29.75, 1.75))
        }), q(.15 + O.player.throwTime, {
            0: new D(m.create(15.75, -9.625)),
            1: new D(m.create(15.75, 9.625))
        })],
        effects: [ie(0, "animPlaySound", {
            sound: "throwing"
        }), ie(0, "animSetThrowableState", {
            state: "throwing"
        }), ie(0, "animThrowableParticles", {})]
    },
    crawl_forward: {
        keyframes: [q(0, {
            0: new D(m.create(14, -12.25)),
            2: new D(m.create(-15.75, -9))
        }), q(O.player.crawlTime * .33, {
            0: new D(m.create(19.25, -10.5)),
            2: new D(m.create(-20.25, -9))
        }), q(O.player.crawlTime * .66, {
            0: new D(m.create(5.25, -15.75)),
            2: new D(m.create(-11.25, -9))
        }), q(O.player.crawlTime * 1, {
            0: new D(m.create(14, -12.25)),
            2: new D(m.create(-15.75, -9))
        })],
        effects: []
    },
    crawl_backward: {
        keyframes: [q(0, {
            0: new D(m.create(14, -12.25)),
            2: new D(m.create(-15.75, -9))
        }), q(O.player.crawlTime * .33, {
            0: new D(m.create(5.25, -15.75)),
            2: new D(m.create(-11.25, -9))
        }), q(O.player.crawlTime * .66, {
            0: new D(m.create(19.25, -10.5)),
            2: new D(m.create(-20.25, -9))
        }), q(O.player.crawlTime * 1, {
            0: new D(m.create(14, -12.25)),
            2: new D(m.create(-15.75, -9))
        })],
        effects: []
    },
    revive: {
        keyframes: [q(0, {
            0: new D(m.create(14, -12.25)),
            1: new D(m.create(14, 12.25))
        }), q(.2, {
            0: new D(m.create(24.5, -8.75)),
            1: new D(m.create(5.25, 21))
        }), q(.2 + O.player.reviveDuration, {
            0: new D(m.create(24.5, -8.75)),
            1: new D(m.create(5.25, 21))
        })],
        effects: []
    }
}
  , jr = {
    "proj-frag-nopin-01.img": "proj-frag-nopin-02.img",
    "proj-frag-nopin-nolever-01.img": "proj-frag-nopin-nolever-02.img",
    "proj-frag-pin-01.img": "proj-frag-pin-02.img",
    "proj-mirv-mini-01.img": "proj-mirv-mini-02.img"
};
class Ka {
    __id;
    __type;
    active;
    isNew;
    container = new se;
    trail = ae.from("player-bullet-trail-02.img");
    sprite = new ae;
    strobeSprite = null;
    layer;
    type;
    rad;
    pos;
    posOld;
    visualPosOld;
    posInterpTicker;
    posZ;
    posZOld;
    dir;
    imgScale;
    rot;
    rotVel;
    rotDrag;
    velZ;
    grounded;
    inWater;
    lastSoundObjId;
    playHitSfx;
    alwaysRenderOntop;
    strobeScale;
    strobeScaleMax;
    strobeTicker;
    strobeDir;
    strobeSpeed;
    constructor() {
        this.container.visible = !1,
        this.trail.anchor.set(1, .5),
        this.trail.scale.set(1, 1),
        this.trail.visible = !1,
        this.container.addChild(this.trail),
        this.sprite.anchor.set(.5, .5),
        this.container.addChild(this.sprite)
    }
    vusF() {
        this.visualPosOld = m.create(0, 0),
        this.posInterpTicker = 0
    }
    Obb() {
        this.container.visible = !1,
        this.strobeSprite && (this.strobeSprite.visible = !1)
    }
    HCidV(e, t, i, r) {
        if (t) {
            const s = U[e.type];
            this.layer = e.layer,
            this.type = e.type,
            this.rad = s.rad * .5
        }
        if (this.posOld = i ? m.copy(e.pos) : m.copy(this.pos),
        this.posZOld = i ? e.posZ : this.posZ,
        this.pos = m.copy(e.pos),
        m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(this.posOld),
        this.posInterpTicker = 0),
        this.posZ = e.posZ,
        this.dir = m.copy(e.dir),
        i) {
            const s = U[e.type]
              , a = s.worldImg;
            this.imgScale = a.scale,
            this.rot = 0,
            this.rotVel = s.throwPhysics.spinVel,
            s.throwPhysics.randomizeSpinDir && Math.random() < .5 && (this.rotVel *= -1),
            this.rotDrag = s.throwPhysics.spinDrag * x.random(1, 2),
            this.velZ = 0,
            this.grounded = !1,
            this.inWater = !1,
            this.lastSoundObjId = 0,
            this.playHitSfx = !s.explodeOnImpact,
            this.alwaysRenderOntop = !1;
            let o = !0;
            if (this.type == "bomb_iron") {
                this.alwaysRenderOntop = !0;
                const f = H.createCircle(this.pos, .5);
                r.map.insideBuildingCeiling(f, !0) && (o = !1)
            }
            let h = a.sprite;
            r.map.mapDef.gameMode.spookyKillSounds && (h = jr[h] || h),
            this.sprite.texture = J.from(h),
            this.sprite.tint = a.tint,
            this.sprite.alpha = 1,
            this.container.visible = o,
            e.type == "strobe" && (this.strobeSprite || (this.strobeSprite = new ae,
            this.strobeSprite.texture = J.from("part-strobe-01.img"),
            this.strobeSprite.anchor.set(.5, .5),
            this.container.addChild(this.strobeSprite)),
            this.strobeSprite.scale.set(0, 0),
            this.strobeSprite.visible = !0,
            this.strobeScale = 0,
            this.strobeScaleMax = 12,
            this.strobeTicker = 0,
            this.strobeDir = 1,
            this.strobeSpeed = 1.25)
        }
    }
}
const Ya = {
    grass: "frag_grass",
    sand: "frag_sand",
    water: "frag_water"
};
class Za {
    projectilePool = new Ne(Ka);
    nYcwKO(e, t, i, r, s, a, o) {
        const h = this.projectilePool.yQIfil();
        for (let f = 0; f < h.length; f++) {
            const u = h[f];
            if (u.active) {
                const d = U[u.type];
                let p = u.rotDrag;
                u.inWater && (p *= 3),
                u.rotVel *= 1 / (1 + e * p),
                u.rot += u.rotVel * e;
                const w = {
                    obj: null,
                    pen: 0
                }
                  , S = {
                    obj: null,
                    pen: 0
                }
                  , g = H.createCircle(u.pos, u.rad)
                  , y = s.oymOX.yQIfil();
                for (let V = 0; V < y.length; V++) {
                    const E = y[V];
                    if (E.active && !E.dead && x.sameLayer(E.layer, u.layer)) {
                        const R = H.intersect(E.collider, g);
                        if (R) {
                            const G = E.height > u.posZ ? w : S;
                            R.pen > G.pen && (!G.obj || G.obj.height <= E.height) && (G.obj = E,
                            G.pen = R.pen)
                        }
                    }
                }
                const M = m.div(m.sub(u.pos, u.posOld), e)
                  , I = m.length(M);
                if (w.obj && w.obj.__id != u.lastSoundObjId && I > 7.5 && (u.lastSoundObjId = w.obj.__id,
                u.playHitSfx)) {
                    const V = m.mul(m.normalizeSafe(M, m.create(1, 0)), -1)
                      , E = he[w.obj.type];
                    Si(E.hitParticle, E.sound.bullet, u.pos, V, u.layer, t, i)
                }
                const v = s.getGroundSurface(u.pos, u.layer);
                u.posZ <= .01 && (!u.inWater && v.type == "water" && t.addRippleParticle(u.pos, u.layer, v.data.rippleColor),
                u.inWater = v.type == "water");
                const k = u.velZ;
                if (u.velZ = (u.posZ - u.posZOld) / e,
                !u.isNew && !u.grounded && u.velZ >= 0 && k < 0) {
                    const V = {
                        fn: "playGroup",
                        channel: "hits",
                        name: ""
                    };
                    if (S.obj) {
                        if (u.lastSoundObjId != S.obj.__id) {
                            u.lastSoundObjId = S.obj.__id;
                            const E = he[S.obj.type];
                            V.name = E.sound.bullet
                        }
                    } else
                        u.grounded = !0,
                        V.name = Ya[v.type],
                        V.name === void 0 && (V.name = `footstep_${v.type}`,
                        V.fn = "playGroup",
                        V.channel = "sfx");
                    V.name && u.playHitSfx && i[V.fn](V.name, {
                        channel: V.channel,
                        soundPos: u.pos,
                        layer: u.layer,
                        filter: "muffled"
                    })
                }
                if (u.type == "strobe" && u.strobeSprite && (u.strobeTicker = b.clamp(u.strobeTicker + e * u.strobeDir * u.strobeSpeed, 0, 1),
                u.strobeScale = b.easeInExpo(u.strobeTicker) * u.strobeScaleMax,
                u.strobeSprite.scale.set(u.strobeScale, u.strobeScale),
                (u.strobeScale >= u.strobeScaleMax || u.strobeTicker <= 0) && (u.strobeDir *= -1)),
                u.sprite.rotation = u.rot,
                u.sprite.alpha = u.inWater ? .3 : 1,
                d.trail) {
                    const V = m.length(M)
                      , E = b.remap(V, d.throwPhysics.speed * .25, d.throwPhysics.speed * 1, 0, 1) * b.remap(u.posZ, .1, O.projectile.maxHeight * .5, 0, 1);
                    u.trail.scale.set(d.trail.maxLength * E, d.trail.width),
                    u.trail.rotation = -Math.atan2(u.dir.y, u.dir.x),
                    u.trail.tint = d.trail.tint,
                    u.trail.alpha = d.trail.alpha * E,
                    u.trail.visible = !0
                } else
                    u.trail.visible = !1;
                let _ = u.layer
                  , A = u.posZ < .25 ? 14 : 25;
                const z = H.createCircle(u.pos, u.rad * 3)
                  , P = s.insideStructureStairs(z)
                  , T = s.insideStructureMask(z);
                u.posZ >= .25 && P && (u.layer & 1) == (r.layer & 1) && (!T || !(r.layer & 2)) && (_ |= 2,
                A += 100),
                u.alwaysRenderOntop && r.layer == 0 && (A = 1e3,
                _ |= 2),
                a.addPIXIObj(u.container, _, A);
                const C = u.imgScale * b.remap(u.posZ, 0, O.projectile.maxHeight, 1, 4.75);
                let N = u.pos;
                if (o.bAEQ) {
                    u.posInterpTicker += e;
                    const V = b.clamp(u.posInterpTicker / o.NRB, 0, 1);
                    N = m.lerp(V, u.visualPosOld, u.pos)
                }
                const L = o.SlQA(N)
                  , j = o.zHRVv(C);
                u.container.position.set(L.x, L.y),
                u.container.scale.set(j, j)
            }
        }
    }
}
function Vr(l, e, t, i, r, s, a, o) {
    const h = U[l];
    if (h) {
        let f = m.rotate(r, e);
        h.particle.shellForward && (f = m.mul(r, h.particle.shellForward));
        let u = m.mul(f, t * 9.5);
        u = m.rotate(u, (Math.random() - .5) * Math.PI / 3);
        let d = m.add(i, m.mul(r, O.player.radius + h.particle.shellOffset));
        h.particle.shellOffsetY && (d = m.add(d, m.mul(f, h.particle.shellOffsetY))),
        h.particle.shellReverse && (u = m.mul(u, -1)),
        o.addParticle(h.ammo, s, d, u, h.particle.shellScale, -Math.atan2(f.y, f.x), null, a)
    }
}
class eo {
    shots = [];
    addShot(e) {
        let t = null;
        for (let s = 0; s < this.shots.length; s++)
            if (!this.shots[s].active) {
                t = this.shots[s];
                break
            }
        t || (t = {},
        this.shots.push(t));
        const i = e.shotSourceType
          , r = U[i];
        t.active = !0,
        t.pos = m.copy(e.pos),
        t.layer = e.layer,
        t.playerId = e.playerId,
        t.weaponType = i,
        t.offhand = e.shotOffhand,
        t.lastShot = e.lastShot,
        t.shotAlt = e.shotAlt,
        t.ticker = 0,
        t.pullDelay = r.pullDelay !== void 0 ? r.pullDelay * .45 : 0,
        t.splinter = e.splinter,
        t.trailSaturated = e.trailSaturated
    }
    nYcwKO(e, t, i, r, s) {
        for (let a = 0; a < this.shots.length; a++) {
            const o = this.shots[a];
            if (o.active) {
                const h = U[o.weaponType];
                if (o.ticker == 0) {
                    const f = i.getPlayerById(o.playerId);
                    let u = h.sound.shoot;
                    if (h.sound.shootTeam) {
                        const p = i.getPlayerInfo(o.playerId).teamId;
                        h.sound.shootTeam[p] && (u = h.sound.shootTeam[p])
                    }
                    o.lastShot && h.sound.shootLast && (u = h.sound.shootLast),
                    o.shotAlt && h.sound.shootAlt && (u = h.sound.shootAlt);
                    let d = 0;
                    if (o.trailSaturated && !h.ignoreDetune ? d = 300 : o.splinter && (d = -300),
                    s.playSound(u, {
                        channel: o.playerId == t ? "activePlayer" : "otherPlayers",
                        soundPos: o.pos,
                        layer: f ? f.layer : o.layer,
                        filter: "muffled",
                        fallOff: h.sound.fallOff ? h.sound.fallOff : 0,
                        detune: d,
                        volumeScale: o.splinter ? .75 : 1
                    }),
                    o.splinter && s.playSound(u, {
                        channel: o.playerId == t ? "activePlayer" : "otherPlayers",
                        soundPos: o.pos,
                        layer: f ? f.layer : o.layer,
                        filter: "muffled",
                        fallOff: h.sound.fallOff ? h.sound.fallOff : 0,
                        detune: 1200,
                        delay: 30,
                        volumeScale: .75
                    }),
                    f) {
                        if (f.__id == t && h.fireMode == "single" && h.pullDelay) {
                            const g = f.qWTK.qIUScd[f.qWTK.ArjhbB].ammo > 0 ? h.sound.cycle : h.sound.pull;
                            s.stopSound(f.cycleSoundInstance),
                            f.cycleSoundInstance = s.playSound(g)
                        }
                        const p = o.offhand || !h.isDual
                          , w = !o.offhand || !h.isDual;
                        f.addRecoil(h.worldImg.recoil, p, w),
                        f.fireDelay = h.fireDelay
                    }
                }
                if (o.ticker += e,
                o.ticker >= o.pullDelay) {
                    const f = i.getPlayerById(o.playerId);
                    f && !f.pjeWp.sTD && f.pjeWp.TgRVv == o.weaponType && h.caseTiming == "shoot" && Vr(o.weaponType, Math.PI / 2 * -1, 1, f.pjeWp.HiVuim, f.pjeWp.HjwR, f.renderLayer, f.renderZOrd + 1, r),
                    o.active = !1
                }
            }
        }
    }
}
const Zi = .1;
function to(l, e) {
    if (l.length != e.length)
        return !1;
    for (let t = 0; t < l.length; t++)
        if (l[t].type != e[t].type)
            return !1;
    return !0
}
function io() {
    const l = {
        fontFamily: "Arial",
        fontWeight: "bold",
        fontSize: B.pixelRatio > 1 ? 30 : 22,
        align: "center",
        fill: 65535,
        stroke: 0,
        strokeThickness: 0,
        dropShadow: !0,
        dropShadowColor: "#000000",
        dropShadowBlur: 1,
        dropShadowAngle: Math.PI / 3,
        dropShadowDistance: 1
    }
      , e = new Mt("",l);
    return e.anchor.set(.5, .5),
    e.scale.set(.5, .5),
    e.position.set(0, 30),
    e.visible = !1,
    e
}
function me() {
    const l = new ae;
    return l.texture = J.EMPTY,
    l.anchor.set(.5, .5),
    l.scale.set(1, 1),
    l.tint = 16777215,
    l.visible = !1,
    l
}
const ro = Object.values(O.scopeZoomRadius.desktop)
  , so = Object.values(O.scopeZoomRadius.mobile);
class er {
    gunBarrel = me();
    gunMag = me();
    container = new se;
    magTop = !1;
    constructor() {
        this.container.addChild(this.gunBarrel),
        this.container.addChild(this.gunMag),
        this.container.rotation = Math.PI * .5,
        this.container.visible = !1
    }
    setVisible(e) {
        this.container.visible = e
    }
    setType(e, t) {
        const i = U[e]
          , r = i.worldImg;
        if (this.gunBarrel.texture = J.from(r.sprite),
        this.gunBarrel.anchor.set(.5, 1),
        this.gunBarrel.position.set(0, 0),
        this.gunBarrel.scale.set(r.scale.x * .5 / t, r.scale.y * .5 / t),
        this.gunBarrel.tint = r.tint,
        this.gunBarrel.visible = !0,
        r.magImg) {
            const a = r.magImg;
            this.gunMag.texture = J.from(a.sprite),
            this.gunMag.anchor.set(.5, .5),
            this.gunMag.position.set(a.pos.x / t, a.pos.y / t),
            this.gunMag.scale.set(.25 / t, .25 / t),
            this.gunMag.tint = 16777215,
            this.gunMag.visible = !0,
            a.top ? this.container.addChild(this.gunMag) : this.container.addChildAt(this.gunMag, 0)
        } else
            this.gunMag.visible = !1;
        this.magTop = r.magImg?.top;
        const s = i.isDual ? m.create(-5.95, 0) : m.create(-4.25, -1.75);
        r.gunOffset && (s.x += r.gunOffset.x,
        s.y += r.gunOffset.y),
        this.container.position.set(s.x, s.y)
    }
}
class ao {
    __id;
    __type;
    active;
    bodySprite = me();
    chestSprite = me();
    flakSprite = me();
    steelskinSprite = me();
    helmetSprite = me();
    visorSprite = me();
    backpackSprite = me();
    handLSprite = me();
    handRSprite = me();
    footLSprite = me();
    footRSprite = me();
    hipSprite = me();
    gunLSprites = new er;
    gunRSprites = new er;
    objectLSprite = me();
    objectRSprite = me();
    meleeSprite = me();
    bodySubmergeSprite = me();
    handLSubmergeSprite = me();
    handRSubmergeSprite = me();
    footLSubmergeSprite = me();
    footRSubmergeSprite = me();
    bodyEffectSprite = me();
    patchSprite = me();
    handLContainer = new se;
    handRContainer = new se;
    footLContainer = new se;
    footRContainer = new se;
    bodyContainer = new se;
    container = new se;
    nameText = io();
    auraContainer = new se;
    auraCircle = me();
    bones = [];
    anim = {
        type: Se.None,
        data: {},
        seq: -1,
        ticker: 0,
        bones: []
    };
    perks = [];
    perkTypes = [];
    perksDirty = !1;
    surface = null;
    wasInWater = !1;
    weapTypeOld = "";
    visualsDirty = !1;
    stepDistance = 0;
    zoomFast = !1;
    playedDryFire = !1;
    lastSwapIdx = -1;
    hasteSeq = -1;
    cycleSoundInstance = null;
    actionSoundInstance = null;
    useItemEmitter = null;
    hasteEmitter = null;
    passiveHealEmitter = null;
    downed = !1;
    wasDowned = !1;
    bleedTicker = 0;
    submersion = 0;
    gunRecoilL = 0;
    gunRecoilR = 0;
    fireDelay = 0;
    throwableState = "equip";
    lastThrowablePickupSfxTicker = 0;
    isNearDoorError = !1;
    doorErrorTicker = 0;
    noCeilingRevealTicker = 0;
    frozenTicker = 0;
    updateFrozenImage = !0;
    viewAabb = {
        min: m.create(0, 0),
        max: m.create(0, 0)
    };
    auraViewFade = 0;
    auraPulseTicker = 0;
    auraPulseDir = 1;
    renderLayer = 0;
    renderZOrd = 18;
    renderZIdx = 0;
    LJnf;
    pjeWp;
    qWTK;
    throwableStatePrev;
    mjdwp = O.player.radius;
    ajzx;
    HiVuim = m.create(0, 0);
    HMBbm = m.create(0, 0);
    HjwR = m.create(1, 0);
    JCasYr = m.create(1, 0);
    qqPdb = m.create(0, 0);
    ayHom = m.create(0, 0);
    TPBNwz = m.create(0, 0);
    mhwL = m.create(0, 0);
    posInterpTicker = 0;
    dirInterpolationTicker = 0;
    layer = 0;
    isLoadoutAvatar = !1;
    playActionStartSfx = !0;
    isNew;
    wasInsideObstacle;
    insideObstacleType;
    lastInsideObstacleTime;
    dead;
    gunSwitchCooldown;
    constructor() {
        this.bodySprite.addChild(this.bodySubmergeSprite),
        this.handLSprite.addChild(this.handLSubmergeSprite),
        this.handRSprite.addChild(this.handRSubmergeSprite),
        this.footLSprite.addChild(this.footLSubmergeSprite),
        this.footRSprite.addChild(this.footRSubmergeSprite),
        this.handLContainer.addChild(this.gunLSprites.container),
        this.handLContainer.addChild(this.handLSprite),
        this.handLContainer.addChild(this.objectLSprite),
        this.handRContainer.addChild(this.gunRSprites.container),
        this.handRContainer.addChild(this.meleeSprite),
        this.handRContainer.addChild(this.handRSprite),
        this.handRContainer.addChild(this.objectRSprite),
        this.footLContainer.addChild(this.footLSprite),
        this.footRContainer.addChild(this.footRSprite),
        this.bodyContainer.addChild(this.footLContainer),
        this.bodyContainer.addChild(this.footRContainer),
        this.bodyContainer.addChild(this.backpackSprite),
        this.bodyContainer.addChild(this.bodySprite),
        this.bodyContainer.addChild(this.chestSprite),
        this.bodyContainer.addChild(this.flakSprite),
        this.bodyContainer.addChild(this.steelskinSprite),
        this.bodyContainer.addChild(this.hipSprite),
        this.bodyContainer.addChild(this.patchSprite),
        this.bodyContainer.addChild(this.bodyEffectSprite),
        this.bodyContainer.addChild(this.handLContainer),
        this.bodyContainer.addChild(this.handRContainer),
        this.bodyContainer.addChild(this.visorSprite),
        this.bodyContainer.addChild(this.helmetSprite),
        this.container.addChild(this.bodyContainer),
        this.container.addChild(this.nameText),
        this.auraContainer.addChild(this.auraCircle),
        this.initSubmergeSprites();
        const e = Object.keys(it).length;
        for (let t = 0; t < e; t++)
            this.bones.push(new D),
            this.anim.bones.push({
                weight: 0,
                pose: new D
            });
        this.throwableStatePrev = this.throwableState,
        this.ajzx = this.mjdwp,
        this.qqPdb = m.create(0, 0),
        this.ayHom = m.create(0, 0),
        this.TPBNwz = m.create(0, 0),
        this.mhwL = m.create(0, 0),
        this.posInterpTicker = 0,
        this.dirInterpolationTicker = 0
    }
    vusF() {
        this.isNew = !1,
        this.wasInsideObstacle = !1,
        this.insideObstacleType = "",
        this.lastInsideObstacleTime = 0,
        this.lastSwapIdx = -1,
        this.hasteSeq = -1,
        this.actionSoundInstance = null,
        this.LJnf = {
            type: le.None,
            seq: -1,
            seqOld: -1,
            item: "",
            skin: "",
            targetId: 0,
            time: 0,
            duration: 0,
            throttleCount: 0,
            throttleTicker: 0
        },
        this.pjeWp = {
            HiVuim: m.create(0, 0),
            HjwR: m.create(1, 0),
            IHK: "",
            ZKVVuu: "",
            yyaro: "",
            TicL: "",
            TgRVv: "fists",
            ySWeiH: 0,
            sTD: !1,
            wLG: !1,
            SgCA: Se.None,
            rMnRs: 0,
            dFGl: le.None,
            gBl: 0,
            gyUDYF: !1,
            cUEiP: !1,
            uCW: !1,
            DAYW: 0,
            SrXYK: tt.None,
            QFFh: 0,
            tcf: "",
            kLaofn: 1,
            jJN: "",
            jKw: []
        },
        this.qWTK = {
            DslpT: O.player.health,
            uha: 0,
            dEcffd: 0,
            YEZ: "",
            ArjhbB: 0,
            eyXk: {},
            qIUScd: [],
            slqeDF: 0
        },
        this.playAnim(Se.None, -1)
    }
    Obb() {
        this.container.visible = !1,
        this.auraContainer.visible = !1,
        this.useItemEmitter && (this.useItemEmitter.stop(),
        this.useItemEmitter = null),
        this.hasteEmitter && (this.hasteEmitter.stop(),
        this.hasteEmitter = null),
        this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
        this.passiveHealEmitter = null)
    }
    HCidV(e, t, i, r) {
        m.eq(e.pos, this.ayHom) || (this.ayHom = m.copy(i ? e.pos : this.HiVuim),
        this.posInterpTicker = 0),
        m.eq(e.dir, this.mhwL) || (this.mhwL = m.copy(i ? e.dir : this.HjwR),
        this.dirInterpolationTicker = 0),
        this.pjeWp.HiVuim = m.copy(e.pos),
        this.pjeWp.HjwR = m.copy(e.dir),
        t && (this.pjeWp.IHK = e.outfit,
        this.pjeWp.ZKVVuu = e.backpack,
        this.pjeWp.yyaro = e.helmet,
        this.pjeWp.TicL = e.chest,
        this.pjeWp.TgRVv = e.activeWeapon,
        this.pjeWp.ySWeiH = e.layer,
        this.pjeWp.sTD = e.dead,
        this.pjeWp.wLG = e.downed,
        this.pjeWp.SgCA = e.animType,
        this.pjeWp.rMnRs = e.animSeq,
        this.pjeWp.dFGl = e.actionType,
        this.pjeWp.gBl = e.actionSeq,
        this.pjeWp.gyUDYF = e.wearingPan,
        this.pjeWp.cUEiP = e.healEffect,
        this.pjeWp.uCW = e.frozen,
        this.pjeWp.DAYW = e.frozenOri,
        this.pjeWp.SrXYK = e.hasteType,
        this.pjeWp.QFFh = e.hasteSeq,
        this.pjeWp.tcf = e.actionItem,
        this.pjeWp.kLaofn = e.scale,
        this.pjeWp.jJN = e.role,
        (i || !to(this.pjeWp.jKw, e.perks)) && (this.perksDirty = !0),
        this.pjeWp.jKw = e.perks,
        e.animSeq != this.anim.seq && this.playAnim(e.animType, e.animSeq),
        this.LJnf.type = e.actionType,
        this.LJnf.seq = e.actionSeq,
        this.LJnf.item = e.actionItem,
        this.visualsDirty = !0),
        i && (this.isNew = !0,
        this.renderLayer = this.pjeWp.ySWeiH,
        this.renderZOrd = 18,
        this.renderZIdx = this.__id)
    }
    SHTvb(e, t) {
        const i = this.qWTK.YEZ;
        if (e.healthDirty && (this.qWTK.DslpT = e.health),
        e.boostDirty && (this.qWTK.dEcffd = e.boost),
        e.zoomDirty && (this.qWTK.uha = e.zoom,
        this.zoomFast = !1),
        e.actionDirty && (this.LJnf.time = e.action.time,
        this.LJnf.duration = e.action.duration,
        this.LJnf.targetId = e.action.targetId),
        e.inventoryDirty) {
            this.qWTK.YEZ = e.scope,
            this.qWTK.eyXk = {};
            for (const r in O.bagSizes)
                O.bagSizes.hasOwnProperty(r) && (this.qWTK.eyXk[r] = e.inventory[r])
        }
        if (e.weapsDirty) {
            this.qWTK.ArjhbB = e.curWeapIdx,
            this.qWTK.qIUScd = [];
            for (let r = 0; r < O.WeaponSlot.Count; r++) {
                const s = {
                    type: e.weapons[r].type,
                    ammo: e.weapons[r].ammo
                };
                this.qWTK.qIUScd.push(s)
            }
        }
        e.spectatorCountDirty && (this.qWTK.slqeDF = e.spectatorCount),
        this.qWTK.YEZ != i && (this.zoomFast = !0)
    }
    poQV() {
        let e = this.qWTK.uha;
        if (B.mobile) {
            const t = ro.indexOf(e);
            t !== -1 && (e = so[t])
        }
        return e
    }
    BWEtl() {
        return this.pjeWp.yyaro ? U[this.pjeWp.yyaro].level : 0
    }
    qfr() {
        return this.pjeWp.TicL ? U[this.pjeWp.TicL].level : 0
    }
    JMsL() {
        return U[this.pjeWp.ZKVVuu].level
    }
    AjBY() {
        return U[this.pjeWp.TgRVv].type
    }
    MJIdg(e) {
        return this.qWTK.qIUScd[e].type !== ""
    }
    getMeleeCollider() {
        const e = U[this.pjeWp.TgRVv]
          , t = Math.atan2(this.HjwR.y, this.HjwR.x)
          , i = m.add(e.attack.offset, m.mul(m.create(1, 0), this.pjeWp.kLaofn - 1))
          , r = m.add(this.HiVuim, m.rotate(i, t))
          , s = e.attack.rad;
        return H.createCircle(r, s, 0)
    }
    ZZb() {
        return this.pjeWp.gyUDYF || this.pjeWp.TgRVv == "pan" && this.currentAnim() != Se.Melee
    }
    AbrxK() {
        const e = this.pjeWp.gyUDYF ? "unequipped" : "equipped";
        return U.pan.reflectSurface?.[e]
    }
    canInteract(e) {
        return !this.pjeWp.sTD && (!e.perkMode || this.pjeWp.jJN)
    }
    vRvU(e, t, i) {
        for (let r = 0; r < this.perks.length; r++)
            this.perks[r].isNew = !1;
        if (this.perksDirty) {
            if (e && !t) {
                for (let s = 0; s < this.pjeWp.jKw.length; s++) {
                    const a = this.pjeWp.jKw[s];
                    this.perks.findIndex(o => o.type == a.type) === -1 && i.addRareLootMessage(a.type)
                }
                for (let s = 0; s < this.perks.length; s++) {
                    const a = this.perks[s];
                    this.pjeWp.jKw.findIndex(o => o.type == a.type) === -1 && i.removeRareLootMessage(a.type)
                }
            }
            const r = [];
            for (let s = 0; s < this.pjeWp.jKw.length; s++) {
                const a = this.pjeWp.jKw[s]
                  , o = this.perks.findIndex(h => h.type == a.type) === -1;
                r.push({
                    type: a.type,
                    droppable: a.droppable,
                    isNew: o && !this.isNew
                })
            }
            this.perks = r,
            this.perkTypes = [];
            for (let s = 0; s < this.pjeWp.jKw.length; s++)
                this.perkTypes.push(this.pjeWp.jKw[s].type);
            this.perksDirty = !1
        }
    }
    lJQXO(e) {
        return this.perkTypes.includes(e)
    }
    nYcwKO(e, t, i, r, s, a, o, h, f, u, d, p, w) {
    const S = U[this.pjeWp.TgRVv],
          g = this.__id == u,
          y = t.getPlayerById(u);

    this.HMBbm = m.copy(this.HiVuim);
    this.JCasYr = m.copy(this.HjwR);
    this.HiVuim = m.copy(this.pjeWp.HiVuim);
    this.HjwR = m.copy(this.pjeWp.HjwR);

    // Movement Interpolation
    if (window.isInterpolation && (Math.abs(this.HiVuim.x - this.HMBbm.x) <= 10 && Math.abs(this.HiVuim.y - this.HMBbm.y) <= 10)) {
        this.HiVuim.x += (this.HMBbm.x - this.HiVuim.x) * 0.5;
        this.HiVuim.y += (this.HMBbm.y - this.HiVuim.y) * 0.5;
    }

    this.layer = this.pjeWp.ySWeiH;
    this.downed = this.pjeWp.wLG;
    this.mjdwp = this.pjeWp.kLaofn * O.player.radius;

    if (o.bAEQ) {
        this.posInterpTicker += e;
        const E = b.clamp(this.posInterpTicker / o.NRB, 0, 1);
        this.qqPdb = m.lerp(E, this.ayHom, this.HiVuim);
        this.dirInterpolationTicker += e;
        const R = b.clamp(this.dirInterpolationTicker / o.NRB, 0, 1);
        this.TPBNwz = m.lerp(R, this.mhwL, this.HjwR);
    } else {
        this.qqPdb = m.copy(this.HiVuim);
        this.TPBNwz = m.copy(this.HjwR);
    }

    if (!b.eqAbs(this.mjdwp, this.ajzx)) {
        const E = this.mjdwp - this.ajzx;
        let R = Math.abs(E) > 1e-4 ? E * e * 6 : E;
        this.isNew && (R = E);
        this.ajzx += R;
        this.visualsDirty = !0;
    }
        if (g) {
            const E = o.YMmm(m.create(o.zaTP, 0))
              , R = m.sub(E, o.HiVuim);
            this.viewAabb.min = m.sub(o.HiVuim, R),
            this.viewAabb.max = m.add(o.HiVuim, R)
        }
        this.vRvU(g, w, f);
        const M = this.weapTypeOld != this.pjeWp.TgRVv;
        this.weapTypeOld = this.pjeWp.TgRVv,
        this.lastThrowablePickupSfxTicker -= e,
        this.noCeilingRevealTicker -= e;
        const I = t.getPlayerInfo(u).groupId
          , v = t.getPlayerInfo(this.__id)
          , k = v.groupId == I;
        this.nameText.text = v.name,
        this.nameText.visible = !g && k;
        let _ = null
          , A = null;
        const z = i.oymOX.yQIfil();
        for (let E = 0; E < z.length; E++) {
            const R = z[E];
            if (R.active && !R.dead && R.layer == this.pjeWp.ySWeiH) {
                if (R.isBush) {
                    const G = this.mjdwp * .25;
                    H.intersectCircle(R.collider, this.HiVuim, G) && (_ = R)
                } else if (R.isDoor) {
                    const G = this.mjdwp + .25
                      , K = m.sub(R.pos, this.HiVuim)
                      , oe = m.rotate(m.create(1, 0), R.rot);
                    H.intersectCircle(R.collider, this.HiVuim, G) && (R.door.locked || R.door.openOneWay && m.dot(K, oe) < 0) && (A = R)
                }
            }
        }
        const P = _ != null;
        if (P && (this.insideObstacleType = _?.type),
        this.lastInsideObstacleTime -= e,
        this.wasInsideObstacle != P && this.lastInsideObstacleTime < 0 && !this.isNew) {
            const E = he[this.insideObstacleType];
            this.lastInsideObstacleTime = .2,
            r.playSound(E?.sound.enter, {
                channel: "sfx",
                soundPos: this.HiVuim,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            });
            const R = m.normalizeSafe(m.sub(this.HMBbm, this.HiVuim), m.create(1, 0))
              , G = P ? 1 : -1
              , K = Math.floor(x.random(3, 5));
            for (let oe = 0; oe < K; oe++) {
                const ke = m.mul(m.rotate(m.mul(R, G), (Math.random() - .5) * Math.PI / 1.5), x.random(6, 8));
                s.addParticle(E.hitParticle, this.layer, this.HiVuim, ke)
            }
        }
        this.wasInsideObstacle = P;
        const T = this.isNearDoorError;
        if (this.isNearDoorError = A != null,
        this.doorErrorTicker -= e,
        this.isNearDoorError && !T && this.doorErrorTicker <= 0) {
            this.doorErrorTicker = .5;
            const R = he[A?.type].door?.sound.error;
            r.playSound(R, {
                channel: "sfx",
                soundPos: this.HiVuim,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            })
        }
        this.surface = i.getGroundSurface(this.HiVuim, this.layer);
        const C = this.surface.type == "water";
        if (this.updateSubmersion(e, i),
        this.updateFrozenState(e),
        this.pjeWp.sTD || (this.stepDistance += m.length(m.sub(this.HMBbm, this.HiVuim)),
        this.stepDistance > 5 && C || C && !this.wasInWater ? (this.stepDistance = 0,
        s.addRippleParticle(this.HiVuim, this.layer, this.surface?.data.rippleColor),
        r.playGroup("footstep_water", {
            soundPos: this.HiVuim,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })) : this.stepDistance > 4 && !C && (this.stepDistance = 0,
        r.playGroup(`footstep_${this.surface.type}`, {
            soundPos: this.HiVuim,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })),
        this.wasInWater = C),
        this.bleedTicker -= e,
        !this.pjeWp.sTD && (this.pjeWp.wLG && this.LJnf.type == le.None || this.lJQXO("trick_drain")) && this.bleedTicker < 0) {
            this.bleedTicker = this.lJQXO("trick_drain") ? O.player.bleedTickRate * 3 : O.player.bleedTickRate;
            const E = m.rotate(m.mul(this.HjwR, -1), (Math.random() - .5) * Math.PI / 3);
            E.y *= -1,
            s.addParticle("bloodSplat", this.renderLayer, m.create(0, 0), m.mul(E, o.hPMoEE), 1, Math.random() * Math.PI * 2, this.container, this.renderZOrd + 1),
            p || r.playSound("player_bullet_hit_02", {
                channel: "hits",
                soundPos: this.HiVuim,
                fallOff: 3,
                layer: this.layer,
                filter: "muffled"
            })
        }
        if (this.gunSwitchCooldown -= e,
        this.fireDelay -= e,
        g && (M || this.lastSwapIdx != this.qWTK.ArjhbB)) {
            const E = this.lastSwapIdx;
            this.lastSwapIdx = this.qWTK.ArjhbB;
            const R = U[this.pjeWp.TgRVv];
            if (R.type == "melee" || R.type == "throwable") {
                if (R.type != "throwable" || this.lastThrowablePickupSfxTicker <= 0) {
                    const G = this.isLoadoutAvatar ? o.HiVuim : this.HiVuim;
                    r.playSound(R.sound.deploy, {
                        channel: "sfx",
                        soundPos: G,
                        fallOff: 3
                    })
                }
            } else if (R.type == "gun") {
                let G = "gun_switch_01"
                  , K = !1;
                if ((E == 0 || E == 1) && (this.lastSwapIdx == 0 || this.lastSwapIdx == 1) && this.fireDelay > 0) {
                    const oe = U[this.qWTK.qIUScd[E].type];
                    R && oe && R.deployGroup !== void 0 && oe.deployGroup !== void 0 && R.deployGroup == oe.deployGroup && (K = !0)
                }
                this.gunSwitchCooldown > 0 || K ? G = R.sound.deploy : this.gunSwitchCooldown = O.player.freeSwitchCooldown,
                r.stopSound(this.cycleSoundInstance),
                this.cycleSoundInstance = r.playSound(G, {
                    channel: "activePlayer"
                }),
                this.fireDelay = 0
            }
        }
        if (r.isSoundPlaying(this.cycleSoundInstance) || (this.cycleSoundInstance = null),
        this.LJnf.seq != this.LJnf.seqOld && !this.isNew) {
            let E = !0;
            !g && this.LJnf.type != le.None && (this.LJnf.throttleTicker = .5,
            this.LJnf.throttleCount < 5 ? this.LJnf.throttleCount++ : E = !1),
            E && this.playActionStartEffect(g, s, r)
        }
        if (this.LJnf.seqOld = this.LJnf.seq,
        this.updateActionEffect(g, v, s, r),
        this.LJnf.throttleTicker -= e,
        this.LJnf.throttleTicker < 0 && this.LJnf.throttleCount > 0 && (this.LJnf.throttleCount--,
        this.LJnf.throttleTicker = .25),
        this.pjeWp.SrXYK && this.pjeWp.QFFh != this.hasteSeq) {
            const R = {
                [tt.None]: {
                    particle: "",
                    sound: ""
                },
                [tt.Windwalk]: {
                    particle: "windwalk",
                    sound: "ability_stim_01"
                },
                [tt.Takedown]: {
                    particle: "takedown",
                    sound: "ability_stim_01"
                },
                [tt.Inspire]: {
                    particle: "inspire",
                    sound: "ability_stim_01"
                }
            }[this.pjeWp.SrXYK];
            this.isNew || r.playSound(R.sound, {
                channel: "sfx",
                soundPos: this.HiVuim,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            }),
            this.hasteEmitter?.stop(),
            this.hasteEmitter = s.addEmitter(R.particle, {
                pos: this.HiVuim,
                layer: this.layer
            }),
            this.hasteSeq = this.pjeWp.QFFh
        } else
            !this.pjeWp.SrXYK && this.hasteEmitter && (this.hasteEmitter.stop(),
            this.hasteEmitter = null);
        if (this.hasteEmitter && (this.hasteEmitter.pos = m.add(this.HiVuim, m.create(0, .1)),
        this.hasteEmitter.layer = this.renderLayer,
        this.hasteEmitter.zOrd = this.renderZOrd + 1),
        this.pjeWp.cUEiP && !this.passiveHealEmitter ? this.passiveHealEmitter = s.addEmitter("heal_basic", {
            pos: this.HiVuim,
            layer: this.layer
        }) : !this.pjeWp.cUEiP && this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
        this.passiveHealEmitter = null),
        this.passiveHealEmitter && (this.passiveHealEmitter.pos = m.add(this.HiVuim, m.create(0, .1)),
        this.passiveHealEmitter.layer = this.renderLayer,
        this.passiveHealEmitter.zOrd = this.renderZOrd + 1),
        g && !w) {
            const E = this.qWTK.ArjhbB
              , R = this.qWTK.qIUScd[E]
              , G = U[R.type];
            if (!this.playedDryFire && this.AjBY() == "gun" && (a.isBindPressed(F.Fire) || a.isBindDown(F.Fire) && G.fireMode == "auto") && this.LJnf.type == le.None && !d && !G.ammoInfinite) {
                const K = this.qWTK.eyXk[G.ammo] || 0
                  , oe = R.ammo;
                K == 0 && oe == 0 && (r.playSound(G.sound.empty),
                this.playedDryFire = !0)
            }
            a.isBindDown(F.Fire) || (this.playedDryFire = !1)
        }
        this.gunRecoilL = b.max(0, this.gunRecoilL - this.gunRecoilL * e * 5 - e),
        this.gunRecoilR = b.max(0, this.gunRecoilR - this.gunRecoilR * e * 5 - e);
        const N = {
            playerBarn: t,
            map: i,
            audioManager: r,
            particleBarn: s
        };
        this.updateAnim(e, N),
        this.currentAnim() == Se.None && (this.throwableState = "equip"),
        (this.currentAnim() == Se.Cook || this.currentAnim() == Se.Throw) && S.type != "throwable" && this.playAnim(Se.None, this.anim.seq);
        const L = this.selectIdlePose()
          , j = Yi[L];
        for (let E = 0; E < this.bones.length; E++) {
            const R = j[E] || D.identity
              , G = this.anim.bones[E];
            G.weight > 0 ? this.bones[E].copy(D.lerp(G.weight, R, G.pose)) : this.bones[E].copy(R)
        }
        this.throwableStatePrev != this.throwableState && (this.visualsDirty = !0),
        this.throwableStatePrev = this.throwableState,
        this.visualsDirty && this.updateVisuals(t, i),
        this.visualsDirty = !1,
        this.updateAura(e, g, y),
        this.Zr(),
        this.updateRenderLayer(g, y, i),
        h.addPIXIObj(this.auraContainer, this.renderLayer, this.renderZOrd - 1, this.renderZIdx);
        const V = y.layer & 2 || (y.layer & 1) == 1 || (this.layer & 1) == 0;
        this.auraContainer.visible = !!(!this.pjeWp.sTD && V),
        h.addPIXIObj(this.container, this.renderLayer, this.renderZOrd, this.renderZIdx),
        this.isNew = !1
    }
    render(e, t) {
        const i = e.SlQA(this.qqPdb)
          , r = e.zHRVv(1);
        this.container.position.set(i.x, i.y),
        this.container.scale.set(r, r),
        this.container.visible = !this.pjeWp.sTD,
        this.auraContainer.position.set(i.x, i.y),
        this.auraContainer.scale.set(r, r)
    }
    updateRenderLayer(e, t, i) {
        const r = H.createCircle(this.HiVuim, O.player.maxVisualRadius);
        let s = !1
          , a = !1
          , o = !1;
        const h = i.SopFaJ.yQIfil();
        for (let p = 0; p < h.length; p++) {
            const w = h[p];
            if (w.active) {
                for (let S = 0; S < w.stairs.length; S++) {
                    const g = w.stairs[S]
                      , y = H.intersect(g.collision, r);
                    if (y) {
                        a = !0;
                        const M = m.add(g.center, m.mul(g.downDir, -2.5));
                        let I = m.sub(M, this.HiVuim);
                        const v = m.length(I);
                        I = v > 1e-4 ? m.div(I, v) : m.create(1, 0),
                        o = dt.intersectSegmentDist(i.oymOX.yQIfil(), this.HiVuim, I, v, .5, this.layer, !1) < v
                    }
                    e && g.noCeilingReveal && y && this.layer != 0 && (this.noCeilingRevealTicker = .25)
                }
                for (let S = 0; S < w.mask.length; S++)
                    if (H.intersect(w.mask[S], r)) {
                        s = !0;
                        break
                    }
            }
        }
        let f = this.layer
          , u = 18;
        a && (f & 1 && (t.layer & 1 || !o) || t.layer & 2 && !s) && (f |= 2),
        a && (f & 1) == (t.layer & 1) && (!s || t.layer == 0) && (f |= 2,
        u += 100);
        const d = this.__id + (this.pjeWp.wLG ? 0 : 262144) + (e ? 65536 : 0) + (this.mjdwp > 1 ? 131072 : 0);
        this.renderLayer = f,
        this.renderZOrd = u,
        this.renderZIdx = d
    }
    updateVisuals(e, t) {
        const i = U[this.pjeWp.IHK]
          , r = i.skinImg
          , s = this.ajzx / O.player.radius;
        if (this.bodySprite.texture = J.from(r.baseSprite),
        this.bodySprite.tint = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.baseTint,
        this.bodySprite.scale.set(.25, .25),
        this.bodySprite.visible = !0,
        this.pjeWp.uCW && this.updateFrozenImage) {
            const d = t.getMapDef().biome.frozenSprites || [];
            if (d.length > 0) {
                const p = d[Math.floor(Math.random() * d.length)]
                  , w = b.oriToRad(this.pjeWp.DAYW) + Math.PI * .5 + (Math.random() - .5) * Math.PI * .25;
                this.bodyEffectSprite.texture = J.from(p),
                this.bodyEffectSprite.rotation = w,
                this.bodyEffectSprite.tint = 16777215,
                this.bodyEffectSprite.scale.set(.25, .25)
            }
            this.updateFrozenImage = !1
        }
        if (t.factionMode && !i.ghillie) {
            const p = e.getPlayerInfo(this.__id).teamId
              , w = ["player-patch-01.img", "player-patch-02.img"]
              , S = (p - 1) % w.length
              , g = w[S]
              , y = O.teamColors[S]
              , M = b.oriToRad(3) + Math.PI * .5;
            this.patchSprite.texture = J.from(g),
            this.patchSprite.rotation = M,
            this.patchSprite.tint = y,
            this.patchSprite.scale.set(.25, .25),
            this.patchSprite.visible = !0
        } else
            this.patchSprite.visible = !1;
        const a = function(d, p, w) {
            d.texture = J.from(p),
            d.scale.set(.175, .175),
            d.tint = w,
            d.visible = !0
        }
          , o = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.handTint;
        a(this.handLSprite, r.handSprite, o),
        a(this.handRSprite, r.handSprite, o);
        const h = function(d, p, w) {
            d.texture = J.from("player-feet-01.img"),
            d.scale.set(.45, .45),
            d.rotation = Math.PI * .5,
            d.tint = p,
            d.visible = w
        }
          , f = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.footTint;
        if (h(this.footLSprite, f, this.downed),
        h(this.footRSprite, f, this.downed),
        this.lJQXO("flak_jacket") && !i.ghillie ? (this.flakSprite.texture = J.from("player-armor-base-01.img"),
        this.flakSprite.scale.set(.215, .215),
        this.flakSprite.tint = 3671558,
        this.flakSprite.alpha = .7,
        this.flakSprite.visible = !0) : this.flakSprite.visible = !1,
        this.pjeWp.TicL == "" || i.ghillie)
            this.chestSprite.visible = !1;
        else {
            const p = U[this.pjeWp.TicL].skinImg;
            this.chestSprite.texture = J.from(p.baseSprite),
            this.chestSprite.scale.set(.25, .25),
            this.chestSprite.tint = p.baseTint,
            this.chestSprite.visible = !0
        }
        if (this.lJQXO("steelskin") && !i.ghillie ? (this.steelskinSprite.texture = J.from("loot-melee-pan-black.img"),
        this.steelskinSprite.scale.set(.4, .4),
        this.steelskinSprite.anchor.set(.575, .5),
        this.steelskinSprite.tint = 16777215,
        this.steelskinSprite.visible = !0) : this.steelskinSprite.visible = !1,
        this.pjeWp.yyaro == "" || i.ghillie)
            this.helmetSprite.visible = !1;
        else {
            const p = U[this.pjeWp.yyaro].skinImg
              , w = (this.downed ? 1 : -1) * 3.33;
            this.helmetSprite.texture = J.from(p.baseSprite),
            this.helmetSprite.position.set(w, 0),
            p.spriteScale ? this.helmetSprite.scale.set(p.spriteScale, p.spriteScale) : this.helmetSprite.scale.set(.15, .15);
            let S = p.baseTint;
            t.factionMode && (S = e.getPlayerInfo(this.__id).teamId == 1 ? p.baseTintRed : p.baseTintBlue),
            this.helmetSprite.tint = S,
            this.helmetSprite.visible = !0
        }
        if (this.JMsL() > 0 && !i.ghillie && !this.downed) {
            const d = [10.25, 11.5, 12.75]
              , p = this.JMsL()
              , w = d[b.min(p - 1, d.length - 1)]
              , S = (.4 + p * .03) * .5;
            this.backpackSprite.texture = J.from("player-circle-base-01.img"),
            this.backpackSprite.position.set(-w, 0),
            this.backpackSprite.scale.set(S, S),
            this.backpackSprite.tint = r.backpackTint,
            this.backpackSprite.visible = !0,
            function(g, y, M) {
                g.texture = J.from(y),
                g.tint = M
            }(this.backpackSprite, r.backpackSprite, r.backpackTint)
        } else
            this.backpackSprite.visible = !1;
        if (this.pjeWp.gyUDYF) {
            const d = U.pan.hipImg;
            this.hipSprite.texture = J.from(d.sprite),
            this.hipSprite.position.set(d.pos.x, d.pos.y),
            this.hipSprite.scale.set(d.scale.x, d.scale.y),
            this.hipSprite.rotation = d.rot,
            this.hipSprite.tint = d.tint,
            this.hipSprite.visible = !0
        } else
            this.hipSprite.visible = !1;
        const u = U[this.pjeWp.TgRVv];
        if (u.type == "gun") {
            this.gunRSprites.setType(this.pjeWp.TgRVv, s),
            this.gunRSprites.setVisible(!0),
            u.isDual ? (this.gunLSprites.setType(this.pjeWp.TgRVv, s),
            this.gunLSprites.setVisible(!0)) : this.gunLSprites.setVisible(!1);
            const d = this.bodyContainer.getChildIndex(this.handRContainer)
              , p = this.bodyContainer.getChildIndex(this.handRContainer);
            let w = d + 1;
            (this.gunRSprites.magTop || u.worldImg.handsBelow) && (w = d - 1),
            w = b.max(w, 0),
            p != w && this.bodyContainer.addChildAt(this.handLContainer, w);
            const S = this.handRContainer.getChildIndex(this.gunRSprites.container)
              , g = u.worldImg.handsBelow ? this.handRContainer.children.length : 0;
            S != g && this.handRContainer.addChildAt(this.gunRSprites.container, g)
        } else
            this.gunLSprites.setVisible(!1),
            this.gunRSprites.setVisible(!1);
        if (this.downed != this.wasDowned)
            if (this.wasDowned = this.downed,
            this.downed) {
                const d = this.bodyContainer.getChildIndex(this.footLContainer);
                this.bodyContainer.addChildAt(this.handLContainer, d),
                this.bodyContainer.addChildAt(this.handRContainer, d)
            } else
                this.bodyContainer.addChild(this.handLContainer),
                this.bodyContainer.addChild(this.handRContainer);
        if (u.type == "melee" && this.pjeWp.TgRVv != "fists") {
            const d = u.worldImg;
            this.meleeSprite.texture = J.from(d.sprite),
            this.meleeSprite.pivot.set(-d.pos.x, -d.pos.y),
            this.meleeSprite.scale.set(d.scale.x / s, d.scale.y / s),
            this.meleeSprite.rotation = d.rot,
            this.meleeSprite.tint = d.tint,
            this.meleeSprite.visible = !0;
            const p = this.handRContainer.getChildIndex(this.handRSprite)
              , w = b.max(d.renderOnHand ? p + 1 : p - 1, 0);
            this.handRContainer.getChildIndex(this.meleeSprite) != w && this.handRContainer.addChildAt(this.meleeSprite, w);
            const S = this.bodyContainer.getChildIndex(this.handRContainer)
              , g = b.max(d.leftHandOntop ? S + 1 : S - 1, 0);
            this.bodyContainer.getChildIndex(this.handLContainer) != g && this.bodyContainer.addChildAt(this.handLContainer, g)
        } else
            this.meleeSprite.visible = !1;
        if (u.type == "throwable") {
            const d = function(w, S) {
                if (S.sprite && S.sprite != "none") {
                    let g = S.sprite;
                    t.mapDef.gameMode.spookyKillSounds && (g = jr[g] || g),
                    w.texture = J.from(g),
                    w.position.set(S.pos?.x, S.pos?.y),
                    w.scale.set(S.scale, S.scale),
                    w.rotation = Math.PI * .5,
                    w.visible = !0
                } else
                    w.visible = !1
            }
              , p = u.handImg?.[this.throwableState];
            d(this.objectLSprite, p.left),
            d(this.objectRSprite, p.right)
        } else
            this.objectLSprite.visible = !1,
            this.objectRSprite.visible = !1;
        if ((this.downed || this.currentAnim() == Se.Revive) && (this.gunLSprites.setVisible(!1),
        this.gunRSprites.setVisible(!1),
        this.meleeSprite.visible = !1,
        this.objectLSprite.visible = !1,
        this.objectRSprite.visible = !1),
        this.downed && (this.backpackSprite.visible = !1),
        this.LJnf.type != le.UseItem && this.LJnf.type != le.Revive || this.pjeWp.sTD || this.pjeWp.wLG && !this.lJQXO("self_revive") || !this.lJQXO("aoe_heal"))
            this.auraPulseTicker = 0,
            this.auraPulseDir = 1,
            this.auraCircle.visible = !1;
        else {
            const d = U[this.LJnf.item]
              , p = d?.aura ? d.aura.sprite : "part-aura-circle-01.img"
              , w = d?.aura ? d.aura.tint : 16711935
              , S = .125;
            let g = d ? O.player.medicHealRange : O.player.medicReviveRange;
            g *= S,
            this.auraCircle.texture = J.from(p),
            this.auraCircle.scale.set(g, g),
            this.auraCircle.tint = w,
            this.auraCircle.visible = !0
        }
        if (this.pjeWp.jJN != "" && U[this.pjeWp.jJN]?.visorImg && this.pjeWp.yyaro != "" && !i.ghillie) {
            const p = U[this.pjeWp.jJN].visorImg;
            if (p) {
                const w = (this.downed ? 1 : -1) * 3.33;
                this.visorSprite.texture = J.from(p.baseSprite),
                this.visorSprite.position.set(w, 0)
            }
            p.spriteScale ? this.visorSprite.scale.set(p.spriteScale, p.spriteScale) : this.visorSprite.scale.set(.15, .15),
            this.visorSprite.visible = !0
        } else
            this.visorSprite.visible = !1;
        this.bodyContainer.scale.set(s, s)
    }
    updateAura(e, t, i) {
        let r = !0;
        if (t || (r = be.testCircleAabb(this.HiVuim, this.mjdwp, i.viewAabb.min, i.viewAabb.max)),
        this.auraViewFade = b.lerp(e * 6, this.auraViewFade, r ? 1 : 0),
        this.auraCircle.visible) {
            this.auraPulseTicker = b.clamp(this.auraPulseTicker + e * this.auraPulseDir * 1.5, 0, 1);
            const s = b.easeOutExpo(this.auraPulseTicker) * .75 + .25;
            (this.auraPulseTicker >= 1 || this.auraPulseTicker <= 0) && (this.auraPulseDir *= -1),
            this.auraCircle.alpha = s * this.auraViewFade
        }
    }
    Zr() {
        const e = function(i, r) {
            i.position.set(r.pos.x, r.pos.y),
            i.pivot.set(-r.pivot.x, -r.pivot.y),
            i.rotation = r.rot
        };
        e(this.handLContainer, this.bones[it.HandL]),
        e(this.handRContainer, this.bones[it.HandR]),
        e(this.footLContainer, this.bones[it.FootL]),
        e(this.footRContainer, this.bones[it.FootR]);
        const t = U[this.pjeWp.TgRVv];
        !this.downed && this.currentAnim() != Se.Revive && t.type == "gun" && t.worldImg.leftHandOffset && (this.handLContainer.position.x += t.worldImg.leftHandOffset.x,
        this.handLContainer.position.y += t.worldImg.leftHandOffset.y),
        this.handLContainer.position.x -= this.gunRecoilL * 1.125,
        this.handRContainer.position.x -= this.gunRecoilR * 1.125;
        //Local Rotation
        const mouseX = inputManager.mousePos.x;
        const mouseY = inputManager.mousePos.y;

        if (window.activeId == this.__id && !window.spectating && window.isLocalRotation) {
            this.bodyContainer.rotation = Math.atan2(
                mouseY - window.innerHeight / 2,
                mouseX - window.innerWidth / 2,
            );
        } else {
            this.bodyContainer.rotation = -Math.atan2(this.TPBNwz.y, this.TPBNwz.x)
        }
        
    }
    playActionStartEffect(e, t, i) {
        let r = null;
        switch (this.LJnf.type) {
        case le.Reload:
        case le.ReloadAlt:
            {
                const s = U[this.LJnf.item];
                s && (r = {
                    sound: this.LJnf.type == le.ReloadAlt ? s.sound.reloadAlt : s.sound.reload,
                    channel: e ? "activePlayer" : "otherPlayers"
                })
            }
            break;
        case le.UseItem:
            {
                const s = U[this.LJnf.item];
                s && (r = {
                    sound: s.sound.use,
                    channel: e ? "activePlayer" : "otherPlayers"
                })
            }
        }
        if (i.stopSound(this.actionSoundInstance),
        r && this.playActionStartSfx && (this.actionSoundInstance = i.playSound(r.sound, {
            channel: r.channel,
            soundPos: this.HiVuim,
            fallOff: 2,
            layer: this.layer,
            filter: "muffled"
        })),
        this.LJnf.type == le.Reload || this.LJnf.type == le.ReloadAlt) {
            const s = U[this.LJnf.item];
            if (s && s.caseTiming == "reload")
                for (let a = 0; a < s.maxReload; a++) {
                    const o = a % 2 == 0 ? -1 : 1
                      , h = Math.PI + Math.PI / 4 * o
                      , f = s.maxReload <= 2 ? 1 : b.lerp(Math.random(), .8, 1.2);
                    Vr(this.LJnf.item, h, f, this.HiVuim, this.HjwR, this.renderLayer, this.renderZOrd + 1, t)
                }
        }
    }
    updateActionEffect(e, t, i, r) {
        let s = "";
        const a = {};
        switch (this.LJnf.type) {
        case le.UseItem:
            {
                const o = U[this.LJnf.item]
                  , h = t.loadout;
                o.type == "heal" ? s = U[h.heal].emitter : o.type == "boost" && (s = U[h.boost].emitter),
                this.lJQXO("aoe_heal") && (a.scale = 1.5,
                a.radius = O.player.medicHealRange / a.scale,
                a.rateMult = .25);
                break
            }
        case le.Revive:
            {
                this.pjeWp.wLG && (s = "revive_basic");
                break
            }
        }
        s && (!this.useItemEmitter || this.useItemEmitter.type != s) && (this.useItemEmitter?.stop(),
        a.pos = this.HiVuim,
        a.layer = this.layer,
        this.useItemEmitter = i.addEmitter(s, a)),
        this.useItemEmitter && (this.useItemEmitter.pos = m.add(this.HiVuim, m.create(0, .1)),
        this.useItemEmitter.layer = this.renderLayer,
        this.useItemEmitter.zOrd = this.renderZOrd + 1),
        this.useItemEmitter && !s && (this.useItemEmitter.stop(),
        this.useItemEmitter = null),
        r.isSoundPlaying(this.actionSoundInstance) || (this.actionSoundInstance = null),
        this.actionSoundInstance && !e && r.updateSound(this.actionSoundInstance, "otherPlayers", this.HiVuim, {
            layer: this.layer,
            fallOff: 2,
            filter: "muffled"
        })
    }
    playItemPickupSound(e, t) {
        const i = U[e];
        i && (t.playSound(i.sound?.pickup, {
            channel: "ui"
        }),
        i.type == "throwable" && (this.lastThrowablePickupSfxTicker = .3))
    }
    selectIdlePose() {
        const e = U[this.pjeWp.TgRVv];
        let t = "fists";
        return this.downed ? t = "downed" : "anim"in e && e.anim.idlePose ? t = e.anim.idlePose : e.type == "gun" ? e.pistol ? t = e.isDual ? "dualPistol" : "pistol" : e.isBullpup ? t = "bullpup" : e.isLauncher ? t = "launcher" : t = e.isDual ? "dualRifle" : "rifle" : e.type == "throwable" ? t = "throwable" : t = "fists",
        Yi[t] ? t : "fists"
    }
    selectAnim(e) {
        const t = function(i, r) {
            return {
                type: i,
                mirror: !!r && Math.random() < .5
            }
        };
        switch (e) {
        case Se.None:
            return t("none", !1);
        case Se.Cook:
            return t("cook", !1);
        case Se.Throw:
            return t("throw", !1);
        case Se.Revive:
            return t("revive", !1);
        case Se.CrawlForward:
            return t("crawl_forward", !0);
        case Se.CrawlBackward:
            return t("crawl_backward", !0);
        case Se.Melee:
            {
                const i = U[this.pjeWp.TgRVv];
                if (!i.anim?.attackAnims)
                    return t("fists", !0);
                const r = i.anim.attackAnims
                  , s = Math.floor(Math.random() * r.length)
                  , a = r[s];
                return t(a, a == "fists" && r.length == 1)
            }
        default:
            return t("none", !1)
        }
    }
    currentAnim() {
        return this.anim.type
    }
    playAnim(e, t) {
        this.anim.type = e,
        this.anim.data = this.selectAnim(e),
        this.anim.seq = t,
        this.anim.ticker = 0;
        for (let i = 0; i < this.bones.length; i++) {
            const r = this.anim.bones[i];
            r.weight = 0,
            r.pose.copy(this.bones[i])
        }
    }
    updateAnim(e, t) {
        if (this.anim.data.type == "none" && this.playAnim(Se.None, this.anim.seq),
        this.currentAnim() != Se.None) {
            const i = this.anim.ticker;
            this.anim.ticker += e * 1;
            const r = Xa[this.anim.data.type]
              , s = r.keyframes;
            let a = -1
              , o = 0;
            for (; this.anim.ticker >= s[o].time && o < s.length - 1; )
                a++,
                o++;
            a = b.max(a, 0);
            const h = s[a].time
              , f = s[o].time
              , u = b.min((this.anim.ticker - h) / (f - h), 1)
              , d = s[a].bones
              , p = s[o].bones
              , w = this.anim.data.mirror;
            for (let y = 0; y < this.anim.bones.length; y++) {
                const M = this.anim.bones[y];
                let I = y;
                w && (I = y % 2 == 0 ? y + 1 : y - 1),
                d[I] !== void 0 && p[I] !== void 0 && (M.weight = a == o ? u : 1,
                M.pose.copy(D.lerp(u, d[I], p[I])),
                w && (M.pose.pos.y *= -1,
                M.pose.pivot.y *= -1,
                M.pose.rot *= -1))
            }
            const S = o == s.length - 1 && b.eqAbs(u, 1);
            let g = this.anim.ticker;
            S && (g += 1);
            for (let y = 0; y < r.effects.length; y++) {
                const M = r.effects[y];
                M.time >= i && M.time < g && this[M.fn](t, M.args)
            }
            S && this.playAnim(Se.None, this.anim.seq)
        }
    }
    animPlaySound(e, t) {
        const r = U[this.pjeWp.TgRVv].sound[t.sound];
        r && e.audioManager?.playSound(r, {
            channel: "sfx",
            soundPos: this.HiVuim,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })
    }
    animSetThrowableState(e, t) {
        this.throwableState = t.state
    }
    animThrowableParticles(e, t) {
        if (U[this.pjeWp.TgRVv].useThrowParticles) {
            const i = m.rotate(m.create(.75, .75), Math.atan2(this.HjwR.y, this.HjwR.x));
            e.particleBarn?.addParticle("fragPin", this.renderLayer, m.add(this.HiVuim, i), m.mul(m.rotate(this.HjwR, Math.PI * .5), 4.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1);
            const r = m.rotate(m.create(.75, -.75), Math.atan2(this.HjwR.y, this.HjwR.x));
            e.particleBarn?.addParticle("fragLever", this.renderLayer, m.add(this.HiVuim, r), m.mul(m.rotate(this.HjwR, -Math.PI * .25), 3.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1)
        }
    }
    animMeleeCollision(e, t) {
        const i = U[this.pjeWp.TgRVv];
        if (i && i.type == "melee") {
            const r = this.getMeleeCollider()
              , s = r.rad + m.length(m.sub(this.HiVuim, r.pos))
              , a = []
              , o = e.map?.oymOX.yQIfil();
            for (let d = 0; d < o.length; d++) {
                const p = o[d];
                if (p.active && !p.dead && !p.isSkin && p.height >= O.player.meleeHeight && x.sameLayer(p.layer, this.layer & 1)) {
                    let w = H.intersectCircle(p.collider, r.pos, r.rad);
                    if (i.cleave || i.wallCheck) {
                        const S = m.normalizeSafe(m.sub(p.pos, this.HiVuim), m.create(1, 0))
                          , g = dt.intersectSegment(e.map?.oymOX.yQIfil(), this.HiVuim, S, s, O.player.meleeHeight, this.layer, !1);
                        g && g.id !== p.__id && (w = null)
                    }
                    if (w) {
                        const S = he[p.type]
                          , g = m.add(r.pos, m.mul(m.neg(w.dir), r.rad - w.pen))
                          , y = m.rotate(m.mul(w.dir, 7.5), (Math.random() - .5) * Math.PI / 3);
                        a.push({
                            pen: w.pen,
                            prio: 1,
                            pos: g,
                            vel: y,
                            layer: this.renderLayer,
                            zOrd: this.renderZOrd,
                            particle: S.hitParticle,
                            sound: S.sound.punch,
                            soundFn: "playGroup"
                        })
                    }
                }
            }
            const h = e.playerBarn?.getPlayerInfo(this.__id).teamId
              , f = e.playerBarn?.playerPool.yQIfil();
            for (let d = 0; d < f.length; d++) {
                const p = f[d];
                if (p.active && p.__id != this.__id && !p.pjeWp.sTD && x.sameLayer(p.layer, this.layer)) {
                    const w = m.normalizeSafe(m.sub(p.HiVuim, this.HiVuim), m.create(1, 0))
                      , S = be.intersectCircleCircle(r.pos, r.rad, p.HiVuim, p.mjdwp);
                    if (S && b.eqAbs(s, dt.intersectSegmentDist(e.map?.oymOX.yQIfil(), this.HiVuim, w, s, O.player.meleeHeight, this.layer, !1))) {
                        const g = e.playerBarn?.getPlayerInfo(p.__id).teamId
                          , y = m.rotate(w, (Math.random() - .5) * Math.PI / 3)
                          , M = i.sound[t.playerHit] || i.sound.playerHit;
                        a.push({
                            pen: S.pen,
                            prio: g == h ? 2 : 0,
                            pos: m.copy(p.HiVuim),
                            vel: y,
                            layer: p.renderLayer,
                            zOrd: p.renderZOrd,
                            particle: "bloodSplat",
                            sound: M,
                            soundFn: "playSound"
                        })
                    }
                }
            }
            a.sort( (d, p) => d.prio == p.prio ? p.pen - d.pen : d.prio - p.prio);
            let u = a.length;
            i.cleave || (u = b.min(u, 1));
            for (let d = 0; d < u; d++) {
                const p = a[d];
                e.particleBarn?.addParticle(p.particle, p.layer, p.pos, p.vel, 1, Math.random() * Math.PI * 2, null, p.zOrd + 1),
                e.audioManager?.[p.soundFn](p.sound, {
                    channel: "hits",
                    soundPos: p.pos,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
        }
    }
    initSubmergeSprites() {
        const e = function(i, r) {
            i.texture = J.from(r),
            i.anchor.set(.5, .5),
            i.tint = 16777215,
            i.alpha = 0,
            i.visible = !1
        };
        e(this.bodySubmergeSprite, "player-wading-01.img"),
        e(this.handLSubmergeSprite, "player-hands-01.img"),
        e(this.handRSubmergeSprite, "player-hands-01.img"),
        e(this.footLSubmergeSprite, "player-feet-01.img"),
        e(this.footRSubmergeSprite, "player-feet-01.img");
        const t = new Me;
        t.beginFill(16711680, .5),
        t.drawCircle(0, 0, 38 * 2 * Zi),
        t.position.set(0, 0),
        this.bodySubmergeSprite.addChild(t),
        this.bodySubmergeSprite.mask = t,
        this.bodySubmergeSprite.scale.set(.5, .5)
    }
    updateSubmersion(e, t) {
        const i = this.surface?.type == "water";
        let r = 0;
        if (i) {
            const f = this.surface?.data.river
              , u = f && !t.isInOcean(this.HiVuim)
              , d = u ? f.distanceToShore(this.HiVuim) : t.distanceToShore(this.HiVuim)
              , p = u ? 12 : 16;
            r = b.remap(d, 0, p, .6, 1)
        }
        this.submersion = b.lerp(e * 4, this.submersion, r);
        const s = this.submersion * .8
          , a = (.9 - this.submersion * .4) * 2
          , o = 1 / (a * Zi);
        this.bodySubmergeSprite.scale.set(a, a),
        this.bodySubmergeSprite.mask.scale.set(o, o),
        this.bodySubmergeSprite.alpha = s,
        this.bodySubmergeSprite.visible = s > .001,
        i && (this.bodySubmergeSprite.tint = this.surface?.data.waterColor);
        const h = [this.handLSubmergeSprite, this.handRSubmergeSprite, this.footLSubmergeSprite, this.footRSubmergeSprite];
        for (let f = 0; f < h.length; f++) {
            const u = h[f];
            u.alpha = this.downed ? s : 0,
            u.visible = u.alpha > .001,
            i && (u.tint = this.surface?.data.waterColor)
        }
    }
    updateFrozenState(e) {
        this.pjeWp.uCW ? this.frozenTicker = .25 : (this.frozenTicker -= e,
        this.updateFrozenImage = !0),
        this.bodyEffectSprite.alpha = this.pjeWp.uCW ? 1 : b.remap(this.frozenTicker, 0, .25, 0, 1),
        this.bodyEffectSprite.visible = this.frozenTicker > 0
    }
    addRecoil(e, t, i) {
        t && (this.gunRecoilL += e),
        i && (this.gunRecoilR += e)
    }
    isUnderground(e) {
        if (this.layer != 1)
            return !1;
        const t = e.SopFaJ.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.layers.length >= 2) {
                const s = r.layers[1];
                if (H.intersectCircle(s.collision, this.HiVuim, this.mjdwp))
                    return s.underground
            }
        }
        return !0
    }
}
class Ur {
    playerPool = new Ne(ao);
    playerInfo = {};
    playerIds = [];
    teamInfo = {};
    groupInfo = {};
    playerStatus = {};
    anonPlayerNames = !1;
    onMapLoad(e) {}
    nYcwKO(e, t, i, r, s, a, o, h, f, u, d, p, w) {
        const S = this.playerPool.yQIfil();
        for (let v = 0; v < S.length; v++) {
            const k = S[v];
            k.active && k.nYcwKO(e, this, o, f, s, h, a, r, u, t, d, p, w)
        }
        const g = this.getPlayerInfo(t)
          , y = this.getPlayerById(t);
        this.setPlayerStatus(t, {
            pos: m.copy(y.pjeWp.HiVuim),
            health: y.qWTK.DslpT,
            disconnected: !1,
            dead: y.pjeWp.sTD,
            downed: y.pjeWp.wLG,
            role: y.pjeWp.jJN,
            visible: !0
        });
        const M = Ps(o.factionMode)
          , I = Object.keys(this.playerStatus);
        for (let v = 0; v < I.length; v++) {
            const k = this.playerStatus[I[v]]
              , _ = k.playerId
              , A = this.getPlayerInfo(_)
              , z = this.getPlayerById(_);
            z ? (k.posDelta = m.length(m.sub(z.pjeWp.HiVuim, k.pos)),
            k.posTarget = m.copy(z.pjeWp.HiVuim),
            k.posInterp = b.clamp(k.posInterp + e * .2, e / M, 1),
            k.dead = z.pjeWp.sTD,
            k.downed = z.pjeWp.wLG) : k.posInterp = e / M;
            const P = m.sub(k.posTarget, k.pos)
              , T = m.length(P)
              , C = T > 1e-4 ? m.div(P, T) : m.create(1, 0)
              , N = b.min(T, k.posDelta * k.posInterp);
            k.pos = m.add(k.pos, m.mul(C, N)),
            k.timeSinceVisible += e,
            k.timeSinceUpdate += e;
            const L = !k.dead || A.teamId != g.teamId && k.role != "leader" ? 0 : .6;
            k.minimapAlpha = b.smoothstep(k.timeSinceVisible, 0, .1) * b.lerp(b.smoothstep(k.timeSinceUpdate, 2, 2.5), 1, L),
            !o.factionMode && A.teamId != g.teamId && (k.minimapAlpha = 0),
            k.minimapVisible = k.minimapAlpha > .01
        }
    }
    FQpmn(e, t) {
        const i = this.playerPool.yQIfil();
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            s.active && s.render(e, t)
        }
    }
    getPlayerById(e) {
        const t = this.playerPool.yQIfil();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.__id === e)
                return r
        }
        return null
    }
    setPlayerInfo(e) {
        this.playerInfo[e.playerId] = {
            playerId: e.playerId,
            teamId: e.teamId,
            groupId: e.groupId,
            name: e.name,
            nameTruncated: X.truncateString(e.name || "", "bold 16px arial", 180),
            anonName: `Player${e.playerId - 2750}`,
            loadout: x.cloneDeep(e.loadout)
        },
        this.playerIds.push(e.playerId),
        this.playerIds.sort( (t, i) => t - i)
    }
    deletePlayerInfo(e) {
        const t = this.playerIds.indexOf(e);
        t !== -1 && this.playerIds.splice(t, 1),
        delete this.playerInfo[e],
        delete this.playerStatus[e]
    }
    getPlayerInfo(e) {
        return this.playerInfo[e] || {
            playerId: 0,
            group: 0,
            teamId: 0,
            name: "",
            nameTruncated: "",
            anonName: "",
            loadout: {}
        }
    }
    recomputeTeamData() {
        this.teamInfo = {},
        this.groupInfo = {};
        const e = Object.keys(this.playerInfo);
        for (let r = 0; r < e.length; r++) {
            const s = this.playerInfo[e[r]]
              , a = s.playerId
              , o = s.teamId;
            this.teamInfo[o] = this.teamInfo[o] || {
                teamId: o,
                playerIds: []
            },
            this.teamInfo[o].playerIds.push(a);
            const h = s.groupId;
            this.groupInfo[h] = this.groupInfo[h] || {
                groupId: h,
                playerIds: []
            },
            this.groupInfo[h].playerIds.push(a)
        }
        const t = Object.keys(this.teamInfo);
        for (let r = 0; r < t.length; r++)
            this.teamInfo[t[r]].playerIds.sort( (s, a) => s - a);
        const i = Object.keys(this.groupInfo);
        for (let r = 0; r < i.length; r++)
            this.groupInfo[i[r]].playerIds.sort( (s, a) => s - a)
    }
    getTeamInfo(e) {
        return this.teamInfo[e]
    }
    getGroupInfo(e) {
        return this.groupInfo[e]
    }
    updatePlayerStatus(e, t, i) {
        const r = this.getTeamInfo(e)
          , s = i ? this.playerIds : r.playerIds;
        if (s.length != t.players.length) {
            xe.logError(`PlayerIds and playerStatus.players out of sync. OurLen: ${s.length} MsgLen: ${t.players.length} FactionMode: ${i}`);
            return
        }
        for (let a = 0; a < s.length; a++) {
            const o = s[a]
              , h = t.players[a];
            h.hasData && this.setPlayerStatus(o, h)
        }
    }
    setPlayerStatus(e, t) {
        const i = this.playerStatus[e] || {
            playerId: e,
            pos: m.copy(t.pos),
            posTarget: m.copy(t.pos),
            posDelta: m.create(0, 0),
            health: 100,
            posInterp: 0,
            visible: !1,
            dead: !1,
            downed: !1,
            disconnected: !1,
            role: "",
            timeSinceUpdate: 0,
            timeSinceVisible: 0,
            minimapAlpha: 0,
            minimapVisible: !1
        };
        i.minimapVisible || (i.pos = m.copy(t.pos),
        !i.visible && t.visible && (i.timeSinceVisible = 0)),
        i.visible = t.visible,
        i.visible && (i.timeSinceUpdate = 0),
        i.posTarget = m.copy(t.pos),
        i.posDelta = m.length(m.sub(t.pos, i.pos)),
        i.dead = t.dead,
        i.downed = t.downed,
        i.role = t.role,
        t.health !== void 0 && (i.health = t.health),
        t.disconnected !== void 0 && (i.disconnected = t.disconnected),
        this.playerStatus[e] = i
    }
    getPlayerStatus(e) {
        return this.playerStatus[e]
    }
    updateGroupStatus(e, t) {
        const i = this.getGroupInfo(e);
        if (i.playerIds.length != t.players.length) {
            xe.logError("PlayerIds and groupStatus.players out of sync");
            return
        }
        for (let r = 0; r < i.playerIds.length; r++) {
            const s = i.playerIds[r]
              , a = t.players[r]
              , o = this.getPlayerStatus(s);
            o && (o.health = a.health,
            o.disconnected = a.disconnected)
        }
    }
    getGroupColor(e) {
        const t = this.getPlayerInfo(e)
          , i = this.getGroupInfo(t.groupId)
          , r = i ? i.playerIds.indexOf(e) : 0;
        return r >= 0 && r < O.groupColors.length ? O.groupColors[r] : 16777215
    }
    getTeamColor(e) {
        const t = e - 1;
        return t >= 0 && t < O.teamColors.length ? O.teamColors[t] : 16777215
    }
    getPlayerName(e, t, i) {
        const r = this.getPlayerInfo(e);
        if (!r)
            return "";
        let s = r.name;
        return i && (s = r.nameTruncated),
        this.anonPlayerNames && this.getPlayerInfo(t).groupId != r.groupId && (s = r.anonName),
        s
    }
    addDeathEffect(e, t, i, r, s) {
        const a = this.getPlayerById(e)
          , o = this.getPlayerById(t);
        if (a && o?.lJQXO("turkey_shoot")) {
            r.playGroup("cluck", {
                soundPos: a.HiVuim,
                layer: a.layer,
                muffled: !0
            }),
            r.playSound("feather_01", {
                channel: "sfx",
                soundPos: a.HiVuim,
                layer: a.layer,
                muffled: !0
            });
            const h = Math.floor(x.random(30, 35));
            for (let f = 0; f < h; f++) {
                const u = m.mul(m.randomUnit(), x.random(5, 15));
                s.addParticle("turkeyFeathersDeath", a.layer, a.HiVuim, u)
            }
        }
    }
}
class oo {
    __id;
    __type;
    active;
    TvV;
    HiVuim;
    mjdwp;
    ySWeiH;
    xklnB;
    vusF() {}
    Obb() {
        this.TvV.fadeOut(),
        this.TvV = null
    }
    HCidV(e, t, i, r) {
        this.HiVuim = m.copy(e.pos),
        this.mjdwp = e.rad,
        t && (this.ySWeiH = e.layer,
        this.xklnB = e.interior),
        i && (this.TvV = r.smokeBarn.hYsOpa(),
        this.TvV?.vusF(this.HiVuim, this.mjdwp, this.ySWeiH, this.xklnB)),
        this.TvV.posTarget = m.copy(this.HiVuim),
        this.TvV.radTarget = this.mjdwp
    }
}
const tr = ["part-smoke-02.img", "part-smoke-03.img"];
class lo {
    active = !1;
    zIdx = 0;
    sprite = ae.from(tr[Math.floor(Math.random() * tr.length)]);
    pos;
    posTarget;
    rad;
    radTarget;
    rot;
    rotVel;
    fade;
    fadeTicker;
    fadeDuration;
    tint;
    layer;
    interior;
    constructor() {
        this.sprite.anchor = new zi(.5,.5),
        this.sprite.visible = !1
    }
    vusF(e, t, i, r) {
        this.pos = m.copy(e),
        this.posTarget = m.copy(this.pos),
        this.rad = t,
        this.radTarget = this.rad,
        this.rot = x.random(0, Math.PI * 2),
        this.rotVel = Math.PI * x.random(.25, .5) * (Math.random() < .5 ? -1 : 1),
        this.fade = !1,
        this.fadeTicker = 0,
        this.fadeDuration = x.random(.5, .75),
        this.tint = x.rgbToInt(x.hsvToRgb(0, 0, x.random(.9, .95))),
        this.layer = i,
        this.interior = r
    }
    fadeOut() {
        this.fade = !0
    }
}
class Wr {
    EFi = new Ne(oo);
    myUa = [];
    zIdx = 2147483647;
    hYsOpa() {
        let e = null;
        for (let t = 0; t < this.myUa.length; t++)
            if (!this.myUa[t].active) {
                e = this.myUa[t];
                break
            }
        return e || (e = new lo,
        this.myUa.push(e)),
        e.active = !0,
        e.zIdx = this.zIdx--,
        e
    }
    nYcwKO(e, t, i, r, s) {
        for (let a = 0; a < this.myUa.length; a++) {
            const o = this.myUa[a];
            if (o.active) {
                o.rad = b.lerp(e * 3, o.rad, o.radTarget),
                o.pos = b.v2lerp(e * 3, o.pos, o.posTarget),
                o.rotVel *= 1 / (1 + e * .1),
                o.rot += o.rotVel * e,
                o.fadeTicker += o.fade ? e : 0,
                o.active = o.fadeTicker < o.fadeDuration;
                const h = b.clamp(1 - o.fadeTicker / o.fadeDuration, 0, 1) * .9;
                let f = o.layer;
                (x.sameLayer(o.layer, i.layer) || i.layer & 2) && (o.layer == 1 || !(i.layer & 2) || !r.insideStructureMask(H.createCircle(o.pos, 1))) && (f |= 2);
                const u = o.interior ? 500 : 1e3;
                s.addPIXIObj(o.sprite, f, u, o.zIdx);
                const d = t.SlQA(o.pos)
                  , p = t.zHRVv(o.rad * 2 / t.hPMoEE);
                o.sprite.position.set(d.x, d.y),
                o.sprite.scale.set(p, p),
                o.sprite.rotation = o.rot,
                o.sprite.tint = o.tint,
                o.sprite.alpha = h,
                o.sprite.visible = o.active
            }
        }
    }
}
function ir(l, e, t) {
    const i = e - l
      , r = i * t;
    return Math.abs(r) < .01 ? i : r
}
function no() {
    const l = new Me;
    return l.position.set(0, 0),
    l.scale.set(1, 1),
    l.__zOrd = 0,
    l.__zIdx = 0,
    l
}
function si(l, e, t, i, r) {
    l.moveTo(e, t),
    l.lineTo(e, t + r),
    l.lineTo(e + i, t + r),
    l.lineTo(e + i, t),
    l.lineTo(e, t),
    l.closePath()
}
class qr {
    constructor(e, t) {
        this.game = e,
        this.canvasMode = t;
        for (let i = 0; i < 4; i++)
            this.layers.push(new mo(`layer_${i}`));
        this.ground.alpha = 0
    }
    zIdx = 0;
    layer = 0;
    layerAlpha = 0;
    groundAlpha = 0;
    underground = !1;
    layers = [];
    ground = new Me;
    layerMask = no();
    debugLayerMask = null;
    layerMaskDirty = !0;
    layerMaskActive = !1;
    Obb() {
        this.layerMask.parent?.removeChild(this.layerMask),
        this.layerMask.destroy(!0)
    }
    addPIXIObj(e, t, i, r) {
        if (!e.transform) {
            const o = new Error
              , h = JSON.stringify({
                type: "addChild",
                stack: o.stack,
                browser: navigator.userAgent,
                playing: this.game.tRH,
                gameOver: this.game.DdhhuT,
                spectating: this.game.LbSAQ,
                time: this.game.PTV,
                mode: this.game.teamMode,
                layer: t,
                zOrd: i,
                zIdx: r
            });
            xe.logError(h)
        }
        e.__layerIdx === void 0 && (e.__layerIdx = -1,
        e.__zOrd = -1,
        e.__zIdx = -1);
        let s = t;
        t & 2 && (s = i >= 100 ? 3 : 2),
        !(e.parent == this.layers[s] && e.__zOrd == i && (r === void 0 || e.__zIdx == r)) && (e.__layerIdx = s,
        e.__zOrd = i,
        e.__zIdx = r !== void 0 ? r : this.zIdx++,
        this.layers[s].addSortedChild(e))
    }
    setActiveLayer(e) {
        this.layer = e
    }
    setUnderground(e) {
        this.underground = e
    }
    resize(e, t) {
        const i = e.mapLoaded ? e.getMapDef().biome.colors.underground : 1772803;
        this.ground.clear(),
        this.ground.beginFill(i),
        this.ground.drawRect(0, 0, t.zaTP, t.XbB),
        this.ground.endFill(),
        this.layerMaskDirty = !0
    }
    redrawLayerMask(e, t) {
        const i = this.layerMask;
        if (this.canvasMode) {
            if (i.clear(),
            this.layerMaskActive) {
                i.beginFill(16777215, 1),
                i.drawRect(0, 0, e.zaTP, e.XbB);
                const r = t.SopFaJ.yQIfil();
                for (let s = 0; s < r.length; s++) {
                    const a = r[s];
                    if (a.active)
                        for (let o = 0; o < a.mask.length; o++) {
                            const h = a.mask[o]
                              , f = m.mul(m.sub(h.max, h.min), .5)
                              , u = m.add(h.min, f)
                              , d = e.SlQA(m.sub(u, f))
                              , p = e.SlQA(m.add(u, f));
                            i.drawRect(d.x, d.y, p.x - d.x, p.y - d.y)
                        }
                }
                i.endFill()
            }
        } else {
            if (this.layerMaskDirty) {
                this.layerMaskDirty = !1,
                i.clear(),
                i.beginFill(16777215, 1),
                si(i, 0, 0, 1024, 1024);
                const a = t.SopFaJ.yQIfil();
                for (let o = 0; o < a.length; o++) {
                    const h = a[o];
                    if (h.active)
                        for (let f = 0; f < h.mask.length; f++) {
                            const u = h.mask[f]
                              , d = m.mul(m.sub(u.max, u.min), .5)
                              , p = m.add(u.min, d)
                              , w = p.x - d.x
                              , S = p.y - d.y
                              , g = d.x * 2
                              , y = d.y * 2;
                            i.beginHole(),
                            si(i, w, S, g, y),
                            i.endHole()
                        }
                }
                i.endFill()
            }
            const r = e.SlQA(m.create(0, 0))
              , s = e.VFn(1);
            i.position.set(r.x, r.y),
            i.scale.set(s, -s)
        }
    }
    redrawDebugLayerMask(e, t) {
        const i = this.debugLayerMask;
        i.clear(),
        i.beginFill(16711935, 1);
        const r = t.SopFaJ.yQIfil();
        for (let o = 0; o < r.length; o++) {
            const h = r[o];
            if (h.active)
                for (let f = 0; f < h.mask.length; f++) {
                    const u = h.mask[f]
                      , d = m.mul(m.sub(u.max, u.min), .5)
                      , p = m.add(u.min, d)
                      , w = p.x - d.x
                      , S = p.y - d.y
                      , g = d.x * 2
                      , y = d.y * 2;
                    si(i, w, S, g, y)
                }
        }
        i.endFill();
        const s = e.SlQA(m.create(0, 0));
        e.SlQA(m.create(1, 0));
        const a = e.VFn(1);
        i.position.set(s.x, s.y),
        i.scale.set(a, -a)
    }
    nYcwKO(e, t, i, r) {
        const s = this.layer > 0 ? 1 : 0;
        this.layerAlpha += ir(this.layerAlpha, s, e * 12);
        const a = this.layer == 1 && this.underground ? 1 : 0;
        this.groundAlpha += ir(this.groundAlpha, a, e * 12),
        this.layers[0].alpha = 1,
        this.layers[1].alpha = this.layerAlpha,
        this.layers[2].alpha = 1,
        this.layers[3].alpha = 1,
        this.ground.alpha = this.groundAlpha,
        this.layers[0].visible = this.groundAlpha < 1,
        this.layers[1].visible = this.layerAlpha > 0,
        this.ground.visible = this.groundAlpha > 0,
        this.redrawLayerMask(t, i);
        const o = this.layer == 0;
        o && !this.layerMaskActive ? (this.layers[2].mask = this.layerMask,
        this.layers[2].addChild(this.layerMask),
        this.layerMaskActive = !0) : !o && this.layerMaskActive && (this.layers[2].mask = null,
        this.layers[2].removeChild(this.layerMask),
        this.layerMaskActive = !1);
        for (let h = 0; h < this.layers.length; h++)
            this.layers[h].checkSort()
    }
}
class mo extends se {
    constructor(e="") {
        super(),
        this.debugName = e
    }
    dirty = !0;
    addSortedChild(e) {
        this.addChild(e),
        this.dirty = !0
    }
    checkSort() {
        return this.dirty ? (this.children.sort( (e, t) => e.__zOrd == t.__zOrd ? e.__zIdx - t.__zIdx : e.__zOrd - t.__zOrd),
        this.dirty = !1,
        !0) : !1
    }
}
const Rt = 2
  , rr = 1e-5;
class ho {
    constructor(e, t) {
        this.input = e,
        this.config = t;
        const i = function(h, f) {
            const u = ae.from("pad.img");
            return u.anchor.set(.5, .5),
            u.scale.set(1, 1),
            u.alpha = .2,
            u.visible = !1,
            u.tint = f,
            h.addChild(u),
            u
        }
          , r = () => ({
            touched: !1,
            centerPos: m.create(0, 0),
            touchPos: m.create(0, 0),
            centerSprite: i(this.container, 0),
            touchSprite: i(this.container, 16777215)
        });
        this.touchPads = [r(), r()];
        const s = function(h) {
            return ["locked", "anywhere"].includes(h) ? h : "anywhere"
        }
          , a = s(t.get("touchMoveStyle"))
          , o = s(t.get("touchAimStyle"));
        this.setMoveStyle(a),
        this.setAimStyle(o),
        this.setTouchAimLine(!!t.get("touchAimLine")),
        this.init()
    }
    container = new se;
    lineSprites = new uo;
    padScaleBase = 1;
    padScaleDown = .6;
    padScalePos = .25;
    moveDetected = !1;
    shotDetected = !1;
    shotDetectedOld = !1;
    touchingAim = !1;
    display = !0;
    moveStyle = "locked";
    aimStyle = "locked";
    touchAimLine = !0;
    touchPads;
    playerMovement = {
        left: !1,
        right: !1,
        up: !1,
        down: !1,
        moveLen: 0
    };
    analogMovement = {
        toMoveDir: m.create(1, 0),
        toMoveLen: 0
    };
    aimMovement = {
        toAimDir: m.create(1, 0),
        toAimLen: 0
    };
    leftLockedPadCenter = m.create(0, 0);
    rightLockedPadCenter = m.create(0, 0);
    padPosBase = 48;
    padPosRange = 0;
    movePadDetectMult = 1;
    shotPadDetectMult = 1.075;
    turnDirCooldown = .5;
    turnDirTicker = 0;
    mobileOffsetLandscape = 25;
    mobileOffsetPortrait = 100;
    lockedPadOffsetLandscape = m.create(126, 100);
    lockedPadOffsetPortrait = m.create(96, 160);
    lockedPadOffsetYLandscapeSafari = 120;
    lockedPadOffsetYPortraitSafari = 240;
    getTouchMovement(e) {
        return this.getMovement(e)
    }
    getAimMovement(e, t) {
        const i = e.qWTK.ArjhbB == O.WeaponSlot.Throwable;
        return this.getAim(i, t)
    }
    setAimDir(e) {
        this.aimMovement.toAimDir = m.copy(e)
    }
    getMovement(e) {
        let t = null, i = null, r = !1, s;
        this.moveDetected = !1;
        for (let o = 0; o < this.input.touches.length; o++) {
            const h = this.input.touches[o];
            if (!h.isDead && this.isLeftSideTouch(h.posDown.x, e)) {
                const f = this.moveStyle == "anywhere" ? h.posDown : this.leftLockedPadCenter
                  , u = m.sub(h.pos, f)
                  , d = m.length(u);
                if (d > Rt) {
                    const p = (d - Rt) / (this.padPosRange / this.movePadDetectMult - Rt);
                    s = p > rr ? m.div(u, p) : this.analogMovement.toMoveDir,
                    this.analogMovement = {
                        toMoveDir: m.create(s.x, s.y * -1),
                        toMoveLen: p
                    },
                    this.moveDetected = !0
                }
                i = this.getConstrainedPos(f, h.pos, d),
                t = f,
                r = !0;
                break
            }
        }
        const a = this.touchPads[0];
        return a.touched = r,
        r && this.moveStyle == "anywhere" ? a.centerPos = m.copy(t) : a.centerPos = m.copy(this.leftLockedPadCenter),
        a.touchPos.x = r ? i.x : this.leftLockedPadCenter.x,
        a.touchPos.y = r ? i.y : this.leftLockedPadCenter.y,
        this.analogMovement
    }
    getAim(e, t) {
        let i = !1, r = null, s = null, a;
        for (let h = 0; h < this.input.touches.length; h++) {
            const f = this.input.touches[h];
            if (!f.isDead && !this.isLeftSideTouch(f.posDown.x, t)) {
                const u = this.aimStyle == "anywhere" ? f.posDown : this.rightLockedPadCenter
                  , d = m.sub(f.pos, u)
                  , p = m.length(d);
                if (p > Rt) {
                    const w = m.sub(f.pos, u)
                      , S = m.length(w);
                    a = S > rr ? m.div(w, S) : this.aimMovement.toAimDir,
                    this.aimMovement = {
                        toAimDir: m.create(a.x, a.y * -1),
                        toAimLen: S
                    }
                } else
                    this.aimMovement.toAimLen = 0;
                s = this.getConstrainedPos(u, f.pos, p),
                r = u,
                i = !0;
                break
            }
        }
        this.shotDetectedOld = this.shotDetected,
        this.shotDetected = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && i,
        this.touchingAim = i,
        e && this.shotDetectedOld && i && (this.shotDetected = !0);
        const o = this.touchPads[1];
        return o.touched = i,
        i && this.aimStyle == "anywhere" ? o.centerPos = m.copy(r) : o.centerPos = m.copy(this.rightLockedPadCenter),
        o.touchPos.x = i ? s.x : this.rightLockedPadCenter.x,
        o.touchPos.y = i ? s.y : this.rightLockedPadCenter.y,
        {
            aimMovement: this.aimMovement,
            touched: o.touched
        }
    }
    nYcwKO(e, t, i, r, s) {
        for (let a = 0; a < this.touchPads.length; a++) {
            const o = this.touchPads[a];
            o.centerSprite.position.x = o.centerPos.x,
            o.centerSprite.position.y = o.centerPos.y,
            o.centerSprite.scale.x = this.padScaleBase * this.padScaleDown,
            o.centerSprite.scale.y = this.padScaleBase * this.padScaleDown,
            o.centerSprite.visible = B.touch && this.display,
            o.touchSprite.position.x = o.touchPos.x,
            o.touchSprite.position.y = o.touchPos.y,
            o.touchSprite.scale.x = this.padScaleBase * this.padScalePos,
            o.touchSprite.scale.y = this.padScaleBase * this.padScalePos,
            o.touchSprite.visible = B.touch && this.display
        }
        this.lineSprites.update(this, t, i, r, s)
    }
    isLeftSideTouch(e, t) {
        return e < t.zaTP * .5
    }
    getConstrainedPos(e, t, i) {
        if (i <= this.padPosRange)
            return t;
        const r = t.x - e.x
          , s = t.y - e.y
          , a = Math.atan2(s, r);
        return m.create(Math.cos(a) * this.padPosRange + e.x, Math.sin(a) * this.padPosRange + e.y)
    }
    getConstrainedPosDown(e, t, i) {
        const r = m.normalizeSafe(t);
        return m.add(e, m.mul(r, Math.max(0, i - this.padPosRange)))
    }
    toggleMoveStyle() {
        this.setMoveStyle(this.moveStyle == "locked" ? "anywhere" : "locked")
    }
    setMoveStyle(e) {
        this.moveStyle = e,
        this.config.set("touchMoveStyle", e);
        const t = document.getElementById("btn-game-move-style");
        t && (this.moveStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
        t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
        t.classList.add("unlocked-on-icon")))
    }
    toggleAimStyle() {
        this.setAimStyle(this.aimStyle == "locked" ? "anywhere" : "locked")
    }
    setAimStyle(e) {
        this.aimStyle = e,
        this.config.set("touchAimStyle", e);
        const t = document.getElementById("btn-game-aim-style");
        this.aimStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
        t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
        t.classList.add("unlocked-on-icon"))
    }
    toggleAimLine() {
        this.setTouchAimLine(!this.touchAimLine)
    }
    setTouchAimLine(e) {
        this.touchAimLine = e,
        this.config.set("touchAimLine", this.touchAimLine);
        const t = document.getElementById("btn-game-aim-line");
        this.touchAimLine ? (t.classList.remove("aim-line-off-icon"),
        t.classList.add("aim-line-on-icon")) : (t.classList.remove("aim-line-on-icon"),
        t.classList.add("aim-line-off-icon"))
    }
    init() {
        this.resize()
    }
    resize() {
        const e = B.isLandscape
          , t = this.lockedPadOffsetLandscape
          , i = this.lockedPadOffsetPortrait;
        B.tablet && (t.x = t.x * 1,
        i.x = i.x * 1.25);
        const r = m.create(t.x, t.y)
          , s = m.create(i.x, i.y)
          , a = m.create(B.screenWidth - t.x, t.y)
          , o = m.create(B.screenWidth - i.x, i.y);
        if (B.os == "ios")
            if (B.model == "iphonex")
                r.x = r.x + 56,
                a.x = a.x - 56,
                r.y = r.y * .9,
                a.y = a.y * .9;
            else {
                let u = this.lockedPadOffsetYLandscapeSafari
                  , d = this.lockedPadOffsetYPortraitSafari;
                B.tablet && (u *= 1,
                d *= 1),
                r.y = u,
                s.y = d,
                a.y = u,
                o.y = d
            }
        this.padScaleBase = e ? 1 : .8,
        this.padPosRange = this.padPosBase * this.padScaleBase;
        const h = e ? r : s;
        this.leftLockedPadCenter = m.create(h.x, B.screenHeight - h.y);
        const f = e ? a : o;
        this.rightLockedPadCenter = m.create(f.x, B.screenHeight - f.y),
        this.setMobileStyling(e)
    }
    setMobileStyling(e) {
        if (B.touch && (c("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block"),
        c("#ui-emote-button").css("display", "block")),
        B.uiLayout == B.UiLayout.Sm ? (c("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop"),
        c("#ui-settings-container-mobile").css("display", "block"),
        c("#ui-settings-container-desktop").css("display", "none"),
        c("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop"),
        c("#ui-leaderboard-wrapper").css("display", "none"),
        c("#big-map-close").css("display", "block"),
        c("#ui-game-menu").removeClass("ui-game-menu-desktop"),
        c("#btn-game-tabs").css("display", "none"),
        c("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop"),
        c(".ui-ability-key").css("display", "none")) : (c("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop"),
        c("#ui-settings-container-mobile").css("display", "none"),
        c("#ui-settings-container-desktop").css("display", "block"),
        c("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop"),
        c("#ui-leaderboard-wrapper").css("display", "block"),
        c("#big-map-close").css("display", "none"),
        c("#ui-game-menu").addClass("ui-game-menu-desktop"),
        c("#btn-game-tabs").css("display", "flex"),
        c("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop"),
        c(".ui-ability-key").css("display", "block")),
        B.tablet && (e ? (B.os == "ios" ? (c("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser"),
        c("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser")) : (c("#ui-bottom-right").addClass("ui-bottom-right-tablet"),
        c("#ui-right-center").addClass("ui-right-center-tablet")),
        c("#ui-bottom-center-left").addClass("ui-bottom-center-left-tablet"),
        c("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet"),
        c("#ui-top-left").addClass("ui-top-left-tablet"),
        c("#ui-spectate-options-wrapper").addClass("ui-spectate-options-wrapper-tablet"),
        c("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet"),
        c("#ui-kill-leader-wrapper").css("right", 144)) : (c("#ui-bottom-left").removeClass("ui-bottom-left-tablet"),
        c("#ui-bottom-right").removeClass("ui-bottom-right-tablet"),
        c("#ui-right-center").removeClass("ui-right-center-tablet"),
        c("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet"),
        c("#ui-top-left").removeClass("ui-top-left-tablet"),
        c("#ui-spectate-options-wrapper").removeClass("ui-spectate-options-wrapper-tablet"),
        c("#ui-killfeed-wrapper-wrapper").removeClass("ui-killfeed-wrapper-tablet"))),
        B.os == "ios")
            if (B.model == "iphonex") {
                const t = B.isLandscape ? "99%" : "90%"
                  , i = B.isLandscape ? 0 : 32;
                c("#ui-game").css({
                    height: t,
                    top: i
                }),
                c("#ui-stats-contents").css({
                    transform: "translate(-50%) scale(0.95)",
                    "transform-origin": "top"
                }),
                e ? c("#ui-game").css({
                    left: "50%",
                    transform: "translateX(-50%)",
                    width: "93%"
                }) : c("#ui-game").css({
                    left: "",
                    transform: "",
                    width: ""
                })
            } else if (window.navigator.standalone && !B.tablet)
                c("#ui-game").css({
                    height: "95%"
                });
            else {
                let t = B.isLandscape ? "86%" : "82%";
                B.tablet && (t = "100%"),
                c("#ui-game").css({
                    height: t
                }),
                c("#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display").css({
                    "margin-top": 6
                })
            }
        B.tablet || e ? (c("#ui-loot-50AE").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-9mm").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-308sub").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-12gauge").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-flare").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-762mm").insertBefore("#ui-loot-556mm"),
        c("#ui-loot-45acp").insertBefore("#ui-loot-556mm")) : (c("#ui-loot-9mm").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-12gauge").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-762mm").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-556mm").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-50AE").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-308sub").insertBefore("#ui-loot-45acp"),
        c("#ui-loot-flare").insertBefore("#ui-loot-45acp"))
    }
    hideAll() {
        this.display = !1
    }
}
class uo {
    container = new se;
    dots = [];
    constructor() {
        this.container.visible = !1
    }
    createDot() {
        const e = new ae;
        return e.texture = J.from("dot.img"),
        e.anchor.set(.5, .5),
        e.position.set(0, 0),
        e.scale.set(1, 1),
        e.tint = 16777215,
        e.alpha = 1,
        e.visible = !1,
        e
    }
    update(e, t, i, r, s) {
        const a = B.touch && e.touchingAim && e.touchAimLine;
        if (a) {
            const o = t.pjeWp.TgRVv
              , h = U[o];
            let f = 30;
            if (h.type == "gun") {
                const A = Wt[h.bulletType].distance;
                f = h.barrelLength + A
            }
            const u = t.poQV()
              , d = Math.sqrt(u * 1.414 * u);
            f = b.min(f, d);
            const p = m.copy(t.HiVuim);
            let w = m.add(p, m.mul(t.HjwR, f));
            const S = i.oymOX.yQIfil();
            for (let A = 0; A < S.length; A++) {
                const z = S[A];
                if (z.active && !z.dead && z.height >= O.bullet.height && z.collidable && !z.isWindow && x.sameLayer(t.layer, z.layer) && (h.type != "throwable" || z.height > O.projectile.maxHeight)) {
                    const P = H.intersectSegment(z.collider, p, w);
                    if (P) {
                        const T = m.length(m.sub(P.point, p));
                        T < f && (f = T,
                        w = P.point)
                    }
                }
            }
            const g = 3.5
              , y = 1.5
              , M = m.length(m.sub(w, p))
              , I = Math.max(Math.ceil((M - g) / y), 0);
            for (; this.dots.length < I; ) {
                const A = this.createDot();
                this.container.addChild(A),
                this.dots.push(A)
            }
            for (let A = 0; A < this.dots.length; A++) {
                const z = this.dots[A]
                  , P = g + A * y
                  , T = m.add(t.HiVuim, m.mul(t.HjwR, P))
                  , C = 1 / 32 * .375;
                z.position.set(T.x, T.y),
                z.scale.set(C, C),
                z.visible = A < I
            }
            const v = r.SlQA(m.create(0, 0))
              , k = r.SlQA(m.create(1, 1))
              , _ = m.sub(k, v);
            this.container.position.set(v.x, v.y),
            this.container.scale.set(_.x, _.y),
            this.container.alpha = .3,
            s.addPIXIObj(this.container, t.layer, 19, 0)
        }
        this.container.visible = a
    }
}
class co {
    constructor(e) {
        this.mapSpriteBarn = e
    }
    mapIndicators = [];
    idToMapIdicator = {};
    updateIndicatorData(e) {
        for (let t = 0; t < e.length; t++) {
            const i = e[t];
            i.dead ? this.removeIndicator(i.id) : this.updateIndicator(i)
        }
    }
    addIndicator(e) {
        const t = {
            id: e.id,
            type: e.type,
            pos: m.copy(e.pos),
            equipped: e.equipped,
            mapSprite: this.mapSpriteBarn.addSprite(),
            pulseSprite: this.mapSpriteBarn.addSprite(),
            pulseScale: .5,
            pulseScaleMin: .5,
            pulseScaleMax: 1,
            pulseTicker: 0,
            pulseDir: 1,
            pulseSpeed: .3
        };
        return this.mapIndicators.push(t),
        this.idToMapIdicator[e.id] = t,
        t
    }
    removeIndicator(e) {
        for (let t = 0; t < this.mapIndicators.length; t++) {
            const i = this.mapIndicators[t];
            if (i.id == e) {
                i.mapSprite.free(),
                i.pulseSprite.free(),
                this.mapIndicators.splice(t, 1),
                delete this.idToMapIdicator[e];
                break
            }
        }
    }
    updateIndicator(e) {
        let t = this.idToMapIdicator[e.id];
        t ||= this.addIndicator(e),
        t.pos = m.copy(e.pos),
        t.equipped = e.equipped;
        const i = U[t.type]
          , r = (B.uiLayout == B.UiLayout.Sm ? .15 : .2) * 1.25
          , s = t.equipped ? 655350 : 1
          , a = t.mapSprite;
        if (a.pos = m.copy(t.pos),
        a.scale = r,
        a.alpha = 1,
        a.zOrder = s,
        a.visible = !0,
        a.sprite.texture = J.from(i.mapIndicator?.sprite),
        a.sprite.tint = i.mapIndicator?.tint ?? 16777215,
        i.mapIndicator?.pulse) {
            const o = t.pulseSprite;
            o.pos = m.copy(t.pos),
            o.scale = 1,
            o.zOrder = s - 1,
            o.visible = !0,
            o.sprite.texture = J.from("part-pulse-01.img"),
            o.sprite.tint = i.mapIndicator.pulseTint
        }
    }
    updateIndicatorPulses(e) {
        for (let t = 0; t < this.mapIndicators.length; t++) {
            const i = this.mapIndicators[t];
            i.pulseTicker = b.clamp(i.pulseTicker + e * i.pulseDir * i.pulseSpeed, i.pulseScaleMin, 1),
            i.pulseScale = i.pulseTicker * i.pulseScaleMax,
            (i.pulseScale >= i.pulseScaleMax || i.pulseTicker <= i.pulseScaleMin) && (i.pulseDir *= -1),
            i.pulseSprite.scale = i.pulseScale,
            i.pulseSprite.visible = i.equipped
        }
    }
}
class po extends ae {
    __zOrder = -1;
    constructor() {
        super()
    }
}
class fo {
    active = !1;
    retained = !0;
    sprite = new po;
    pos = m.create(0, 0);
    scale = 1;
    alpha = 1;
    visible = !0;
    pulse = !1;
    lifetime = 0;
    ticker = 0;
    zOrder = 0;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(1, 1),
        this.sprite.visible = !1
    }
    init() {
        this.active = !0,
        this.retained = !0,
        this.pos = m.create(0, 0),
        this.scale = 1,
        this.alpha = 1,
        this.pulse = !1,
        this.visible = !0,
        this.lifetime = Number.MAX_VALUE,
        this.ticker = 0,
        this.zOrder = 0
    }
    free() {
        this.active = !1,
        this.sprite.visible = !1
    }
    release() {
        this.retained = !1
    }
}
class wo {
    container = new se;
    mapSprites = [];
    free() {
        for (let e = 0; e < this.mapSprites.length; e++) {
            const t = this.mapSprites[e].sprite;
            t.parent?.removeChild(t),
            t.destroy({
                children: !0
            })
        }
    }
    addSprite() {
        let e = null;
        for (let t = 0; t < this.mapSprites.length; t++)
            if (!this.mapSprites[t].active) {
                e = this.mapSprites[t];
                break
            }
        return e || (e = new fo,
        this.mapSprites.push(e),
        this.container.addChild(e.sprite)),
        e.init(),
        e
    }
    update(e, t, i) {
        let r = !1;
        for (let s = 0; s < this.mapSprites.length; s++) {
            const a = this.mapSprites[s];
            if (a.active) {
                a.zOrder != a.sprite.__zOrder && (a.sprite.__zOrder = a.zOrder,
                r = !0),
                a.ticker += e,
                a.pulse && (a.scale += e / 2.5);
                const o = t.getMapPosFromWorldPos(a.pos, i)
                  , h = a.scale
                  , f = b.smoothstep(a.ticker, 0, .1) * (1 - b.smoothstep(a.ticker, a.lifetime - .5, a.lifetime));
                a.sprite.position.set(o.x, o.y),
                a.sprite.scale.set(h, h),
                a.sprite.alpha = a.alpha * f,
                a.sprite.visible = a.visible && a.sprite.alpha > 1e-4,
                a.ticker >= a.lifetime && !a.retained && a.free()
            }
        }
        r && this.container.children.sort( (s, a) => s.__zOrder - a.__zOrder)
    }
}
const Ot = 24;
class So {
    container = new se;
    timerBackground = ae.from("timer-background.img");
    counterText = new Mt;
    gfx = new Me;
    labelText = new Mt;
    screenScaleFactor = 1;
    mobileOffset = 0;
    active = !1;
    label = "";
    elapsed = 0;
    duration = 0;
    constructor() {
        this.container.visible = !1,
        this.timerBackground.anchor.set(.5, .5),
        this.timerBackground.scale.set(1, 1),
        this.container.addChild(this.timerBackground),
        this.container.addChild(this.gfx),
        this.counterText.anchor.set(.5, .5),
        this.counterText.style = {
            fontFamily: "Roboto Condensed, Arial, sans-serif",
            fontWeight: "bold",
            fontSize: Ot,
            align: "center",
            fill: 16777215,
            stroke: 0,
            strokeThickness: 3
        },
        this.container.addChild(this.counterText),
        this.labelText.anchor.set(.5, .5),
        this.labelText.style = {
            fontFamily: "Roboto Condensed, Arial, sans-serif",
            fontWeight: "100",
            fontSize: Ot,
            align: "center",
            fill: 16777215
        },
        this.container.addChild(this.labelText)
    }
    destroy() {
        this.container.removeChild(this.timerBackground),
        this.timerBackground.destroy({
            children: !0
        }),
        this.container.destroy({
            children: !0,
            texture: !0
        })
    }
    start(e, t, i) {
        this.active = !0,
        this.label = e,
        this.elapsed = t,
        this.duration = i
    }
    stop() {
        this.active = !1
    }
    resize(e, t) {
        this.screenScaleFactor = t,
        B.uiLayout == B.UiLayout.Sm ? (B.tablet || this.container.scale.set(.5, .5),
        this.mobileOffset = B.isLandscape ? e.mobileOffsetLandscape : e.mobileOffsetPortrait) : (this.container.scale.set(1, 1),
        this.mobileOffset = 0)
    }
    update(e, t) {
        if (!this.active) {
            this.container.visible = !1;
            return
        }
        this.elapsed = b.min(this.elapsed + e, this.duration);
        const i = 56 + this.label.length * Ot * .45
          , r = Ot * 1.5
          , s = 0 - i / 2
          , a = 87.5 - r / 2
          , o = b.min(this.elapsed / this.duration, 1) * Math.PI * 2 - Math.PI * .5;
        this.gfx.clear(),
        this.gfx.beginFill(0, .5),
        this.gfx.drawRoundedRect(s, a, i, r, 5),
        this.gfx.endFill(),
        this.gfx.lineStyle(6, 16777215),
        this.gfx.arc(0, 0, 35, -Math.PI * .5, o, !1),
        this.counterText.text = b.max(0, this.duration - this.elapsed).toFixed(1),
        this.labelText.position.y = 87.5,
        this.labelText.text = this.label,
        this.container.position.set(t.zaTP / 2, t.XbB / 3 * this.screenScaleFactor + this.mobileOffset),
        this.container.visible = !0
    }
}
function sr(l) {
    const e = Math.floor(l / 3600)
      , t = Math.floor(l / 60) % 60
      , i = Math.floor(l) % 60;
    let r = "";
    return e > 0 && (r += `${e}h `),
    (e > 0 || t > 0) && (r += `${t}m `),
    r += `${i}s`
}
function ai(l, e, t, i) {
    const r = l + (e - l) / t * i;
    return Math.floor(r)
}
class bt {
    constructor(e, t, i) {
        this.r = e,
        this.g = t,
        this.b = i
    }
    getColors() {
        return {
            r: this.r,
            g: this.g,
            b: this.b
        }
    }
}
class go {
    constructor(e, t, i, r, s, a, o, h, f) {
        this.game = e,
        this.audioManager = t,
        this.particleBarn = i,
        this.planeBarn = r,
        this.localization = s,
        this.canvasMode = a,
        this.touch = o,
        this.inputBinds = h,
        this.inputBindUi = f,
        this.game = e,
        this.particleBarn = i,
        this.localization = s,
        this.touch = o,
        this.inputBinds = h,
        this.inputBindUi = f,
        this.roleMenuConfirm.on("click", w => {
            w.stopPropagation(),
            this.roleSelected = this.roleDisplayed,
            this.setRoleMenuActive(!1)
        }
        ),
        c("#ui-map-wrapper").css("display", "block"),
        c("#ui-team").css("display", "block"),
        c(".ui-map-expand").on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        c(".ui-map-expand").on("click", w => {
            B.touch ? this.bigmapDisplayed || this.displayMapLarge() : B.uiLayout == B.UiLayout.Lg && this.displayMapLarge(this.bigmapDisplayed)
        }
        ),
        c("#ui-map-minimize").on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        c("#ui-map-minimize").on("click", w => {
            w.stopPropagation(),
            this.toggleMiniMap()
        }
        ),
        c("#ui-menu-display").on("click", w => {
            w.stopPropagation(),
            this.toggleEscMenu()
        }
        ),
        this.moveStyleButton.on("touchstart", () => {
            o.toggleMoveStyle()
        }
        ),
        this.aimStyleButton.on("touchstart", () => {
            o.toggleAimStyle()
        }
        ),
        this.aimLineButton.on("touchstart", () => {
            o.toggleAimLine()
        }
        ),
        this.onTouchScreen = w => {
            w.target?.id == "cvs" && this.toggleEscMenu(!0)
        }
        ,
        c(document).on("touchstart", this.onTouchScreen),
        this.bigmapClose = c("#big-map-close"),
        this.bigmapClose.on("touchend", w => {
            w.stopPropagation(),
            this.displayMapLarge(!0)
        }
        ),
        this.bigmapClose.on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        this.bigmapClose.on("click", w => {
            w.stopPropagation(),
            this.displayMapLarge(!0)
        }
        ),
        this.gameTabBtns.on("click", w => {
            this.setCurrentGameTab(c(w.target).data("tab"))
        }
        ),
        this.setCurrentGameTab(this.currentGameTab),
        this.fullScreenButton.on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        this.fullScreenButton.on("click", () => {
            X.toggleFullScreen(),
            this.toggleEscMenu()
        }
        ),
        c("#btn-game-fullscreen").css("display", we.isAnySDK ? "none" : "block"),
        this.resumeButton.on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        this.resumeButton.on("click", () => {
            this.toggleEscMenu()
        }
        ),
        B.touch && this.resumeButton.css("display", "none"),
        c("#btn-spectate-quit").on("click", () => {
            this.quitGame()
        }
        ),
        c("#btn-game-quit").on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        c("#btn-game-quit").on("click", () => {
            this.game.IAmJ = !0,
            this.game.hva = 1,
            this.quitGame()
        }
        ),
        this.specStatsButton.on("click", () => {
            this.toggleLocalStats()
        }
        ),
        this.specNextButton.on("click", () => {
            this.specNext = !0
        }
        ),
        this.specPrevButton.on("click", () => {
            this.specPrev = !0
        }
        ),
        this.interactionElems.css("pointer-events", "auto"),
        this.interactionElems.on("touchstart", w => {
            w.stopPropagation(),
            this.interactionTouched = !0
        }
        ),
        this.reloadElems.css("pointer-events", "auto"),
        this.reloadElems.on("touchstart", w => {
            w.stopPropagation(),
            this.reloadTouched = !0
        }
        ),
        this.gasRenderer = new Br(a,0),
        this.resetWeapSlotStyling = () => {
            this.weapDraggedDiv && (this.weapSwitches.css({
                left: "",
                top: ""
            }),
            c("#ui-game").css({
                "pointer-events": ""
            })),
            this.weapDraggedDiv = null,
            this.weapDragging = !1,
            this.weapDropped = !1,
            this.weapSwitches.hasClass("ui-weapon-dragged") && this.weapSwitches.removeClass("ui-weapon-dragged"),
            this.weapNoSwitches.hasClass("ui-outline-hover") || this.weapNoSwitches.addClass("ui-outline-hover")
        }
        ,
        B.touch || (this.weapSwitches.on("mousedown", w => {
            const S = w.currentTarget;
            w.button == 0 && (this.weapDraggedDiv = c(S),
            this.weapDraggedId = c(S).data("slot"))
        }
        ),
        c("#ui-game").on("mousemove", w => {
            this.weapDraggedDiv && !this.weapDropped && (this.weapDragging ? (this.weapDraggedDiv.css({
                left: w.pageX - 80,
                top: w.pageY - 30
            }),
            this.weapDraggedDiv.addClass("ui-weapon-dragged")) : (c("#ui-game").css({
                "pointer-events": "initial"
            }),
            this.weapNoSwitches.removeClass("ui-outline-hover"),
            this.weapDragging = !0))
        }
        ),
        c("#ui-game, #ui-weapon-id-1, #ui-weapon-id-2").on("mouseup", w => {
            w.button == 0 && this.weapDraggedDiv != null && (this.weapSwitches.each( () => {
                const S = c(w.currentTarget).data("slot");
                c(w.currentTarget).is(":hover") && this.weapDraggedId != S && (this.swapWeapSlots = !0,
                this.weapDropped = !0)
            }
            ),
            this.swapWeapSlots || this.resetWeapSlotStyling())
        }
        )),
        this.mapIndicatorBarn = new co(this.mapSpriteBarn),
        this.container.mask = new Me,
        this.display = {
            gas: this.gasRenderer.display,
            gasSafeZone: this.gasSafeZoneRenderer.display,
            airstrikeZones: r.airstrikeZoneContainer,
            mapSprites: this.mapSpriteBarn.container,
            teammates: new se,
            player: new se,
            border: new Me
        },
        this.mapSprite.anchor = new zi(.5,.5),
        this.container.addChild(this.mapSprite),
        this.container.addChild(this.display.gas),
        this.container.addChild(this.display.gasSafeZone),
        this.container.addChild(this.display.airstrikeZones),
        this.container.addChild(this.display.mapSprites),
        this.container.addChild(this.display.teammates),
        this.container.addChild(this.display.player),
        this.container.addChild(this.display.border);
        const u = this.getMinimapMargin()
          , d = this.getMinimapSize();
        this.minimapPos = m.create(u + d / 2, e.PNwB.XbB - d / 2 - u),
        this.muteButtonImage = this.muteButton.find("img");
        const p = this.audioManager.mute;
        this.muteButtonImage.attr("src", p ? this.muteOffImg : this.muteOnImg),
        this.muteButton.on("mousedown", w => {
            w.stopPropagation()
        }
        ),
        this.muteButton.on("click", w => {
            let S = this.audioManager.muteToggle();
            this.muteButtonImage.attr("src", S ? this.muteOffImg : this.muteOnImg),
            S = null
        }
        ),
        this.teamMemberHealthBarWidth = parseInt(c(".ui-team-member-health").find(".ui-bar-inner").css("width"));
        for (let w = 0; w < 4; w++) {
            const S = this.topLeft
              , g = w;
            this.teamSelectors.push({
                teamNameHtml: "",
                groupId: c(S).find(`[data-id=${g}]`),
                groupIdDisplayed: !1,
                teamName: c(S).find(`[data-id=${g}]`).find(".ui-team-member-name"),
                teamIcon: c(S).find(`[data-id=${g}]`).find(".ui-team-member-icon"),
                teamStatus: c(S).find(`[data-id=${g}]`).find(".ui-team-member-status"),
                teamHealthInner: c(S).find(`[data-id=${g}]`).find(".ui-health-actual"),
                teamColor: c(S).find(`[data-id=${g}]`).find(".ui-team-member-color"),
                playerId: 0,
                prevHealth: 0,
                prevStatus: {
                    disconnected: !1,
                    dead: !1,
                    downed: !1,
                    role: ""
                },
                indicators: {
                    main: {
                        elem: c("#ui-team-indicators").find(`.ui-indicator-main[data-id=${g}]`),
                        displayed: !1
                    }
                }
            })
        }
        this.init()
    }
    Tad = new So;
    gameElem = c("#ui-game");
    statsMain = c("#ui-stats");
    statsElem = c("#ui-stats-bg");
    statsContentsContainer = c("#ui-stats-contents");
    statsContents = c("#ui-stats-contents-inner");
    statsHeader = c("#ui-stats-header");
    statsInfoBox = c("#ui-stats-info-box");
    statsOptions = c("#ui-stats-options");
    statsAds = c(".ui-stats-ad-container");
    statsLogo = c("#ui-stats-logo");
    escMenuElem = c("#ui-game-menu");
    escMenuDisplayed = !1;
    roleMenuElemWrapper = c("#ui-role-menu-wrapper");
    roleMenuElem = c("#ui-role-menu");
    roleMenuFooterEnterElem = c("#ui-role-footer-enter");
    roleMenuFooterHtml = "";
    roleMenuActive = !1;
    roleMenuDisplayed = !1;
    roleMenuTicker = 0;
    roleDisplayed = "";
    roleSelected = "";
    roleMenuConfirm = c("#ui-role-footer-enter");
    roleMenuInst = null;
    topLeft = c("#ui-top-left");
    waitingForPlayers = !0;
    waitingText = c("#ui-waiting-text");
    spectating = !1;
    prevSpectatorCount = 0;
    spectatorCount = 0;
    spectatorCounterDisplayed = !1;
    spectatorCounterContainer = c("#ui-spec-counter");
    spectatorCounter = c("#ui-spec-counter-number");
    spectateMode = c(".ui-spectate-mode");
    spectatedPlayerText = c("#ui-spectate-text");
    spectatedPlayerName = "";
    spectatedPlayerId = 0;
    spectateModeStats = c("#ui-spectate-stats");
    spectateModeStatsData = c("#ui-spectate-stats-data");
    spectateOptionsWrapper = c("#ui-spectate-options-wrapper");
    rightCenter = c("#ui-right-center");
    leaderboardAlive = c("#ui-leaderboard-alive");
    playersAlive = c(".js-ui-players-alive");
    leaderboardAliveFaction = c("#ui-leaderboard-alive-faction");
    playersAliveRed = c(".js-ui-players-alive-red");
    playersAliveBlue = c(".js-ui-players-alive-blue");
    playersAliveRedCounter = 0;
    playersAliveBlueCounter = 0;
    playerKills = c(".js-ui-player-kills");
    announcement = c("#ui-announcement");
    killLeaderName = c("#ui-kill-leader-name");
    killLeaderCount = c("#ui-kill-leader-count");
    mapContainer = c("#ui-map-container");
    mapContainerBottom = 52;
    mapInfo = c("#ui-map-info");
    mapInfoBottom = 218;
    gasState = {};
    gasIcon = c("#ui-gas-icon");
    gasTimer = c("#ui-gas-timer");
    mapMinimizeButton = c("#ui-map-minimize");
    menuDisplayButton = c("#ui-menu-display");
    bottomCenterRight = c("#ui-bottom-center-right");
    actionSeq = -1;
    displayMapDirty = !1;
    displayMapClear = !1;
    gameTabs = c(".ui-game-tab");
    gameTabBtns = c(".btn-game-tab-select");
    gameKeybindBtns = c(".btn-keybind-desc");
    currentGameTab = "settings";
    onTouchScreen;
    bigmap = c("#big-map");
    bigmapCollision = c("#big-map-collision");
    bigmapClose = c("#big-map-close");
    moveStyleButton = c("#btn-game-move-style");
    aimLineButton = c("#btn-game-aim-line");
    aimStyleButton = c("#btn-game-aim-style");
    fullScreenButton = c("#btn-game-fullscreen");
    resumeButton = c("#btn-game-resume");
    specStatsButton = c("#btn-spectate-view-stats");
    specBegin = !1;
    specNext = !1;
    specPrev = !1;
    specNextButton = c("#btn-spectate-next-player");
    specPrevButton = c("#btn-spectate-prev-player");
    interactionElems = c("#ui-interaction-press, #ui-interaction");
    interactionTouched = !1;
    reloadElems = c("#ui-current-clip, #ui-remaining-ammo, #ui-reload-button-container");
    reloadTouched = !1;
    flairElems = c(".ui-health-flair");
    flairId = 0;
    healthRed = new bt(255,0,0);
    healthDarkpink = new bt(255,45,45);
    healthLightpink = new bt(255,112,112);
    healthWhite = new bt(255,255,255);
    healthGrey = new bt(179,179,179);
    minimapDisplayed = !0;
    visibilityMode = 0;
    hudVisible = !0;
    gasRenderer;
    gasSafeZoneRenderer = new pa;
    sentAdStatus = !1;
    frame = 0;
    weapsDirty = !1;
    weapSwitches = c("#ui-weapon-id-1, #ui-weapon-id-2");
    weapNoSwitches = c("#ui-weapon-id-3, #ui-weapon-id-4");
    weapDraggedId = 0;
    swapWeapSlots = !1;
    weapDraggedDiv = null;
    weapDragging = !1;
    weapDropped = !1;
    mapSpriteBarn = new wo;
    mapIndicatorBarn;
    playerMapSprites = [];
    playerPingSprites = {};
    container = new se;
    resetWeapSlotStyling;
    display;
    mapSprite = new ae(J.EMPTY);
    bigmapDisplayed = !1;
    screenScaleFactor = 1;
    minimapPos;
    dead = !1;
    muteButton = c("#ui-mute-ingame");
    muteButtonImage;
    muteOffImg = "audio-off.img";
    muteOnImg = "audio-on.img";
    displayingStats = !1;
    teamMemberHealthBarWidth;
    teamMemberHeight = 48;
    groupPlayerCount = 0;
    teamSelectors = [];
    displayOldMapSprites = !1;
    Obb() {
        this.gasRenderer.free(),
        this.clearUI(),
        this.roleMenuConfirm.off("click"),
        c(".ui-role-option").off("click"),
        c(".ui-map-expand").off("mousedown"),
        c(".ui-map-expand").off("click"),
        c("#ui-map-minimize").off("mousedown"),
        c("#ui-map-minimize").off("click"),
        c("#ui-menu-display").off("click"),
        this.moveStyleButton.off("touchstart"),
        this.aimStyleButton.off("touchstart"),
        this.aimLineButton.off("touchstart"),
        c(document).off("touchstart", this.onTouchScreen),
        this.bigmapClose.off("touchend"),
        this.bigmapClose.off("mousedown"),
        this.bigmapClose.off("click"),
        this.gameTabBtns.off("click"),
        this.fullScreenButton.off("mousedown"),
        this.fullScreenButton.off("click"),
        this.resumeButton.off("mousedown"),
        this.resumeButton.off("click"),
        c("#btn-spectate-quit").off("click"),
        c("#btn-game-quit").off("mousedown"),
        c("#btn-game-quit").off("click"),
        this.specStatsButton.off("click"),
        this.specNextButton.off("click"),
        this.specPrevButton.off("click"),
        this.interactionElems.off("touchstart"),
        this.reloadElems.off("touchstart"),
        this.weapSwitches.off("mousedown"),
        c("#ui-game").off("mousemove"),
        c("#ui-game").off("mouseup"),
        c("#ui-weapon-id-1").off("mouseup"),
        c("#ui-weapon-id-2").off("mouseup"),
        this.muteButton.off("mousedown"),
        this.muteButton.off("click"),
        c(".ui-team-member-health").find(".ui-bar-inner").css("width", this.teamMemberHealthBarWidth),
        c("#ui-center").off("mouseenter mouseleave"),
        this.inputBinds.menuHovered = !1,
        this.hudVisible || this.cycleHud(),
        this.Tad.destroy(),
        this.clearStatsElems(),
        this.setRoleMenuActive(!1),
        this.init()
    }
    init() {
        // hide mini map
        if (window.isStartMapHide) {
            this.hideMiniMap()
        }
        c(".js-ui-map-hidden").css("display", "block"),
        c("#ui-map-counter-default").css("display", "inline-block"),
        c("#ui-map-counter-faction").css("display", "none"),
        this.flairElems.css("display", "none"),
        this.clearStatsElems(),
        this.setSpectating(!1),
        this.updateSpectatorCountDisplay(!0),
        this.resetWeapSlotStyling(),
        this.dead = !1;
        for (let e = 0; e < this.teamSelectors.length; e++)
            this.teamSelectors[e].teamColor.removeAttr("style")
    }
    onMapLoad(e, t) {
        this.resize(e, t);
        const i = e.getMapDef().gameMode.killLeaderEnabled;
        c("#ui-kill-leader-container").css("display", i ? "block" : "none"),
        B.mobile || c("#ui-killfeed-wrapper").css("top", i ? "60px" : "12px")
    }
    nYcwKO(e, t, i, r, s, a, o, h, f) {
        const u = t;
        this.weapsDirty && this.resetWeapSlotStyling(),
        this.weapsDirty = !1,
        this.mapIndicatorBarn.updateIndicatorPulses(e);
        const d = b.max(Math.floor(r.duration * (1 - r.circleT)), 0)
          , p = {
            mode: r.mode,
            time: d
        };
        if (this.gasState.mode != p.mode || this.gasState.time != p.time) {
            this.gasState = p;
            const v = this.gasState.mode == Yt.Moving;
            this.mapInfo.removeClass("icon-pulse"),
            this.gasIcon.removeClass("gas-icon"),
            this.gasIcon.removeClass("danger-icon"),
            v && this.mapInfo.addClass("icon-pulse"),
            this.gasIcon.addClass(v ? "danger-icon" : "gas-icon");
            const k = Math.floor(this.gasState.time / 60)
              , A = `0${this.gasState.time % 60}`.slice(-2);
            this.gasTimer.html(`${k}:${A}`)
        }
        if (this.spectatorCount = t.qWTK.slqeDF,
        this.updateSpectatorCountDisplay(!1),
        t.pjeWp.sTD && !this.dead && (this.dead = !0,
        this.Tad.stop()),
        (u.downed || this.dead) && this.resetWeapSlotStyling(),
        this.actionSeq != t.LJnf.seq && (this.actionSeq = t.LJnf.seq,
        this.Tad.stop(),
        t.LJnf.type != le.None && !this.displayingStats)) {
            let v = ""
              , k = ""
              , _ = "";
            switch (t.LJnf.type) {
            case le.Reload:
            case le.ReloadAlt:
                U[t.LJnf.item] && (k = this.localization.translate("game-reloading"));
                break;
            case le.UseItem:
                U[t.LJnf.item] && (k = this.localization.translate("game-using"),
                _ = this.localization.translate(`game-${t.LJnf.item}`));
                break;
            case le.Revive:
                {
                    const A = a.getPlayerInfo(t.LJnf.targetId).name;
                    k = this.localization.translate("game-reviving"),
                    _ = u.downed ? "" : A;
                    break
                }
            }
            (k != "" || _ != "") && (this.localization.translate("word-order") == "svo" ? (v += k || "",
            v += _ ? ` ${_}` : "") : this.localization.translate("word-order") == "sov" && (v += _ ? `${_} ` : "",
            v += k ? ` ${k}` : ""),
            this.Tad.start(v, t.LJnf.time, t.LJnf.duration))
        }
        this.bigmapDisplayed || (this.mapSprite.x = this.minimapPos.x + this.mapSprite.width / 2 - t.qqPdb.x / i.width * this.mapSprite.width,
        this.mapSprite.y = this.minimapPos.y - this.mapSprite.height / 2 + t.qqPdb.y / i.height * this.mapSprite.height);
        const w = m.create(o.zaTP * .5 / o.kKovr(), o.XbB * .5 / o.kKovr())
          , S = {
            min: m.sub(o.HiVuim, w),
            max: m.add(o.HiVuim, w)
        }
          , g = a.getPlayerInfo(t.__id).groupId
          , y = a.getGroupInfo(g);
        if (!y) {
            const v = {
                playerId: t.__id,
                groupId: g,
                spectating: this.spectating,
                playing: this.game.PTV,
                groupInfo: a.groupInfo
            };
            xe.logError(`badTeamInfo_1: ${JSON.stringify(v)}`)
        }
        const M = B.uiLayout == B.UiLayout.Sm
          , I = y.playerIds.length;
        for (let v = 0; v < I; v++) {
            const k = this.teamSelectors[v]
              , _ = y.playerIds[v]
              , A = a.getPlayerInfo(_)
              , z = _ == u.__id
              , P = a.getPlayerStatus(_);
            if (P && h > Fe.Solo) {
                k.groupIdDisplayed || (k.groupId.css("display", "block"),
                k.groupIdDisplayed = !0),
                this.updateTeam(v, X.htmlEscape(A.name), P.health, {
                    disconnected: P.disconnected,
                    dead: P.dead,
                    downed: P.downed,
                    role: P.role
                }, A.playerId, A.teamId, a);
                for (const T in k.indicators)
                    if (k.indicators.hasOwnProperty(T)) {
                        const C = k.indicators[T]
                          , N = C.elem;
                        let L = !0;
                        if ((!z || C.displayAll) && !f) {
                            const j = P.pos
                              , V = m.normalizeSafe(m.sub(j, o.HiVuim), m.create(1, 0))
                              , E = be.intersectRayAabb(o.HiVuim, V, S.min, S.max)
                              , R = Math.atan2(V.y, -V.x) - Math.PI * .5
                              , G = o.SlQA(E)
                              , K = be.testCircleAabb(j, O.player.radius, S.min, S.max);
                            if (!P.dead && !K) {
                                let oe = 32
                                  , ke = `translate(-50%, -50%) rotate(${R}rad)`;
                                M && (oe = 16,
                                ke += " scale(0.5)"),
                                L = !1,
                                N.css({
                                    left: b.clamp(G.x, oe, o.zaTP - oe),
                                    top: b.clamp(G.y, oe, o.XbB - oe - 0),
                                    transform: ke
                                }),
                                C.displayed || (N.css("display", "block"),
                                C.displayed = !0)
                            }
                        }
                        L && C.displayed && (N.css("display", "none"),
                        C.displayed = !1)
                    }
            }
        }
        for (let v = I; v < this.teamSelectors.length; v++) {
            const k = this.teamSelectors[v];
            for (const _ in k.indicators)
                if (k.indicators.hasOwnProperty(_)) {
                    const A = k.indicators[_];
                    A.displayed && (A.elem.css("display", "none"),
                    A.displayed = !1)
                }
            k.groupIdDisplayed && (k.groupId.css("display", "none"),
            k.groupIdDisplayed = !1)
        }
        if (i.factionMode) {
            const v = a.getPlayerInfo(u.__id);
            if (this.flairId != v.teamId) {
                this.flairId = v.teamId;
                const k = this.flairId == 1 ? "red" : "blue";
                this.flairElems.css({
                    display: "block",
                    "background-image": `url(../img/gui/player-patch-${k}.svg)`
                })
            }
        }
        if (h > Fe.Solo && this.groupPlayerCount != I && B.uiLayout == B.UiLayout.Lg ? (this.groupPlayerCount = I,
        this.spectateOptionsWrapper.css({
            top: this.groupPlayerCount * this.teamMemberHeight + 12
        })) : h == Fe.Solo && this.spectateOptionsWrapper.css({
            top: 12
        }),
        this.updatePlayerMapSprites(e, t, a, i),
        this.mapSpriteBarn.update(e, this, i),
        this.Tad.update(e, o),
        this.roleMenuActive) {
            this.roleMenuTicker -= e;
            const v = Math.ceil(this.roleMenuTicker)
              , k = `${this.localization.translate("game-enter-game")} (${v})`;
            k != this.roleMenuFooterHtml && (this.roleMenuFooterEnterElem.html(k),
            this.roleMenuFooterHtml = k),
            !this.roleMenuInst && this.audioManager.isSoundLoaded("ambient_lab_01", "ambient") && (this.roleMenuInst = this.audioManager.playSound("ambient_lab_01", {
                channel: "ambient"
            })),
            this.roleMenuTicker <= 0 && (this.roleSelected = this.roleDisplayed,
            this.setRoleMenuActive(!1))
        }
    }
    updatePlayerMapSprites(e, t, i, r) {
        const s = i.getPlayerInfo(t.__id);
        let a = 0;
        const o = (f, u, d, p, w, S, g) => {
            if (a >= this.playerMapSprites.length) {
                const M = this.mapSpriteBarn.addSprite();
                this.playerMapSprites.push(M)
            }
            const y = this.playerMapSprites[a++];
            y.pos = m.copy(f),
            y.scale = u,
            y.alpha = d,
            y.visible = p,
            y.zOrder = w,
            y.sprite.texture = J.from(S),
            y.sprite.tint = g
        }
          , h = Object.keys(i.playerStatus);
        for (let f = 0; f < h.length; f++) {
            const u = i.playerStatus[h[f]]
              , d = u.playerId
              , p = i.getPlayerInfo(d)
              , w = p.groupId == s.groupId;
            let S = 65535 + d * 2;
            d == s.playerId && (S += 65535 * 2);
            const g = Tr[u.role]
              , y = g?.mapIcon;
            y && (S += 65535);
            let M = "player-map-inner.img";
            y && (M = g.mapIcon.alive),
            u.dead ? (M = "skull-outlined.img",
            y && (M = g.mapIcon.dead)) : u.downed && (M = w ? "player-map-inner.img" : "player-map-downed.img");
            let I = w ? i.getGroupColor(d) : i.getTeamColor(p.teamId);
            r.factionMode && y && (I = i.getTeamColor(p.teamId));
            const v = B.uiLayout == B.UiLayout.Sm ? .15 : .2;
            let k = v;
            if (k = w ? u.dead ? v * 1.5 : y ? v * 1.25 : v * 1 : u.dead || u.downed || y ? v * 1.25 : v * .75,
            o(u.pos, k, u.minimapAlpha, u.minimapVisible, S, M, I),
            w) {
                const _ = B.uiLayout == B.UiLayout.Sm ? .25 : .3
                  , A = u.minimapVisible && !y;
                o(u.pos, _, u.minimapAlpha, A, S - 1, "player-map-outer.img", 16777215)
            }
        }
        for (let f = this.playerMapSprites.length - 1; f >= a; f--)
            this.playerMapSprites[f].visible = !1
    }
    getMinimapMargin() {
        return B.uiLayout == B.UiLayout.Sm ? 4 : 16
    }
    getMinimapSize() {
        return B.uiLayout == B.UiLayout.Sm ? 192 : 256
    }
    getMinimapBorderWidth() {
        return B.uiLayout == B.UiLayout.Sm ? 1 : 4
    }
    createPing(e, t, i, r, s, a) {
        const o = vt[e];
        if (o) {
            const h = (u, d) => {
                const p = this.mapSpriteBarn.addSprite();
                return p.pos = m.copy(t),
                p.scale = u,
                p.lifetime = o.mapLife,
                p.pulse = !1,
                p.zOrder = 100,
                p.sprite.texture = J.from(o.mapTexture),
                p.sprite.tint = d,
                p
            }
              , f = u => {
                const d = this.mapSpriteBarn.addSprite();
                return d.pos = m.copy(t),
                d.scale = 0,
                d.lifetime = o.pingLife,
                d.pulse = !0,
                d.zOrder = 99,
                d.sprite.texture = J.from("ping-map-pulse.img"),
                d.sprite.tint = u,
                d
            }
            ;
            if (o.mapEvent) {
                const u = (B.uiLayout == B.UiLayout.Sm ? .15 : .2) * 1.5;
                h(u, o.tint).release(),
                f(o.tint).release()
            } else {
                let u = 16777215;
                const d = s.getPlayerInfo(r)
                  , p = s.getPlayerInfo(i)
                  , w = s.getPlayerStatus(i);
                d && p && w && (w.role == "leader" ? u = 65280 : d.groupId == p.groupId ? u = s.getGroupColor(i) : u = s.getTeamColor(p.teamId)),
                this.playerPingSprites[i] || (this.playerPingSprites[i] = []);
                const S = this.playerPingSprites[i];
                for (let I = 0; I < S.length; I++)
                    S[I].free();
                const g = B.uiLayout == B.UiLayout.Sm ? .15 : .2
                  , y = h(g, u)
                  , M = f(u);
                S.push(y),
                S.push(M)
            }
        }
    }
    updateMapSprite(e, t, i, r) {
        e.displayed && (e.life != null && (e.life -= r,
        e.displayed = e.life > 0,
        e.maxLife - e.life < .1 ? t.alpha = (e.maxLife - e.life) / .1 : e.life < .5 ? t.alpha = b.max(e.life / .5, 0) : t.alpha = 1),
        e.pulse && e.displayed && (e.scale = e.scale + r / 2.5,
        t.scale.set(e.scale, e.scale)),
        t.visible = i && t.alpha > 0)
    }
    updateMapIndicators(e) {
        this.mapIndicatorBarn.updateIndicatorData(e)
    }
    getMapPosFromWorldPos(e, t) {
        const i = this.mapSprite.x - this.mapSprite.width / 2 + e.x / t.width * this.mapSprite.width
          , r = this.mapSprite.y + this.mapSprite.height / 2 - e.y / t.height * this.mapSprite.height;
        return m.create(i, r)
    }
    getWorldPosFromMapPos(e, t, i) {
        let r = !1;
        if (this.bigmapDisplayed) {
            const s = (i.zaTP - this.mapSprite.width) / 2;
            let a = (i.XbB - this.mapSprite.height) / 2;
            B.uiLayout == B.UiLayout.Sm && !B.isLandscape && (a = 0),
            r = e.x > s && e.x < i.zaTP - s && e.y > a && e.y < i.XbB - a
        } else if (this.minimapDisplayed) {
            const s = this.getMinimapSize()
              , a = this.getMinimapMargin()
              , h = (s * this.screenScaleFactor + a) * .5;
            r = e.x > this.minimapPos.x - h && e.x < this.minimapPos.x + h && e.y > this.minimapPos.y - h && e.y < this.minimapPos.y + h
        }
        if (r) {
            const s = m.create(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y + this.mapSprite.height / 2)
              , a = (e.x - s.x) / this.mapSprite.width * t.width
              , o = (s.y - e.y) / this.mapSprite.height * t.height;
            return m.create(a, o)
        }
        return !1
    }
    hideAll() {
        this.gameElem.css("display", "none")
    }
    showAll() {
        this.gameElem.css("display", "block")
    }
    setLocalKills(e) {
        this.playerKills.html(e)
    }
    removeAds() {
        if (we.removeAllAds(),
        !window.aiptag)
            return;
        const e = ["728x90", "300x250_2"];
        for (let t = 0; t < e.length; t++) {
            const i = e[t];
            window.aiptag.cmd.display.push( () => {
                window.aipDisplayTag.destroy(`survev-io_${i}`)
            }
            )
        }
    }
    refreshMainPageAds() {
        const e = ["728x90"];
        if (we.isCrazyGames)
            for (let t = 0; t < e.length; t++)
                we.requestAd(e[t]);
        if (window.aiptag)
            for (let t = 0; t < e.length; t++) {
                const i = e[t];
                window.aiptag.cmd.display.push( () => {
                    window.aipDisplayTag.display(`survev-io_${i}`)
                }
                )
            }
    }
    clearUI() {
        this.Tad.stop(),
        this.curAction = {
            type: le.None
        },
        this.displayMapLarge(!0),
        this.displayMiniMap(),
        this.clearStatsElems(),
        this.clearTeamUI(),
        this.toggleEscMenu(!0),
        this.toggleLocalStats(!0),
        this.visibilityMode = 0,
        this.spectatorCount = 0,
        this.setLocalKills(0)
    }
    beginSpectating() {
        this.specBegin = !0
    }
    hideStats() {
        this.displayingStats = !1,
        this.statsMain.css("display", "none"),
        this.statsElem.stop().css({
            display: "none",
            opacity: 0
        }),
        this.statsContents.stop().hide()
    }
    teamModeToString(e) {
        const t = {
            unknown: "game-rank",
            [Fe.Solo]: "game-solo-rank",
            [Fe.Duo]: "game-duo-rank",
            [Fe.Squad]: "game-squad-rank"
        }
          , i = t[e] || t.unknown;
        return this.localization.translate(i)
    }
    getTitleVictoryText(e, t) {
        if (e)
            return `${this.spectatedPlayerName} ${this.localization.translate("game-won-the-game")}`;
        let i = "game-chicken";
        return t.turkeyMode && (i = "game-turkey"),
        this.localization.translate(i)
    }
    getTitleDefeatText(e, t) {
        return t ? `${this.spectatedPlayerName} ${this.localization.translate("game-player-died")}.` : e > Fe.Solo ? this.localization.translate("game-team-eliminated") : `${this.localization.translate("game-You")} ${this.localization.translate("game-you-died")}.`
    }
    getOverviewElems(e, t, i, r) {
        if (r) {
            const s = this.localization.translate("game-red-team")
              , a = this.localization.translate("game-blue-team");
            return `<div class="ui-stats-header-right ui-stats-header-red-team"><span class="ui-stats-header-stat">${s} </span><span class="ui-stats-header-value">${this.playersAliveRedCounter}</span></div><div class="ui-stats-header-left ui-stats-header-blue-team"><span class="ui-stats-header-stat">${a} </span><span class="ui-stats-header-value">${this.playersAliveBlueCounter}</span></div>`
        }
        return e == Fe.Solo ? `<div><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div>` : `<div class="ui-stats-header-right"><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div><div class="ui-stats-header-left"><span class="ui-stats-header-stat">${this.localization.translate("game-team-kills")} </span><span class="ui-stats-header-value">${i}</span></div>`
    }
    quitGame() {
        this.game.DdhhuT = !0,
        this.refreshMainPageAds(),
        this.game.onQuit()
    }
    showStats(e, t, i, r, s, a, o, h, f, u, d, p) {
        if (!h || t == a || s) {
            this.toggleEscMenu(!0),
            this.displayingStats = !0,
            this.Tad.stop(),
            this.displayMapLarge(!0),
            this.clearStatsElems(),
            this.setSpectating(!1, o),
            this.removeAds(),
            this.statsMain.css("display", "block"),
            this.statsLogo.css("display", "block"),
            this.statsContentsContainer.css({
                top: ""
            }),
            this.statsInfoBox.css({
                height: ""
            });
            const S = a == r ? 1750 : 2500;
            this.setBannerAd(S, p);
            const g = a == r || h && r == t
              , y = h && a != t
              , M = g ? this.getTitleVictoryText(y, d.getMapDef().gameMode) : this.getTitleDefeatText(o, y);
            let I = 0;
            for (let j = 0; j < e.length; j++)
                I += e[j].kills;
            const v = this.getOverviewElems(o, i, I, d.getMapDef().gameMode.factionMode)
              , k = c("<div/>").append(c("<div/>", {
                class: "ui-stats-header-title",
                html: M
            })).append(c("<div/>", {
                class: "ui-stats-header-overview",
                html: v
            }));
            this.statsHeader.html(k);
            const _ = (j, V) => c("<div/>", {
                class: "ui-stats-info"
            }).append(c("<div/>", {
                html: j
            })).append(c("<div/>", {
                html: V
            }))
              , A = B.uiLayout != B.UiLayout.Sm || B.tablet ? 250 : 125;
            let z = 0;
            z -= (e.length - 1) * A / 2,
            z -= (e.length - 1) * 10;
            for (let j = 0; j < e.length; j++) {
                const V = e[j]
                  , E = f.getPlayerInfo(V.playerId)
                  , R = sr(V.timeAlive);
                let G = "ui-stats-info-player";
                G += V.dead ? " ui-stats-info-status" : "";
                const K = (oe => c("<div/>", {
                    class: oe
                }))(G);
                if (K.css("left", z),
                K.append(c("<div/>", {
                    class: "ui-stats-info-player-name",
                    html: X.htmlEscape(E.name)
                })),
                K.append(_(this.localization.translate("game-kills"), `${V.kills}`)).append(_(this.localization.translate("game-damage-dealt"), V.damageDealt)).append(_(this.localization.translate("game-damage-taken"), V.damageTaken)).append(_(this.localization.translate("game-survived"), R)),
                d.getMapDef().gameMode.factionMode && s)
                    switch (j) {
                    case 1:
                        K.append(c("<div/>", {
                            class: "ui-stats-info-player-badge ui-stats-info-player-red-leader"
                        }));
                        break;
                    case 2:
                        K.append(c("<div/>", {
                            class: "ui-stats-info-player-badge ui-stats-info-player-blue-leader"
                        }));
                        break;
                    case 3:
                        {
                            const oe = E.teamId == 1 ? "ui-stats-info-player-red-ribbon" : "ui-stats-info-player-blue-ribbon";
                            K.append(c("<div/>", {
                                class: `ui-stats-info-player-badge ${oe}`
                            }))
                        }
                    }
                this.statsInfoBox.append(K),
                z += 10
            }
            const P = c("<a/>", {
                class: "ui-stats-restart btn-green btn-darken menu-option",
                html: this.localization.translate("game-play-new-game")
            });
            if (P.on("click", () => {
                this.quitGame()
            }
            ),
            this.statsOptions.append(P),
            s || this.waitingForPlayers)
                P.css({
                    width: B.uiLayout != B.UiLayout.Sm || B.tablet ? 225 : 130
                });
            else {
                P.css({
                    left: B.uiLayout != B.UiLayout.Sm || B.tablet ? -72 : -46
                });
                const j = c("<a/>", {
                    class: "btn-green btn-darken menu-option ui-stats-spectate",
                    html: this.localization.translate("game-spectate")
                });
                j.on("click", this.beginSpectating.bind(this)),
                this.statsOptions.append(j)
            }
            let T = 0;
            const C = 500
              , N = 250 / b.max(1, e.length)
              , L = 750 / b.max(1, e.length);
            this.statsInfoBox.children().each( (j, V) => {
                const E = c(V);
                E.css("opacity", 0),
                E.delay(S + L + (T + j) * N).animate({
                    opacity: 1
                }, C, () => {
                    E.children().each( (R, G) => {
                        c(G).delay(R * N).animate({
                            opacity: 1
                        }, C)
                    }
                    )
                }
                ),
                E.children().each( (R, G) => {
                    c(G).css("opacity", 0),
                    T++
                }
                ),
                T++
            }
            ),
            this.statsOptions.children().each( (j, V) => {
                const E = c(V);
                E.hide();
                const R = S + L + (T + j) * N + 500;
                E.delay(R).fadeIn(C),
                T++
            }
            ),
            this.statsElem.stop(),
            this.statsElem.css("display", "block"),
            this.statsElem.delay(S).animate({
                opacity: 1
            }, 1e3),
            this.statsContents.stop(),
            this.statsContents.css("display", "block"),
            this.statsContents.delay(S).animate({
                opacity: 1
            }, 1e3)
        }
    }
    clearStatsElems() {
        this.statsHeader.empty(),
        this.statsInfoBox.empty(),
        this.statsOptions.empty(),
        this.statsAds.css("display", "none"),
        this.statsContents.stop(),
        this.statsContents.css({
            display: "none",
            opacity: 0
        }),
        this.statsElem.stop(),
        this.statsElem.css({
            display: "none",
            opacity: 0
        }),
        this.statsMain.css("display", "none")
    }
    showTeamAd(e, t) {
        this.toggleEscMenu(!0),
        this.displayMapLarge(!0),
        this.clearStatsElems(),
        this.statsMain.css("display", "block"),
        this.statsLogo.css("display", "none"),
        this.Tad.stop(),
        this.displayingStats = !0,
        this.statsHeader.html(( () => {
            let a = this.localization.translate("game-You");
            a += " ",
            a += this.localization.translate("game-you-died"),
            a += ".";
            let o = `<div><span class="ui-stats-header-stat">${this.localization.translate("game-kills")} </span>`;
            return o += `<span class="ui-stats-header-value">${e.kills}</span></div>`,
            c("<div/>", {
                class: ""
            }).append(c("<div/>", {
                class: "ui-stats-header-title",
                html: a
            })).append(c("<div/>", {
                class: "ui-stats-header-overview",
                html: o
            }))
        }
        )()),
        this.statsContentsContainer.css({
            top: "10%"
        }),
        this.statsInfoBox.css({
            height: 0
        });
        const i = c("<a/>", {
            class: "ui-stats-restart btn-green btn-darken menu-option",
            html: this.localization.translate("game-play-new-game")
        });
        i.on("click", () => {
            this.quitGame()
        }
        ),
        this.statsOptions.append(i),
        i.css({
            left: B.uiLayout != B.UiLayout.Sm || B.tablet ? -72 : -46
        });
        const r = c("<a/>", {
            class: "btn-green btn-darken menu-option ui-stats-spectate",
            html: this.localization.translate("game-spectate")
        });
        r.on("click", this.beginSpectating.bind(this)),
        this.statsOptions.append(r);
        let s = 0;
        this.statsOptions.children().each( (a, o) => {
            const h = c(o);
            h.hide();
            const f = 4100 + (s + a) * 300 + 300;
            h.delay(f).fadeIn(750),
            s++
        }
        ),
        this.statsElem.stop(),
        this.statsElem.css("display", "block"),
        this.statsElem.delay(2500).animate({
            opacity: 1
        }, 1e3),
        this.statsContents.stop(),
        this.statsContents.css("display", "block"),
        this.statsContents.delay(2500).animate({
            opacity: 1
        }, 1e3)
    }
    setBannerAd(e, t) {
        if (!window.aiptag)
            return;
        let i = Math.max(e - 150, 0);
        setTimeout( () => {
            c("#ui-stats-ad-container-desktop").css("display", "inline-block"),
            window.aiptag.cmd.display.push( () => {
                window.aipDisplayTag.display("survev-io_300x250_2")
            }
            ),
            t.hideKillMessage()
        }
        , i)
    }
    setSpectateTarget(e, t, i, r) {
        if (e != this.spectatedPlayerId) {
            this.setSpectating(!0, i);
            const s = r.getPlayerName(e, t, !1);
            this.spectatedPlayerId = e,
            this.spectatedPlayerName = X.htmlEscape(s),
            this.spectatedPlayerText.find("#spectate-player").html(this.spectatedPlayerName),
            this.actionSeq = -1,
            this.Tad.stop()
        }
    }
    setSpectating(e, t) {
        if (this.spectating != e)
            if (this.spectating = e,
            this.spectating) {
                this.spectateMode.css("display", "block"),
                c(".ui-zoom").removeClass("ui-zoom-hover");
                const i = t == Fe.Solo;
                this.specPrevButton.css("display", i ? "none" : "block"),
                this.specNextButton.css("display", i ? "none" : "block"),
                this.hideStats()
            } else
                this.spectateMode.css("display", "none"),
                c(".ui-zoom").addClass("ui-zoom-hover")
    }
    setLocalStats(e) {
        const t = {
            kills: this.localization.translate("game-kills"),
            damageDealt: this.localization.translate("game-damage-dealt"),
            damageTaken: this.localization.translate("game-damage-taken"),
            timeAlive: this.localization.translate("game-survived")
        };
        this.spectateModeStatsData.empty();
        for (const i in t)
            if (t.hasOwnProperty(i)) {
                const r = t[i]
                  , s = i == "timeAlive" ? sr(e[i]) : e[i]
                  , a = `<tr><td class="ui-spectate-stats-category">${r}</td><td class="ui-spectate-stats-value">${s}</td></tr>`;
                this.spectateModeStatsData.append(a)
            }
    }
    toggleLocalStats(e=!1) {
        const t = this.spectateModeStats.css("display") == "none" && !e;
        this.spectateModeStats.css("display", t ? "inline-block" : "none"),
        this.specStatsButton.html(t ? this.localization.translate("game-hide-match-stats") : this.localization.translate("game-view-match-stats"))
    }
    updatePlayersAlive(e) {
        this.playersAlive.html(e),
        this.leaderboardAlive.css("display", "block"),
        this.leaderboardAliveFaction.css("display", "none")
    }
    updatePlayersAliveRed(e) {
        this.playersAliveRed.html(e),
        this.playersAliveRedCounter = e,
        this.leaderboardAlive.css("display", "none"),
        this.leaderboardAliveFaction.css("display", "block"),
        c("#ui-map-counter-default").css("display", "none"),
        c("#ui-map-counter-faction").css("display", "inline-block")
    }
    updatePlayersAliveBlue(e) {
        this.playersAliveBlue.html(e),
        this.playersAliveBlueCounter = e,
        this.leaderboardAlive.css("display", "none"),
        this.leaderboardAliveFaction.css("display", "block"),
        c("#ui-map-counter-default").css("display", "none"),
        c("#ui-map-counter-faction").css("display", "inline-block")
    }
    updateKillLeader(e, t, i, r) {
        const s = e != 0
          , a = r?.sniperMode ? this.localization.translate("game-waiting-for-hunted") : this.localization.translate("game-waiting-for-new-leader");
        this.killLeaderName.html(s ? t : a),
        this.killLeaderCount.html(s ? i : 0)
    }
    displayMapLarge(e) {
        this.bigmapDisplayed = !e && !this.bigmapDisplayed,
        this.bigmapDisplayed ? this.container.alpha = 1 : this.container.alpha = this.minimapDisplayed ? 1 : 0;
        let t = B.uiLayout == B.UiLayout.Sm ? ".js-ui-mobile-map-hidden" : "js-ui-desktop-map-hidden";
        t += ", .js-ui-map-hidden",
        c(this.visibilityMode == 2 ? ".js-ui-hud-show" : t).css("display", this.bigmapDisplayed ? "none" : "block"),
        c(".js-ui-map-show").css("display", this.bigmapDisplayed ? "block" : "none"),
        this.updateSpectatorCountDisplay(!0),
        this.redraw(this.game.PNwB)
    }
    updateSpectatorCountDisplay(e) {
        const t = !this.bigmapDisplayed && this.spectatorCount > 0;
        e = e || this.spectatorCount > 0 && !this.spectatorCounterDisplayed || this.spectatorCount == 0 && this.spectatorCounterDisplayed,
        this.spectatorCount != this.prevSpectatorCount && (this.spectatorCounter.html(this.spectatorCount),
        this.prevSpectatorCount = this.spectatorCount),
        e && (this.spectatorCounterContainer.css("display", t ? "block" : "none"),
        this.spectatorCounterDisplayed = t)
    }
    toggleMiniMap() {
        this.minimapDisplayed ? this.hideMiniMap() : this.displayMiniMap()
    }
    cycleVisibilityMode() {
        if (!this.bigmapDisplayed)
            switch (this.visibilityMode) {
            case 0:
                this.hideMiniMap(),
                this.visibilityMode = 1;
                break;
            case 1:
                this.displayMiniMap(),
                this.visibilityMode = 0
            }
    }
    cycleHud() {
        this.gameElem.css("display") == "none" ? (this.gameElem.css("display", "block"),
        this.displayMiniMap(),
        this.hudVisible = !0) : (this.gameElem.css("display", "none"),
        this.hideMiniMap(),
        this.hudVisible = !1)
    }
    hideMiniMap() {
        this.bigmapDisplayed || (this.minimapDisplayed = !1,
        this.container.alpha = 0,
        this.mapInfo.css("bottom", "auto"),
        this.spectatorCounterContainer.css({
            bottom: 6,
            left: 98
        }))
    }
    displayMiniMap() {
        if (!this.bigmapDisplayed) {
            const e = B.uiLayout == B.UiLayout.Sm;
            this.minimapDisplayed = !0,
            this.container.alpha = 1,
            this.mapInfo.css("bottom", this.mapInfoBottom),
            this.spectatorCounterContainer.css({
                bottom: e ? 0 : 218,
                left: e ? 0 : 6
            })
        }
    }
    displayAnnouncement(e) {
        e && (this.announcement.html(e),
        this.announcement.fadeIn(400, () => {
            setTimeout( () => {
                this.announcement.fadeOut(800)
            }
            , 3e3)
        }
        ))
    }
    displayGasAnnouncement(e, t) {
        let i = "";
        switch (e) {
        case Yt.Waiting:
            {
                i = this.localization.translate("game-red-zone-advances");
                const r = Math.floor(t / 60)
                  , s = t - r * 60;
                i += r > 1 ? ` ${r} ${this.localization.translate("game-minutes")}` : "",
                i += r == 1 ? ` ${r} ${this.localization.translate("game-minute")}` : "",
                i += s > 0 ? ` ${Math.floor(s)} ${this.localization.translate("game-seconds")}` : "";
                break
            }
        case Yt.Moving:
            i = this.localization.translate("game-red-zone-advancing");
            break
        }
        this.displayAnnouncement(i)
    }
    setWaitingForPlayers(e) {
        this.waitingForPlayers = e,
        this.waitingText.css("display", e ? "block" : "none")
    }
    FQpmn(e, t, i, r, s, a) {
        const o = t.getCircle(1)
          , h = this.getMapPosFromWorldPos(o.pos, r)
          , f = this.getMapPosFromWorldPos(m.add(o.pos, m.create(o.rad, 0)), r)
          , u = m.length(m.sub(f, h));
        this.gasRenderer.render(h, u, t.isActive());
        const d = t.circleNew
          , p = this.getMapPosFromWorldPos(d.pos, r)
          , w = this.getMapPosFromWorldPos(m.add(d.pos, m.create(d.rad, 0)), r)
          , S = m.length(m.sub(w, p))
          , g = this.getMapPosFromWorldPos(e, r)
          , y = t.isActive()
          , M = t.isActive() && !this.bigmapDisplayed;
        this.gasSafeZoneRenderer.render(p, S, g, y, M),
        s.renderAirstrikeZones(this, r, a)
    }
    updateHealthBar(e, t, i, r) {
        const s = e;
        let a = r.health * .01 * s;
        a = r.dead ? 0 : b.max(a, 1),
        t.css("width", a),
        a > 0 && i?.css("width", a);
        const o = r.health;
        let h = this.healthRed
          , f = this.healthDarkpink;
        if (o > 25) {
            if (r.downed)
                t.css({
                    backgroundColor: "red"
                });
            else {
                b.eqAbs(o, 100, .2) ? (h = this.healthGrey,
                f = this.healthGrey) : b.eqAbs(o, 75, .2) || o >= 75 ? (h = this.healthWhite,
                f = this.healthWhite) : (h = this.healthDarkpink,
                f = this.healthLightpink);
                const u = h.getColors()
                  , d = f.getColors()
                  , p = ai(u.r, d.r, 45, o)
                  , w = ai(u.g, d.g, 45, o)
                  , S = ai(u.b, d.b, 45, o);
                t.css({
                    backgroundColor: `rgba(${p},${w},${S},1)`
                })
            }
            t.removeClass("ui-bar-danger")
        } else
            t.addClass("ui-bar-danger")
    }
    updateTeam(e, t, i, r, s, a, o) {
        const h = this.teamSelectors[e].groupId
          , f = this.teamSelectors[e].teamName
          , u = this.teamSelectors[e].prevHealth
          , d = this.teamSelectors[e].prevStatus
          , p = r.dead != d.dead || r.disconnected != d.disconnected || r.downed != d.downed || r.role != d.role;
        if (this.teamSelectors[e].playerId != s || i != u || p) {
            const w = this.teamSelectors[e].teamStatus
              , S = this.teamSelectors[e].teamHealthInner;
            this.teamSelectors[e].playerId = s,
            this.teamSelectors[e].teamNameHtml = t,
            f.html(t),
            this.updateHealthBar(this.teamMemberHealthBarWidth, S, null, {
                health: i,
                dead: r.dead,
                downed: r.downed
            }),
            p && (w.attr("class", "ui-team-member-status"),
            r.disconnected ? w.addClass("ui-team-member-status-disconnected") : r.dead ? w.addClass("ui-team-member-status-dead") : r.downed && w.addClass("ui-team-member-status-downed").addClass("icon-pulse"),
            f.css("opacity", r.disconnected || r.dead ? .3 : 1)),
            h.css("display", "block"),
            this.teamSelectors[e].prevStatus = r,
            this.teamSelectors[e].prevHealth = i
        }
    }
    clearTeamUI() {
        c(".ui-team-member").css("display", "none"),
        c(".ui-team-indicator").css("display", "none"),
        c(".ui-team-member-name").removeAttr("style"),
        c(".ui-team-member-status").removeAttr("style"),
        c(".ui-team-member-status").removeClass("ui-team-member-status-downed ui-team-member-status-dead ui-team-member-status-disconnected icon-pulse"),
        this.teamSelectors = []
    }
    resize(e, t) {
        this.screenScaleFactor = B.uiLayout == B.UiLayout.Sm ? .5626 : b.min(1, b.clamp(t.zaTP / 1280, .75, 1) * b.clamp(t.XbB / 1024, .75, 1)),
        this.Tad.resize(this.touch, this.screenScaleFactor),
        this.gasRenderer.resize(),
        this.mapSprite.texture = e.getMapTexture();
        const i = b.min(1, b.min(t.zaTP / 1200, t.XbB / 900));
        this.roleMenuElem.css("transform", `translateX(-50%) translateY(-50%) scale(${i})`),
        this.redraw(t)
    }
    redraw(e) {
        const t = e.zaTP
          , i = e.XbB
          , r = this.getMinimapMargin();
        let s = 0
          , a = 0;
        B.model == "iphonex" && (B.isLandscape ? s += 28 : a += 32);
        const o = this.getMinimapSize()
          , h = this.getMinimapBorderWidth()
          , f = B.uiLayout == B.UiLayout.Sm;
        if (this.display.border.clear(),
        this.container.mask?.clear(),
        this.bigmapDisplayed) {
            const u = b.min(t, i);
            this.mapSprite.width = u,
            this.mapSprite.height = u,
            this.mapSprite.x = t / 2,
            this.mapSprite.y = i / 2,
            this.mapSprite.alpha = 1,
            this.container.mask.beginFill(16777215, 1),
            this.container.mask.drawRect(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y - this.mapSprite.height / 2, this.mapSprite.width, this.mapSprite.height),
            this.container.mask.endFill(),
            B.touch && this.bigmapCollision.css({
                width: i,
                height: t
            })
        } else {
            const u = this.screenScaleFactor * 1600 / 1.2
              , d = o * this.screenScaleFactor;
            this.mapSprite.width = u,
            this.mapSprite.height = u,
            this.mapSprite.alpha = .8;
            let p = {
                zoom: this.screenScaleFactor
            };
            document.body && ("WebkitTransform"in document.body.style ? p = {
                "-webkit-transform": `scale(${this.screenScaleFactor})`
            } : "transform"in document.body.style && (p = {
                transform: `scale(${this.screenScaleFactor})`
            })),
            this.mapContainer.css(p),
            this.mapContainer.css("bottom", this.mapContainerBottom * this.screenScaleFactor);
            const w = f ? d / 2 + r : i - d / 2 - r;
            this.minimapPos.x = r + d / 2 + s,
            this.minimapPos.y = w + a,
            this.display.border.lineStyle(h, 0),
            this.display.border.beginFill(0, 0);
            const S = f ? r + h / 2 : i - d - r + h / 2;
            this.display.border.drawRect(r + h / 2 + s, S + a, d - h, d - h),
            this.display.border.endFill();
            const g = f ? r : i - d - r;
            this.container.mask.beginFill(16777215, 1),
            this.container.mask.drawRect(r + s, g - .5 + a, d, d),
            this.container.mask.endFill()
        }
    }
    toggleEscMenu(e=!1) {
        this.displayingStats || (this.escMenuDisplayed || e ? (this.escMenuDisplayed = !1,
        this.escMenuElem.css("display", "none"),
        this.setCurrentGameTab("settings"),
        c("#ui-center").off("mouseenter mouseleave"),
        this.inputBinds.menuHovered = !1,
        this.roleMenuActive && this.displayRoleMenu()) : this.bigmapDisplayed ? this.displayMapLarge(!0) : (this.visibilityMode == 2 && this.cycleVisibilityMode(),
        this.escMenuDisplayed = !0,
        this.escMenuElem.css("display", "block"),
        c("#ui-center").hover( () => {
            this.inputBinds.menuHovered = !0
        }
        , () => {
            this.inputBinds.menuHovered = !1
        }
        ),
        this.inputBinds.menuHovered = !1,
        this.roleMenuActive && this.hideRoleMenu()))
    }
    setCurrentGameTab(e) {
        this.currentGameTab = e,
        this.gameTabs.css("display", "none"),
        this.gameTabBtns.removeClass("btn-game-menu-selected"),
        c(`#ui-game-tab-${this.currentGameTab}`).css("display", "block"),
        c(`#btn-game-${this.currentGameTab}`).addClass("btn-game-menu-selected"),
        this.currentGameTab == "keybinds" ? this.inputBindUi.refresh() : this.inputBindUi.cancelBind()
    }
    setRoleMenuActive(e) {
        this.roleMenuActive = e,
        this.roleMenuActive ? (this.roleMenuTicker = O.player.perkModeRoleSelectDuration,
        this.displayRoleMenu()) : (this.roleMenuInst && (this.audioManager.stopSound(this.roleMenuInst),
        this.roleMenuInst = null),
        this.hideRoleMenu())
    }
    displayRoleMenu() {
        this.roleMenuElemWrapper.css("display", "block")
    }
    hideRoleMenu() {
        this.roleMenuElemWrapper.css("display", "none")
    }
    setRoleMenuOptions(e, t) {
        c("#ui-role-header").html("");
        for (let r = 0; r < t.length; r++) {
            const s = t[r]
              , a = U[s]
              , o = c("<div/>", {
                class: "ui-role-option",
                "data-role": s
            });
            o.css({
                "background-image": `url('${a.guiImg}')`
            }),
            c("#ui-role-header").append(o)
        }
        c(".ui-role-option").on("click", r => {
            r.stopPropagation();
            const s = c(r.currentTarget);
            this.setRoleMenuInfo(s.data("role"))
        }
        );
        let i = t[0];
        t.includes(e) && (i = e),
        this.setRoleMenuInfo(i)
    }
    setRoleMenuInfo(e) {
        const t = U[e];
        c(".ui-role-option").css({
            "background-size": 132,
            opacity: .5
        }),
        c("#ui-role-header").find(`[data-role=${e}]`).css({
            "background-size": 164,
            opacity: 1
        });
        const i = c("<div/>", {
            class: "ui-role-body-left"
        })
          , r = c("<div/>", {
            class: "ui-role-body-name"
        })
          , s = c("<div/>", {
            class: "ui-role-body-image"
        })
          , a = this.localization.translate(`game-${e}`);
        r.html(a),
        s.css({
            "background-image": `url('${t.guiImg}')`
        });
        const o = t.color ? X.colorToHexString(t.color) : "default";
        this.roleMenuElem.css("border-color", o),
        i.append(r).append(s);
        const h = c("<div/>", {
            class: "ui-role-body-right"
        })
          , f = t.perks;
        for (let u = 0; u < f.length; u++) {
            const d = f[u]
              , p = c("<div/>", {
                class: "ui-role-body-perk"
            })
              , w = c("<div/>", {
                class: "ui-role-body-perk-image-wrapper"
            }).append(c("<div/>", {
                class: "ui-role-body-perk-image-icon"
            }))
              , S = c("<div/>", {
                class: "ui-role-body-perk-name"
            })
              , g = X.getSvgFromGameType(d instanceof Function ? d() : d);
            w.find(".ui-role-body-perk-image-icon").css({
                "background-image": `url('${g}')`
            });
            const y = this.localization.translate(`game-${d}`);
            S.html(y),
            p.append(w).append(S),
            h.append(p)
        }
        c("#ui-role-body").html("").append(i).append(h),
        this.roleDisplayed = e
    }
}
const Hr = 6
  , ar = .75 * 1e3
  , Gr = 3
  , yo = {
    [O.WeaponSlot.Primary]: F.EquipPrimary,
    [O.WeaponSlot.Secondary]: F.EquipSecondary,
    [O.WeaponSlot.Melee]: F.EquipMelee,
    [O.WeaponSlot.Throwable]: F.EquipThrowable
};
function Z(l) {
    return document.getElementById(l)
}
function or(l) {
    return l.button == 0
}
function lr(l) {
    return "which"in l ? l.which == 3 : l.button == 2
}
function yi(l, e, t) {
    if (l instanceof Array)
        for (let i = 0; i < l.length; i++)
            yi(l[i], t !== void 0 ? e[t] : e, i);
    else if (l instanceof Object) {
        const i = Object.keys(l);
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            yi(l[s], t !== void 0 ? e[t] : e, s)
        }
    } else
        e[t] = l
}
function xi(l, e, t) {
    if (e instanceof Array) {
        const i = [];
        for (let r = 0; r < e.length; r++)
            i[r] = xi(l[r], e[r], t);
        return i
    }
    if (e instanceof Object) {
        const i = {}
          , r = Object.keys(e);
        for (let s = 0; s < r.length; s++) {
            const a = r[s];
            i[a] = xi(l[a], e[a], t)
        }
        return i
    }
    return l != e || t
}
function Qr() {
    const l = Object.keys(U)
      , e = [];
    for (let t = 0; t < l.length; t++) {
        const i = l[t]
          , r = U[i];
        !r.hideUi && (r.type == "heal" || r.type == "boost" || r.type == "ammo") && e.push(i)
    }
    return e
}
class nr {
    mobile = !1;
    touch = !1;
    rareLootMessage = {
        lootType: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    pickupMessage = {
        message: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    killMessage = {
        text: "",
        count: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    killFeed = Array.from({
        length: Hr
    }, () => ({
        text: "",
        color: "#000000",
        offset: 0,
        opacity: 0,
        ticker: Number.MAX_VALUE
    }));
    ammo = {
        current: 0,
        remaining: 0,
        displayCurrent: !1,
        displayRemaining: !1
    };
    interaction = {
        type: 0,
        text: "",
        key: "",
        usable: !1
    };
    weapons = Array.from({
        length: O.WeaponSlot.Count
    }, (e, t) => ({
        slot: t,
        type: "",
        ammo: 0,
        equipped: !1,
        selectable: !1,
        opacity: 0,
        width: 0,
        ticker: 0,
        bind: yo[t],
        bindStr: ""
    }));
    scopes = hi.map(e => ({
        type: e,
        visible: !1,
        equipped: !1,
        selectable: !1
    }));
    loot = Qr().map(e => ({
        type: e,
        count: 0,
        maximum: 0,
        selectable: !1,
        width: 0,
        ticker: 0
    }));
    perks = Array.from({
        length: Gr
    }, () => ({
        type: "",
        droppable: !1,
        width: 0,
        ticker: 0,
        pulse: !1
    }));
    gear = ui.map(e => ({
        type: e,
        item: "",
        selectable: !1,
        width: 0,
        ticker: 0,
        rot: 0
    }));
    health = O.player.health;
    boost = 0;
    downed = !1
}
class xo {
    constructor(e, t) {
        this.localization = e,
        this.inputBinds = t;
        for (let a = 0; a < Hr; a++) {
            const o = `ui-killfeed-${a}`;
            let h = Z(o);
            if (!h) {
                h = document.createElement("div"),
                h.id = o,
                h.classList.add("killfeed-div");
                const f = document.createElement("div");
                f.classList.add("killfeed-text"),
                h.appendChild(f),
                this.dom.killFeed.div.appendChild(h)
            }
            this.dom.killFeed.lines.push({
                line: h,
                text: h.firstElementChild
            })
        }
        for (let a = 0; a < O.WeaponSlot.Count; a++) {
            const o = Z(`ui-weapon-id-${a + 1}`)
              , h = {
                div: o,
                type: o.getElementsByClassName("ui-weapon-name")[0],
                number: o.getElementsByClassName("ui-weapon-number")[0],
                image: o.getElementsByClassName("ui-weapon-image")[0],
                ammo: o.getElementsByClassName("ui-weapon-ammo-counter")[0]
            };
            this.dom.weapons.push(h)
        }
        for (let a = 0; a < hi.length; a++) {
            const o = hi[a]
              , h = {
                scopeType: o,
                div: Z(`ui-scope-${o}`)
            };
            this.dom.scopes.push(h)
        }
        for (let a = Qr(), o = 0; o < a.length; o++) {
            const h = a[o]
              , f = Z(`ui-loot-${h}`);
            if (f) {
                const u = {
                    lootType: h,
                    div: f,
                    count: f.getElementsByClassName("ui-loot-count")[0],
                    image: f.getElementsByClassName("ui-loot-image")[0],
                    overlay: f.getElementsByClassName("ui-loot-overlay")[0]
                };
                this.dom.loot.push(u)
            }
        }
        for (let a = 0; a < ui.length; a++) {
            const o = ui[a]
              , h = Z(`ui-armor-${o}`)
              , f = {
                gearType: o,
                div: h,
                level: h.getElementsByClassName("ui-armor-level")[0],
                image: h.getElementsByClassName("ui-armor-image")[0]
            };
            this.dom.gear.push(f)
        }
        for (let a = 0; a < Gr; a++) {
            const o = Z(`ui-perk-${a}`)
              , h = {
                perkType: "",
                div: o,
                divTitle: o.getElementsByClassName("tooltip-title")[0],
                divDesc: o.getElementsByClassName("tooltip-desc")[0],
                image: o.getElementsByClassName("ui-armor-image")[0]
            };
            this.dom.perks.push(h)
        }
        const i = (a, o, h) => {
            this.eventListeners.push({
                event: a,
                elem: o,
                fn: h
            }),
            o.addEventListener(a, h)
        }
          , r = (a, o, h, f) => {
            this.itemActions.push({
                action: a,
                type: o,
                data: h,
                div: f,
                actionQueued: !1,
                actionTime: 0
            })
        }
        ;
        for (let a = 0; a < this.dom.weapons.length; a++)
            r("use", "weapon", a, this.dom.weapons[a].div),
            r("drop", "weapon", a, this.dom.weapons[a].div);
        for (let a = 0; a < this.dom.scopes.length; a++) {
            const o = this.dom.scopes[a];
            r("use", "scope", o.scopeType, o.div),
            o.scopeType != "1xscope" && r("drop", "loot", o.scopeType, o.div)
        }
        for (let a = 0; a < this.dom.loot.length; a++) {
            const o = this.dom.loot[a]
              , h = U[o.lootType];
            (h.type == "heal" || h.type == "boost") && r("use", "loot", o.lootType, o.div),
            r("drop", "loot", o.lootType, o.div)
        }
        for (let a = 0; a < this.dom.gear.length; a++) {
            const o = this.dom.gear[a];
            o.gearType != "backpack" && r("drop", "loot", o.gearType, o.div)
        }
        for (let a = 0; a < this.dom.perks.length; a++)
            r("drop", "perk", a, this.dom.perks[a].div);
        for (let a = 0; a < this.itemActions.length; a++) {
            const o = this.itemActions[a];
            i("mousedown", o.div, h => {
                (o.action == "use" && or(h) || o.action == "drop" && lr(h)) && (h.stopPropagation(),
                o.actionQueued = !0)
            }
            ),
            i("mouseup", o.div, h => {
                o.actionQueued && (o.action == "use" && or(h) || o.action == "drop" && lr(h)) && (h.stopPropagation(),
                this.pushAction(o),
                o.actionQueued = !1)
            }
            ),
            i("touchstart", o.div, h => {
                h.changedTouches.length > 0 && (h.stopPropagation(),
                o.actionQueued = !0,
                o.actionTime = new Date().getTime(),
                o.touchOsId = h.changedTouches[0].identifier)
            }
            ),
            i("touchend", o.div, h => {
                new Date().getTime() - o.actionTime < ar && o.actionQueued && o.action == "use" && this.pushAction(o),
                o.actionQueued = !1
            }
            ),
            i("touchcancel", o.div, h => {
                o.actionQueued = !1
            }
            )
        }
        const s = document.getElementById("cvs");
        this.clearQueuedItemActions = () => {
            for (let a = 0; a < this.itemActions.length; a++)
                this.itemActions[a].actionQueued = !1;
            B.touch && s.focus()
        }
        ,
        window.addEventListener("mouseup", this.clearQueuedItemActions),
        window.addEventListener("focus", this.clearQueuedItemActions),
        this.onKeyUp = a => {
            const o = a.which || a.keyCode
              , h = this.inputBinds.getBind(F.Fullscreen);
            h && o == h.code && X.toggleFullScreen()
        }
        ,
        window.addEventListener("keyup", this.onKeyUp)
    }
    oldState = new nr;
    newState = new nr;
    frameCount = 0;
    dom = {
        debugButton: Z("ui-debug-button"),
        emoteButton: Z("ui-emote-button"),
        menu: {
            touchStyles: Z("btn-touch-styles"),
            aimLine: Z("btn-game-aim-line")
        },
        rareLootMessage: {
            icon: Z("ui-perk-message-image-icon"),
            imageWrapper: Z("ui-perk-message-image-wrapper"),
            wrapper: Z("ui-perk-message-wrapper"),
            name: Z("ui-perk-message-name"),
            desc: Z("ui-perk-message-acquired")
        },
        pickupMessage: Z("ui-pickup-message"),
        killMessage: {
            div: Z("ui-kills"),
            text: Z("ui-kill-text"),
            count: Z("ui-kill-count")
        },
        killFeed: {
            div: Z("ui-killfeed-contents"),
            lines: []
        },
        weapons: [],
        ammo: {
            current: Z("ui-current-clip"),
            remaining: Z("ui-remaining-ammo"),
            reloadButton: Z("ui-reload-button-container")
        },
        interaction: {
            div: Z("ui-interaction"),
            key: Z("ui-interaction-press"),
            text: Z("ui-interaction-description")
        },
        health: {
            inner: Z("ui-health-actual"),
            depleted: Z("ui-health-depleted")
        },
        boost: {
            div: Z("ui-boost-counter"),
            bars: [Z("ui-boost-counter-0").firstElementChild, Z("ui-boost-counter-1").firstElementChild, Z("ui-boost-counter-2").firstElementChild, Z("ui-boost-counter-3").firstElementChild]
        },
        scopes: [],
        loot: [],
        gear: [],
        perks: []
    };
    rareLootMessageQueue = [];
    uiEvents = [];
    eventListeners = [];
    clearQueuedItemActions;
    onKeyUp;
    itemActions = [];
    Obb() {
        for (let e = 0; e < this.eventListeners.length; e++) {
            const t = this.eventListeners[e];
            t.elem.removeEventListener(t.event, t.fn)
        }
        window.removeEventListener("focus", this.clearQueuedItemActions),
        window.removeEventListener("mouseup", this.clearQueuedItemActions),
        window.removeEventListener("keyup", this.onKeyUp)
    }
    pushAction(e) {
        this.uiEvents.push({
            action: e.action,
            type: e.type,
            data: e.data
        })
    }
    flushInput() {
        this.uiEvents = []
    }
    nYcwKO(e, t, i, r, s, a, o) {
        const h = this.newState;
        if (h.mobile = B.mobile,
        h.touch = B.touch,
        h.touch)
            for (let P = 0; P < this.itemActions.length; P++) {
                const T = this.itemActions[P];
                if (T.actionQueued && T.action == "drop") {
                    const C = new Date().getTime();
                    C - T.actionTime >= ar && (this.pushAction(T),
                    T.actionTime = C,
                    T.actionQueued = !1)
                }
            }
        if (h.rareLootMessage.ticker >= h.rareLootMessage.duration && this.rareLootMessageQueue.length > 0) {
            const P = this.rareLootMessageQueue.shift();
            h.rareLootMessage.lootType = P,
            h.rareLootMessage.ticker = 0,
            h.rareLootMessage.duration = this.rareLootMessageQueue.length > 0 ? 2 : 4,
            h.rareLootMessage.opacity = 0
        }
        h.rareLootMessage.ticker += e;
        const f = h.rareLootMessage.ticker
          , u = h.rareLootMessage.duration;
        h.rareLootMessage.opacity = 1 - b.smoothstep(f, u - .2, u),
        h.pickupMessage.ticker += e;
        const d = h.pickupMessage.ticker
          , p = h.pickupMessage.duration;
        h.pickupMessage.opacity = b.smoothstep(d, 0, .2) * (1 - b.smoothstep(d, p, p + .2)) * (1 - h.rareLootMessage.opacity),
        h.killMessage.ticker += e;
        const w = h.killMessage.ticker
          , S = h.killMessage.duration;
        h.killMessage.opacity = (1 - b.smoothstep(w, S - .2, S)) * (1 - h.rareLootMessage.opacity);
        let g = 0;
        for (let P = 0; P < h.killFeed.length; P++) {
            const T = h.killFeed[P];
            T.ticker += e;
            const C = T.ticker;
            T.offset = g,
            T.opacity = b.smoothstep(C, 0, .25) * (1 - b.smoothstep(C, 6, 6.5)),
            g += b.min(C / .25, 1),
            B.mobile && (T.opacity = C < 6.5 ? 1 : 0)
        }
        h.health = t.pjeWp.sTD ? 0 : b.max(t.qWTK.DslpT, 1),
        h.boost = t.qWTK.dEcffd,
        h.downed = t.pjeWp.wLG;
        let y = 0
          , M = null
          , I = !0;
        if (t.canInteract(a)) {
            let P = null
              , T = 0;
            const C = a.oymOX.yQIfil();
            for (let j = 0; j < C.length; j++) {
                const V = C[j];
                if (V.active && !V.dead && x.sameLayer(V.layer, t.layer)) {
                    const E = V.getInteraction();
                    if (E) {
                        const R = H.intersectCircle(V.collider, t.pjeWp.HiVuim, E.rad + t.mjdwp);
                        R && R.pen >= T && (P = V,
                        T = R.pen)
                    }
                }
            }
            P && (y = 4,
            M = P,
            I = !0);
            const N = s.getClosestLoot();
            if (N && !t.pjeWp.wLG) {
                const j = U[N.type]
                  , V = t.MJIdg(O.WeaponSlot.Primary)
                  , E = t.MJIdg(O.WeaponSlot.Secondary)
                  , R = V && E
                  , G = j.type != "gun" || !R || t.AjBY() == "gun";
                let K = !1;
                (h.touch && j.type == "helmet" && t.BWEtl() == j.level && N.type != t.pjeWp.yyaro || j.type == "chest" && t.qfr() == j.level && N.type != t.pjeWp.TicL) && (K = !0),
                (G || B.uiLayout == B.UiLayout.Sm) && (y = 2,
                M = N),
                I = G && (!h.touch || j.type == "gun" || j.type == "melee" || j.type == "outfit" || j.type == "perk" || K)
            }
            const L = t.lJQXO("self_revive");
            if (t.LJnf.type == le.None && (!t.pjeWp.wLG || L)) {
                const j = r.getPlayerInfo(t.__id).teamId
                  , V = r.playerPool.yQIfil();
                for (let E = 0; E < V.length; E++) {
                    const R = V[E];
                    if (R.active) {
                        const G = r.getPlayerInfo(R.__id).teamId;
                        (R.__id != t.__id || L) && j == G && R.pjeWp.wLG && !R.pjeWp.sTD && R.LJnf.type != le.Revive && m.length(m.sub(R.pjeWp.HiVuim, t.pjeWp.HiVuim)) < O.player.reviveRange && x.sameLayer(R.layer, t.layer) && (y = 3,
                        M = R,
                        I = !0)
                    }
                }
            }
            t.LJnf.type == le.Revive && t.pjeWp.wLG && !L && (y = 0,
            M = null,
            I = !1),
            (t.LJnf.type == le.UseItem || t.LJnf.type == le.Revive && (!t.pjeWp.wLG || L)) && !i && (y = 1,
            M = null,
            I = !0)
        }
        h.interaction.type = y,
        h.interaction.text = this.getInteractionText(y, M, t),
        h.interaction.key = this.getInteractionKey(y),
        h.interaction.usable = I && !i;
        for (let P = 0; P < t.qWTK.qIUScd.length; P++) {
            const T = t.qWTK.qIUScd[P]
              , C = h.weapons[P];
            C.type = T.type,
            C.ammo = T.ammo,
            P == O.WeaponSlot.Throwable && (C.ammo = t.qWTK.eyXk[T.type] || 0);
            const N = C.equipped;
            C.equipped = P == t.qWTK.ArjhbB,
            C.selectable = (T.type != "" || P == 0 || P == 1) && !i;
            const L = C.equipped ? 1 : .6
              , j = L - C.opacity
              , V = b.min(j, b.sign(j) * e / .15);
            C.opacity = b.clamp(C.opacity + V, 0, 1),
            B.mobile && (C.opacity = L),
            C.type == "bugle" && C.ammo == 0 && (C.opacity = .25),
            C.ticker += e,
            (!C.equipped || !N) && (C.ticker = 0),
            this.frameCount < 2 && (C.ticker = 1);
            const E = b.min(C.ticker / .09, Math.PI)
              , R = Math.sin(E);
            C.width = R < .001 ? 0 : R,
            B.mobile && (C.width = 0);
            const G = o.getBind(C.bind);
            C.bindStr = G ? G.toString() : ""
        }
        const v = h.weapons[t.qWTK.ArjhbB]
          , k = U[v.type]
          , _ = v.ammo
          , A = k.type == "gun" ? k.ammoInfinite || t.lJQXO("endless_ammo") && !k.ignoreEndlessAmmo ? Number.MAX_VALUE : t.qWTK.eyXk[k.ammo] : 0;
        h.ammo.current = _,
        h.ammo.remaining = A,
        h.ammo.displayCurrent = k.type != "melee",
        h.ammo.displayRemaining = A > 0;
        for (let P = 0; P < h.scopes.length; P++) {
            const T = h.scopes[P];
            T.visible = t.qWTK.eyXk[T.type] > 0,
            T.equipped = T.visible && t.qWTK.YEZ == T.type,
            T.selectable = T.visible && !i
        }
        for (let P = t.JMsL(), T = 0; T < h.loot.length; T++) {
            const C = h.loot[T]
              , N = C.count;
            C.count = t.qWTK.eyXk[C.type] || 0,
            C.maximum = O.bagSizes[C.type][P],
            C.selectable = C.count > 0 && !i,
            C.count > N && (C.ticker = 0),
            this.frameCount < 2 && (C.ticker = 1),
            C.ticker += e;
            const L = b.min(C.ticker / .05, Math.PI)
              , j = Math.sin(L);
            C.width = j < .001 ? 0 : j,
            B.mobile && (C.width = 0)
        }
        for (let P = 0; P < h.gear.length; P++) {
            const T = h.gear[P];
            let C = "";
            T.type == "chest" ? C = t.pjeWp.TicL : T.type == "helmet" ? C = t.pjeWp.yyaro : T.type == "backpack" && (C = t.pjeWp.ZKVVuu) == "backpack00" && (C = "");
            const N = T.item;
            T.item = C,
            T.selectable = C != "" && !i,
            N != T.item && (T.ticker = 0),
            this.frameCount < 2 && (T.ticker = 1),
            T.ticker += e;
            const L = b.min(T.ticker / .05, Math.PI)
              , j = Math.sin(L);
            T.width = j < .001 ? 0 : j,
            B.mobile && (T.width = 0)
        }
        for (let P = 0; P < h.perks.length; P++) {
            const T = h.perks[P];
            if (t.perks.length > P) {
                const C = t.perks[P];
                T.type = C.type,
                T.droppable = C.droppable,
                C.isNew && (T.ticker = 0),
                this.frameCount < 2 && (T.ticker = 1),
                T.ticker += e;
                const N = b.min(T.ticker / .05, Math.PI)
                  , L = Math.sin(N);
                T.width = L < .001 ? 0 : L,
                B.mobile && (T.width = 0),
                T.pulse = !B.mobile && T.ticker < 4
            } else
                T.type = ""
        }
        const z = xi(this.oldState, this.newState, this.frameCount++ == 0);
        this.render(z, this.newState),
        yi(this.newState, this.oldState)
    }
    render(e, t) {
        const i = this.dom;
        if (e.touch && (i.interaction.key.style.backgroundImage = t.touch ? "url('img/gui/tap.svg')" : "none",
        t.touch && (i.interaction.key.innerHTML = ""),
        i.menu.touchStyles.style.display = t.touch ? "flex" : "none",
        i.menu.aimLine.style.display = t.touch ? "block" : "none",
        i.ammo.reloadButton.style.display = t.touch ? "block" : "none",
        i.emoteButton.style.display = t.touch ? "block" : "none",
        i.debugButton && (i.debugButton.style.display = t.touch ? "block" : "none")),
        e.rareLootMessage.lootType) {
            const r = t.rareLootMessage.lootType
              , s = U[r];
            if (s && s.type == "xp") {
                const f = this.localization.translate("game-xp-drop-desc");
                i.rareLootMessage.desc.innerHTML = `+${s.xp} ${f}`
            } else
                i.rareLootMessage.desc.innerHTML = "";
            const a = s?.lootImg?.border ? `url(img/loot/${s.lootImg.border.slice(0, -4)}.svg)` : "none";
            i.rareLootMessage.imageWrapper.style.backgroundImage = a;
            const o = X.getSvgFromGameType(r);
            i.rareLootMessage.icon.style.backgroundImage = o ? `url('${o}')` : "none";
            const h = this.localization.translate(`game-${r}`);
            i.rareLootMessage.name.innerHTML = h
        }
        e.rareLootMessage.opacity && (i.rareLootMessage.wrapper.style.opacity = String(t.rareLootMessage.opacity)),
        e.pickupMessage.message && (i.pickupMessage.innerHTML = t.pickupMessage.message),
        e.pickupMessage.opacity && (i.pickupMessage.style.opacity = String(t.pickupMessage.opacity)),
        (e.killMessage.text || e.killMessage.count) && (i.killMessage.text.innerHTML = t.killMessage.text,
        i.killMessage.count.innerHTML = t.killMessage.count),
        e.killMessage.opacity && (i.killMessage.div.style.opacity = String(t.killMessage.opacity));
        for (let r = 0; r < e.killFeed.length; r++) {
            const s = e.killFeed[r]
              , a = i.killFeed.lines[r]
              , o = t.killFeed[r];
            if (s.text && (a.text.innerHTML = o.text),
            s.offset) {
                const h = B.uiLayout != B.UiLayout.Sm || B.tablet ? 35 : 15;
                a.line.style.top = `${Math.floor(o.offset * h)}px`
            }
            s.color && (a.text.style.color = o.color),
            s.opacity && (a.line.style.opacity = String(o.opacity))
        }
        if (e.health || e.downed) {
            const r = [{
                health: 100,
                color: [179, 179, 179]
            }, {
                health: 100,
                color: [255, 255, 255]
            }, {
                health: 75,
                color: [255, 255, 255]
            }, {
                health: 75,
                color: [255, 158, 158]
            }, {
                health: 25,
                color: [255, 82, 82]
            }, {
                health: 25,
                color: [255, 0, 0]
            }, {
                health: 0,
                color: [255, 0, 0]
            }];
            let s = 0;
            const a = Math.ceil(t.health);
            for (; r[s].health > a && s < r.length - 1; )
                s++;
            const o = r[b.max(s - 1, 0)]
              , h = r[s]
              , f = b.delerp(t.health, o.health, h.health);
            let u = [Math.floor(b.lerp(f, o.color[0], h.color[0])), Math.floor(b.lerp(f, o.color[1], h.color[1])), Math.floor(b.lerp(f, o.color[2], h.color[2]))];
            t.downed && (u = [255, 0, 0]),
            i.health.inner.style.backgroundColor = `rgba(${u[0]}, ${u[1]}, ${u[2]}, 1.0)`,
            i.health.inner.style.width = `${t.health}%`,
            i.health.depleted.style.width = `${t.health}%`,
            i.health.depleted.style.display = t.health > 0 ? "block" : "none",
            t.health > 25 ? i.health.inner.classList.remove("ui-bar-danger") : i.health.inner.classList.add("ui-bar-danger")
        }
        if (e.boost) {
            const r = O.player.boostBreakpoints;
            let s = 0;
            for (let a = 0; a < r.length; a++)
                s += r[a];
            for (let a = t.boost / 100, o = 0; o < i.boost.bars.length; o++) {
                const h = r[o] / s
                  , f = b.clamp(a / h, 0, 1);
                a = b.max(a - h, 0),
                i.boost.bars[o].style.width = `${f * 100}%`
            }
            i.boost.div.style.opacity = String(t.boost == 0 ? 0 : 1)
        }
        e.interaction.type && (i.interaction.div.style.display = t.interaction.type == 0 ? "none" : "flex"),
        e.interaction.text && (i.interaction.text.innerHTML = t.interaction.text),
        e.interaction.key && (i.interaction.key.innerHTML = t.touch ? "" : t.interaction.key,
        i.interaction.key.className = i.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large"),
        e.interaction.usable && (i.interaction.key.style.display = t.interaction.usable ? "block" : "none");
        for (let r = 0; r < e.weapons.length; r++) {
            const s = e.weapons[r]
              , a = i.weapons[r]
              , o = t.weapons[r];
            if (s.type) {
                let h = ""
                  , f = "";
                const u = U[o.type];
                u && (h = this.localization.translate(`game-hud-${o.type}`) || this.localization.translate(`game-${o.type}`),
                f = X.getCssTransformFromGameType(o.type)),
                a.type.innerHTML = h,
                a.image.src = X.getSvgFromGameType(o.type),
                a.image.style.display = u ? "inline" : "none",
                a.image.style.transform = f
            }
            if (s.equipped && (a.div.style.backgroundColor = o.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)"),
            s.selectable && (a.div.style.pointerEvents = o.type != "" || o.selectable ? "auto" : "none"),
            s.width) {
                const h = b.lerp(o.width, 83.33, 100);
                a.div.style.width = `${h}%`
            }
            s.opacity && (a.div.style.opacity = String(o.opacity)),
            s.ammo && a.ammo && (a.ammo.innerHTML = String(o.ammo),
            a.ammo.style.display = o.ammo > 0 ? "block" : "none"),
            s.bindStr && (a.number.innerHTML = o.bindStr[0] || "")
        }
        if (e.ammo.current) {
            const r = t.ammo.current;
            i.ammo.current.innerHTML = String(r),
            i.ammo.current.style.color = r > 0 ? "white" : "red"
        }
        if (e.ammo.remaining) {
            const r = t.ammo.remaining;
            i.ammo.remaining.innerHTML = String(r == Number.MAX_VALUE ? "&#8734;" : r),
            i.ammo.remaining.style.color = r != 0 ? "white" : "red"
        }
        e.ammo.displayCurrent && (i.ammo.current.style.opacity = String(t.ammo.displayCurrent ? 1 : 0)),
        e.ammo.displayRemaining && (i.ammo.remaining.style.opacity = String(t.ammo.displayRemaining ? 1 : 0),
        i.ammo.reloadButton.style.opacity = String(t.ammo.displayRemaining ? 1 : 0));
        for (let r = 0; r < e.scopes.length; r++) {
            const s = e.scopes[r]
              , a = i.scopes[r]
              , o = t.scopes[r];
            s.visible && (o.visible ? a.div.classList.remove("ui-hidden") : a.div.classList.add("ui-hidden")),
            s.equipped && (o.equipped ? (a.div.classList.add("ui-zoom-active"),
            a.div.classList.remove("ui-zoom-inactive")) : (a.div.classList.remove("ui-zoom-active"),
            a.div.classList.add("ui-zoom-inactive"))),
            s.selectable && (a.div.style.pointerEvents = o.selectable ? "auto" : "none")
        }
        for (let r = 0; r < e.loot.length; r++) {
            const s = e.loot[r]
              , a = i.loot[r]
              , o = t.loot[r];
            if (s && a && o) {
                if ((s.count || s.maximum) && (a.count.innerHTML = String(o.count),
                a.div.style.opacity = String(U[a.lootType].special && o.count == 0 ? 0 : o.count > 0 ? 1 : .25),
                a.div.style.color = o.count == o.maximum ? "#ff9900" : "#ffffff"),
                s.width) {
                    const h = 1 + o.width * .33
                      , f = `scale(${h}, ${h})`;
                    a.image.style.transform = f,
                    a.overlay && (a.overlay.style.transform = f)
                }
                s.selectable && (a.div.style.pointerEvents = o.selectable ? "auto" : "none")
            }
        }
        for (let r = 0; r < e.gear.length; r++) {
            const s = e.gear[r]
              , a = i.gear[r]
              , o = t.gear[r];
            if (s.item) {
                const h = o.item ? U[o.item] : null
                  , f = h ? h.level : 0;
                a.div.style.display = h ? "block" : "none",
                a.level.innerHTML = this.localization.translate(`game-level-${f}`),
                a.level.style.color = f >= 3 ? "#ff9900" : "#ffffff",
                a.image.src = X.getSvgFromGameType(o.item)
            }
            if (s.selectable && (a.div.style.pointerEvents = o.selectable ? "auto" : "none"),
            s.width) {
                const h = 1 + o.width * .33;
                let f = `scale(${h}, ${h})`;
                const u = U[o.item];
                u?.lootImg.rot !== void 0 && (f += ` rotate(${u.lootImg.rot}rad)`),
                a.image.style.transform = f
            }
        }
        for (let r = 0; r < e.perks.length; r++) {
            const s = e.perks[r]
              , a = i.perks[r]
              , o = t.perks[r];
            if (s.type && (a.perkType = o.type,
            a.divTitle.innerHTML = this.localization.translate(`game-${o.type}`),
            a.divDesc.innerHTML = this.localization.translate(`game-${o.type}-desc`),
            a.div.style.display = o.type ? "block" : "none",
            a.image.src = o.type ? X.getSvgFromGameType(o.type) : ""),
            s.droppable && (o.droppable ? (a.div.classList.add("ui-outline-hover"),
            a.div.classList.remove("ui-perk-no-drop")) : (a.div.classList.remove("ui-outline-hover"),
            a.div.classList.add("ui-perk-no-drop"))),
            s.pulse && (o.pulse ? a.div.classList.add("ui-perk-pulse") : a.div.classList.remove("ui-perk-pulse")),
            s.width) {
                const h = 1 + o.width * .33;
                a.image.style.transform = `scale(${h}, ${h})`
            }
        }
    }
    displayPickupMessage(e) {
        const t = this.newState.pickupMessage;
        t.message = this.getPickupMessageText(e),
        t.ticker = 0,
        t.duration = 3
    }
    displayKillMessage(e, t) {
        const i = this.newState.killMessage;
        i.text = e,
        i.count = t,
        i.ticker = 0,
        i.duration = 7
    }
    hideKillMessage() {
        this.newState.killMessage.ticker = b.max(this.newState.killMessage.ticker, this.newState.killMessage.duration - .2)
    }
    addRareLootMessage(e, t) {
        t && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration,
        this.rareLootMessageQueue = []),
        this.rareLootMessageQueue.push(e)
    }
    removeRareLootMessage(e) {
        const t = this.rareLootMessageQueue.indexOf(e);
        t >= 0 && this.rareLootMessageQueue.splice(t, 1),
        this.newState.rareLootMessage.lootType == e && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration)
    }
    getRareLootMessageText(e) {
        return U[e] ? `Acquired perk: ${this.localization.translate(`game-${e}`)}` : ""
    }
    addKillFeedMessage(e, t) {
        const i = this.newState.killFeed
          , r = i[i.length - 1];
        r.text = e,
        r.color = t,
        r.ticker = 0,
        i.sort( (s, a) => s.ticker - a.ticker)
    }
    getKillFeedText(e, t, i, r, s) {
        switch (r) {
        case ht.Player:
            return `${t} ${this.localization.translate(s ? "game-knocked-out" : "game-killed")} ${e} ${this.localization.translate("game-with")} ${this.localization.translate(`game-${i}`)}`;
        case ht.Bleeding:
            {
                const a = this.localization.translate(t ? "game-finally-killed" : "game-finally-bled-out");
                return t ? `${t} ${a} ${e}` : `${e} ${a}`
            }
        case ht.Gas:
            {
                let a, o;
                return s ? (a = this.localization.translate("game-the-red-zone"),
                o = this.localization.translate("game-knocked-out")) : o = this.localization.translate(t ? "game-finally-killed" : "game-died-outside"),
                a ? `${a} ${o} ${e}` : `${e} ${o}`
            }
        case ht.Airdrop:
            {
                const a = he[i]
                  , o = this.localization.translate("game-the-air-drop")
                  , h = s ? this.localization.translate("game-knocked-out") : a && !a.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed");
                return `${o} ${h} ${e}`
            }
        case ht.Airstrike:
            {
                const a = this.localization.translate(s ? "game-knocked-out" : "game-killed");
                return t ? `${t} ${a} ${e} ${this.localization.translate("game-with")} ${this.localization.translate("game-an-air-strike")}` : `${this.localization.translate("game-the-air-strike")} ${a} ${e}`
            }
        default:
            return ""
        }
    }
    getKillFeedColor(e, t, i, r) {
        return r ? "#efeeee" : e == t ? "#d1777c" : e == i ? "#00bfff" : "#efeeee"
    }
    getRoleKillFeedColor(e, t, i) {
        const r = U[e];
        return r?.killFeed?.color ? r.killFeed.color : X.colorToHexString(i.getTeamColor(t))
    }
    getRoleTranslation(e, t) {
        let i = `game-${e}`;
        return e == "leader" && (i = t == 1 ? "game-red-leader" : "game-blue-leader"),
        this.localization.translate(i)
    }
    getRoleAnnouncementText(e, t) {
        return `${this.localization.translate("game-youve-been-promoted-to")} ${this.getRoleTranslation(e, t)}!`
    }
    getRoleAssignedKillFeedText(e, t, i) {
        const r = this.getRoleTranslation(e, t);
        return `${i} ${this.localization.translate("game-promoted-to")} ${r}!`
    }
    getRoleKilledKillFeedText(e, t, i) {
        const r = this.getRoleTranslation(e, t);
        return i ? `${i} ${this.localization.translate("game-killed")} ${r}!` : `${r} ${this.localization.translate("game-is-dead")}!`
    }
    getKillText(e, t, i, r, s, a, o, h, f) {
        const u = r && !s
          , d = f ? e : this.localization.translate("game-you").toUpperCase()
          , p = u ? "game-knocked-out" : i ? "game-killed" : "game-finally-killed"
          , w = this.localization.translate(p)
          , S = a ? f ? this.localization.translate("game-themselves") : this.localization.translate("game-yourself").toUpperCase() : t
          , g = this.localization.translate(h == O.DamageType.Airstrike ? "game-an-air-strike" : `game-${o}`)
          , y = this.localization.translate("game-with");
        return g && (i || u) ? `${d} ${w} ${S} ${y} ${g}` : `${d} ${w} ${S}`
    }
    getKillCountText(e) {
        return `${e} ${this.localization.translate(e != 1 ? "game-kills" : "game-kill")}`
    }
    getDownedText(e, t, i, r, s) {
        const a = s ? t : this.localization.translate("game-you").toUpperCase();
        let o = e;
        o || (r == O.DamageType.Gas ? o = this.localization.translate("game-the-red-zone") : r == O.DamageType.Airdrop ? o = this.localization.translate("game-the-air-drop") : r == O.DamageType.Airstrike && (o = this.localization.translate("game-the-air-strike")));
        let h = this.localization.translate(`game-${i}`);
        e && r == O.DamageType.Airstrike && (h = this.localization.translate("game-an-air-strike"));
        const f = this.localization.translate("game-with");
        return h ? `${o} knocked ${a} out ${f} ${h}` : `${o} knocked ${a} out`
    }
    getPickupMessageText(e) {
        const t = {
            [Ze.Full]: "game-not-enough-space",
            [Ze.AlreadyOwned]: "game-item-already-owned",
            [Ze.AlreadyEquipped]: "game-item-already-equipped",
            [Ze.BetterItemEquipped]: "game-better-item-equipped",
            [Ze.GunCannotFire]: "game-gun-cannot-fire"
        }
          , i = t[e] || t[Ze.Full];
        return this.localization.translate(i)
    }
    getInteractionText(e, t, i) {
        switch (e) {
        case 0:
            return "";
        case 1:
            return this.localization.translate("game-cancel");
        case 3:
            return t && i && (t == i || i.downed) && i.lJQXO("self_revive") ? this.localization.translate("game-revive-self") : this.localization.translate("game-revive-teammate");
        case 4:
            {
                const r = t.getInteraction();
                return `${this.localization.translate(r.action)} ${this.localization.translate(r.object)}`
            }
        case 2:
            {
                const r = t;
                let s = this.localization.translate(`game-${r.type}`) || r.type;
                return r.count > 1 && (s += ` (${r.count})`),
                s
            }
        default:
            return ""
        }
    }
    getInteractionKey(e) {
        let t = null;
        switch (e) {
        case 1:
            t = this.inputBinds.getBind(F.Cancel);
            break;
        case 2:
            t = this.inputBinds.getBind(F.Loot) || this.inputBinds.getBind(F.Interact);
            break;
        case 4:
            t = this.inputBinds.getBind(F.Use) || this.inputBinds.getBind(F.Interact);
            break;
        case 3:
            t = this.inputBinds.getBind(F.Revive) || this.inputBinds.getBind(F.Interact);
            break;
        case 0:
        default:
            t = this.inputBinds.getBind(F.Use)
        }
        return t ? t.toString() : "<Unbound>"
    }
}
function zo() {
    const l = {
        "ui-loot-bandage": "img/loot/loot-medical-bandage.svg",
        "ui-loot-healthkit": "img/loot/loot-medical-healthkit.svg",
        "ui-loot-soda": "img/loot/loot-medical-soda.svg",
        "ui-loot-painkiller": "img/loot/loot-medical-pill.svg",
        "ui-loot-9mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-12gauge": "img/loot/loot-ammo-box.svg",
        "ui-loot-762mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-556mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-50AE": "img/loot/loot-ammo-box.svg",
        "ui-loot-308sub": "img/loot/loot-ammo-box.svg",
        "ui-loot-flare": "img/loot/loot-ammo-box.svg",
        "ui-loot-45acp": "img/loot/loot-ammo-box.svg"
    };
    for (const [e,t] of Object.entries(l))
        Z(e).getElementsByClassName("ui-loot-image")[0].src = t;
    Z("mag-glass-white").src = "img/gui/mag-glass.svg",
    Z("ui-minimize-img").src = "img/gui/minimize.svg"
}
class bo {
    constructor(e, t, i, r, s, a, o, h, f, u, d) {
        this.CRlMIZ = e,
        this.TAiFB = t,
        this.ifjMpl = i,
        this.mnEX = r,
        this.XHJCu = s,
        this.jxOFs = a,
        this.jcf = o,
        this.OyqTlU = h,
        this.swuiyY = f,
        this.onJoin = u,
        this.onQuit = d,
        this.CRlMIZ = e,
        this.TAiFB = t,
        this.OyqTlU = h,
        this.ifjMpl = i,
        this.mnEX = r,
        this.XHJCu = s,
        this.jxOFs = a,
        this.jcf = o,
        this.swuiyY = f
    }
    initialized = !1;
    teamMode = Fe.Solo;
    victoryMusic = null;
    hDQMzK = null;
    connecting = !1;
    connected = !1;
    VrWJy;
    PNwB;
    TgLFN;
    UPDCtm;
    zZW;
    rkQWB;
    IJTL;
    uqOoPa;
    fcsYB;
    fNnijD;
    tTNWcC;
    yAA;
    fzff;
    oYW;
    hByIj;
    WnBrd;
    sktYbp;
    hiEDQE;
    JuMKdQ;
    eHc;
    mxqUdF;
    dVXQ;
    jKmAaz;
    oUI;
    IAmJ;
    hva;
    DFNfXd;
    tRH;
    DdhhuT;
    LbSAQ;
    TqYSnI;
    SOGcRv;
    PTV;
    KXXgr;
    ItErHs;
    FYe;
    RCdIiz;
    HAQ;
    RncwCq;
    CjgeR;
    LBUO;
    editor;
    seq;
    seqInFlight;
    seqSendTime;
    pings;
    debugPingTime;
    lastUpdateTime;
    updateIntervals;
    tryJoinGame(e, t, i, r, s) {
        if (!this.connecting && !this.connected && !this.initialized) {
            this.hDQMzK && (this.hDQMzK.onerror = function() {}
            ,
            this.hDQMzK.onopen = function() {}
            ,
            this.hDQMzK.onmessage = function() {}
            ,
            this.hDQMzK.onclose = function() {}
            ,
            this.hDQMzK.close(),
            this.hDQMzK = null),
            this.connecting = !0,
            this.connected = !1;
            try {
                this.hDQMzK = new WebSocket(e),
                this.hDQMzK.binaryType = "arraybuffer",
                this.hDQMzK.onerror = a => {
                    this.hDQMzK?.close()
                }
                ,
                this.hDQMzK.onopen = () => {
                    this.connecting = !1,
                    this.connected = !0;
                    const a = this.mnEX.get("playerName")
                      , o = new fs;
                    o.protocol = O.protocolVersion,
                    o.matchPriv = t,
                    o.loadoutPriv = i,
                    o.questPriv = r,
                    o.name = a,
                    o.useTouch = B.touch,
                    o.isMobile = B.mobile || window.mobile,
                    o.bot = !1,
                    o.loadout = this.mnEX.get("loadout"),
                    this.JhguE(ge.Join, o, 8192)
                }
                ,
                this.hDQMzK.onmessage = a => {
                    const o = new Bi(a.data);
                    for (; ; ) {
                        const h = o.deserializeMsgType();
                        if (h == ge.None)
                            break;
                        this.buSEal(h, o.getStream())
                    }
                }
                ,
                this.hDQMzK.onclose = () => {
                    const a = this.hiEDQE?.displayingStats
                      , o = this.connecting
                      , h = this.connected;
                    if (this.connecting = !1,
                    this.connected = !1,
                    o)
                        s();
                    else if (h && !this.DdhhuT && !a) {
                        const f = this.DFNfXd || "index-host-closed";
                        this.onQuit(f)
                    }
                }
            } catch (a) {
                console.error(a),
                this.connecting = !1,
                this.connected = !1,
                s()
            }
        }
    }
    init() {
        this.oUI = this.CRlMIZ.renderer.type == jt.CANVAS,
        this.VrWJy = new ho(this.XHJCu,this.mnEX),
        this.PNwB = new Dr,
        this.TgLFN = new qr(this,this.oUI),
        this.UPDCtm = new Or(this.TgLFN),
        this.zZW = new Rr,
        this.rkQWB = new Er(this.zZW),
        this.IJTL = new Ur,
        this.uqOoPa = new Ta,
        this.fcsYB = new Ra,
        this.fNnijD = new Za,
        this.tTNWcC = new Ea,
        this.yAA = new Ja(this.TAiFB),
        this.fzff = new _a,
        this.oYW = new Wr,
        this.hByIj = new Ca,
        this.WnBrd = new Fa,
        this.sktYbp = new fa(this.oUI),
        this.hiEDQE = new go(this,this.TAiFB,this.UPDCtm,this.yAA,this.ifjMpl,this.oUI,this.VrWJy,this.jxOFs,this.jcf),
        this.JuMKdQ = new xo(this.ifjMpl,this.jxOFs),
        this.eHc = new da(this.TAiFB,this.hiEDQE,this.IJTL,this.PNwB,this.rkQWB),
        this.mxqUdF = new eo;
        const e = {
            [ye.Player]: this.IJTL.playerPool,
            [ye.Obstacle]: this.rkQWB.oymOX,
            [ye.Loot]: this.WnBrd.lootPool,
            [ye.DeadBody]: this.hByIj.deadBodyPool,
            [ye.Building]: this.rkQWB.qbU,
            [ye.Structure]: this.rkQWB.SopFaJ,
            [ye.Decal]: this.zZW.decalPool,
            [ye.Projectile]: this.fNnijD.projectilePool,
            [ye.Smoke]: this.oYW.EFi,
            [ye.Airdrop]: this.fzff.airdropPool
        };
        this.dVXQ = new Ar;
        for (const i in e)
            e.hasOwnProperty(i) && this.dVXQ.WUYR(i, e[i]);
        this.jKmAaz = new Me;
        const t = [this.rkQWB.display.ground, this.TgLFN.layers[0], this.TgLFN.ground, this.TgLFN.layers[1], this.TgLFN.layers[2], this.TgLFN.layers[3], this.jKmAaz, this.sktYbp.gasRenderer.display, this.VrWJy.container, this.eHc.container, this.hiEDQE.container, this.hiEDQE.Tad.container, this.eHc.indContainer];
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            r && (r.interactiveChildren = !1,
            this.CRlMIZ.stage.addChild(r))
        }
        this.DFNfXd = "",
        this.tRH = !1,
        this.DdhhuT = !1,
        this.LbSAQ = !1,
        this.TqYSnI = 0,
        this.SOGcRv = new Ai,
        this.PTV = 0,
        this.KXXgr = 0,
        this.IAmJ = !1,
        this.hva = 0,
        this.ItErHs = 0,
        this.FYe = 0,
        this.RCdIiz = null,
        this.HAQ = !1,
        this.RncwCq = 1,
        this.CjgeR = 1,
        this.LBUO = !1,
        this.seq = 0,
        this.seqInFlight = !1,
        this.seqSendTime = 0,
        this.pings = [],
        this.updateIntervals = [],
        this.lastUpdateTime = 0,
        this.debugPingTime = 0,
        this.PNwB.LlsKE(this.mnEX.get("screenShake")),
        this.PNwB.qeWIN(this.mnEX.get("interpolation")),
        this.IJTL.anonPlayerNames = this.mnEX.get("anonPlayerNames"),
        this.initialized = !0
    }
    free() {
        if (this.hDQMzK && (this.hDQMzK.onmessage = function() {}
        ,
        this.hDQMzK.close(),
        this.hDQMzK = null),
        this.connecting = !1,
        this.connected = !1,
        this.initialized)
            for (this.initialized = !1,
            this.IAmJ = !1,
            this.hva = 0,
            this.eHc.Obb(),
            this.JuMKdQ.Obb(),
            this.hiEDQE.Obb(),
            this.sktYbp.Obb(),
            this.fzff.Obb(),
            this.yAA.Obb(),
            this.rkQWB.Obb(),
            this.UPDCtm.Obb(),
            this.TgLFN.Obb(),
            this.XHJCu.Obb(),
            this.TAiFB.stopAll(); this.CRlMIZ.stage.children.length > 0; ) {
                const e = this.CRlMIZ.stage.children[0];
                this.CRlMIZ.stage.removeChild(e),
                e.destroy({
                    children: !0
                })
            }
    }
    warnPageReload() {
        return this.initialized && this.tRH && !this.LbSAQ && !this.hiEDQE.displayingStats
    }
    update(e) {
        //global variables
        window.activeId = this.FYe;
        window.spectating = this.LbSAQ;
        let t;
        t = {
            render: {}
        };
        const i = this.oYW.myUa;
        this.tRH && (this.PTV += e),
        this.IJTL.nYcwKO(e, this.FYe, this.teamMode, this.TgLFN, this.UPDCtm, this.PNwB, this.rkQWB, this.jxOFs, this.TAiFB, this.JuMKdQ, this.eHc.wheelKeyTriggered, this.hiEDQE.displayingStats, this.LbSAQ),
        this.updateAmbience(),
        this.PNwB.HiVuim = m.copy(this.RCdIiz.qqPdb),
        this.PNwB.fcIn();
        const r = this.RCdIiz.poQV()
          , s = b.min(this.PNwB.zaTP, this.PNwB.XbB)
          , a = b.max(this.PNwB.zaTP, this.PNwB.XbB)
          , o = b.max(s * (16 / 9), a);
        this.PNwB.RncwCq = o * .5 / (r * this.PNwB.hPMoEE);
        const h = this.RCdIiz.zoomFast ? 3 : 2
          , f = this.RCdIiz.zoomFast ? 3 : 1.4
          , u = this.PNwB.RncwCq > this.PNwB.uha ? h : f;
        this.PNwB.uha = b.lerp(e * u, this.PNwB.uha, this.PNwB.RncwCq),
        this.TAiFB.cameraPos = m.copy(this.PNwB.HiVuim),
        this.XHJCu.keyPressed(Q.Escape) && this.hiEDQE.toggleEscMenu(),
        (this.jxOFs.isBindPressed(F.ToggleMap) || this.XHJCu.keyPressed(Q.G) && !this.jxOFs.isKeyBound(Q.G)) && this.hiEDQE.displayMapLarge(!1),
        this.jxOFs.isBindPressed(F.CycleUIMode) && this.hiEDQE.cycleVisibilityMode(),
        (this.jxOFs.isBindPressed(F.HideUI) || this.XHJCu.keyPressed(Q.Escape) && !this.hiEDQE.hudVisible) && this.hiEDQE.cycleHud();
        const d = this.RCdIiz.HiVuim
          , p = m.create(this.RCdIiz.HiVuim.x + (this.XHJCu.mousePos.x - this.PNwB.zaTP * .5) / this.PNwB.kKovr(), this.RCdIiz.HiVuim.y + (this.PNwB.XbB * .5 - this.XHJCu.mousePos.y) / this.PNwB.kKovr())
          , w = m.sub(p, d);
        let S = m.length(w)
          , g = S > 1e-5 ? m.div(w, S) : m.create(1, 0);
        this.eHc.wheelDisplayed && (S = this.SOGcRv.toMouseLen,
        g = this.SOGcRv.toMouseDir);
        const y = new Ai;
        if (y.seq = this.seq,
        !this.LbSAQ) {
            if (B.touch) {
                const T = this.VrWJy.getTouchMovement(this.PNwB)
                  , C = this.VrWJy.getAimMovement(this.RCdIiz, this.PNwB);
                let N = m.copy(C.aimMovement.toAimDir);
                if (this.VrWJy.turnDirTicker -= e,
                this.VrWJy.moveDetected && !C.touched) {
                    const V = m.normalizeSafe(T.toMoveDir, m.create(1, 0))
                      , E = this.VrWJy.turnDirTicker < 0 ? V : C.aimMovement.toAimDir;
                    this.VrWJy.setAimDir(E),
                    N = E
                }
                C.touched && (this.VrWJy.turnDirTicker = this.VrWJy.turnDirCooldown),
                this.VrWJy.moveDetected ? (y.touchMoveDir = m.normalizeSafe(T.toMoveDir, m.create(1, 0)),
                y.touchMoveLen = Math.round(b.clamp(T.toMoveLen, 0, 1) * 255)) : y.touchMoveLen = 0,
                y.touchMoveActive = !0;
                const L = C.aimMovement.toAimLen
                  , j = b.clamp(L / this.VrWJy.padPosRange, 0, 1) * O.player.throwableMaxMouseDist;
                y.toMouseLen = j,
                y.toMouseDir = N
            } else
                y.moveLeft = this.jxOFs.isBindDown(F.MoveLeft) || this.XHJCu.keyDown(Q.Left) && !this.jxOFs.isKeyBound(Q.Left),
                y.moveRight = this.jxOFs.isBindDown(F.MoveRight) || this.XHJCu.keyDown(Q.Right) && !this.jxOFs.isKeyBound(Q.Right),
                y.moveUp = this.jxOFs.isBindDown(F.MoveUp) || this.XHJCu.keyDown(Q.Up) && !this.jxOFs.isKeyBound(Q.Up),
                y.moveDown = this.jxOFs.isBindDown(F.MoveDown) || this.XHJCu.keyDown(Q.Down) && !this.jxOFs.isKeyBound(Q.Down),
                y.toMouseDir = m.copy(g),
                y.toMouseLen = S;
            y.touchMoveDir = m.normalizeSafe(y.touchMoveDir, m.create(1, 0)),
            y.touchMoveLen = b.clamp(y.touchMoveLen, 0, 255),
            y.toMouseDir = m.normalizeSafe(y.toMouseDir, m.create(1, 0)),
            y.toMouseLen = b.clamp(y.toMouseLen, 0, ee.MouseMaxDist),
            y.shootStart = this.jxOFs.isBindPressed(F.Fire) || this.VrWJy.shotDetected,
            y.shootHold = this.jxOFs.isBindDown(F.Fire) || this.VrWJy.shotDetected,
            y.portrait = this.PNwB.zaTP < this.PNwB.XbB;
            const z = [F.Reload, F.Revive, F.Use, F.Loot, F.Cancel, F.EquipPrimary, F.EquipSecondary, F.EquipThrowable, F.EquipMelee, F.EquipNextWeap, F.EquipPrevWeap, F.EquipLastWeap, F.EquipOtherGun, F.EquipPrevScope, F.EquipNextScope, F.StowWeapons];
            for (let T = 0; T < z.length; T++) {
                const C = z[T];
                this.jxOFs.isBindPressed(C) && y.addInput(C)
            }
            if (this.jxOFs.isBindPressed(F.Interact)) {
                const T = []
                  , C = [F.Revive, F.Use, F.Loot];
                for (let N = 0; N < C.length; N++) {
                    const L = C[N];
                    this.jxOFs.getBind(L) || T.push(L)
                }
                if (T.length == C.length)
                    y.addInput(F.Interact);
                else
                    for (let N = 0; N < T.length; N++)
                        y.addInput(T[N])
            }
            (this.jxOFs.isBindPressed(F.SwapWeapSlots) || this.hiEDQE.swapWeapSlots) && (y.addInput(F.SwapWeapSlots),
            this.RCdIiz.gunSwitchCooldown = 0),
            this.hiEDQE.reloadTouched && y.addInput(F.Reload),
            this.hiEDQE.interactionTouched && (y.addInput(F.Interact),
            y.addInput(F.Cancel));
            for (let T = 0; T < this.JuMKdQ.uiEvents.length; T++) {
                const C = this.JuMKdQ.uiEvents[T];
                if (C.action == "use")
                    if (C.type == "weapon") {
                        const L = {
                            [Et.Primary]: F.EquipPrimary,
                            [Et.Secondary]: F.EquipSecondary,
                            [Et.Melee]: F.EquipMelee,
                            [Et.Throwable]: F.EquipThrowable
                        }[C.data];
                        L && y.addInput(L)
                    } else
                        y.useItem = C.data
            }
            this.jxOFs.isBindPressed(F.UseBandage) ? y.useItem = "bandage" : this.jxOFs.isBindPressed(F.UseHealthKit) ? y.useItem = "healthkit" : this.jxOFs.isBindPressed(F.UseSoda) ? y.useItem = "soda" : this.jxOFs.isBindPressed(F.UsePainkiller) && (y.useItem = "painkiller");
            let P = !1;
            for (let T = 0; T < this.JuMKdQ.uiEvents.length; T++) {
                const C = this.JuMKdQ.uiEvents[T];
                if (C.action == "drop") {
                    const N = new Ws;
                    if (C.type == "weapon") {
                        const L = C.data
                          , j = this.RCdIiz.qWTK.qIUScd;
                        N.item = j[L].type,
                        N.weapIdx = L
                    } else if (C.type == "perk") {
                        const L = C.data
                          , j = this.RCdIiz.pjeWp.jKw
                          , V = j.length > L ? j[L] : null;
                        V?.droppable && (N.item = V.type)
                    } else {
                        const L = C.data == "helmet" ? this.RCdIiz.pjeWp.yyaro : C.data == "chest" ? this.RCdIiz.pjeWp.TicL : C.data;
                        N.item = L
                    }
                    N.item != "" && (this.JhguE(ge.DropItem, N, 128),
                    N.item != "fists" && (P = !0))
                }
            }
            if (P && this.TAiFB.playSound("loot_drop_01", {
                channel: "ui"
            }),
            this.hiEDQE.roleSelected) {
                const T = new Gs;
                T.role = this.hiEDQE.roleSelected,
                this.JhguE(ge.PerkModeRoleSelect, T, 128),
                this.mnEX.set("perkModeRole", T.role)
            }
        }
        const M = this.hiEDQE.specBegin
          , I = this.hiEDQE.specNext || this.LbSAQ && this.XHJCu.keyPressed(Q.Right)
          , v = this.hiEDQE.specPrev || this.LbSAQ && this.XHJCu.keyPressed(Q.Left)
          , k = this.XHJCu.keyPressed(Q.Right) || this.XHJCu.keyPressed(Q.Left);
        if (M || this.LbSAQ && I || v) {
            const z = new Us;
            z.specBegin = M,
            z.specNext = I,
            z.specPrev = v,
            z.specForce = k,
            this.JhguE(ge.Spectate, z, 128)
        }
        this.hiEDQE.specBegin = !1,
        this.hiEDQE.specNext = !1,
        this.hiEDQE.specPrev = !1,
        this.hiEDQE.reloadTouched = !1,
        this.hiEDQE.interactionTouched = !1,
        this.hiEDQE.swapWeapSlots = !1,
        this.hiEDQE.roleSelected = "";
        let _ = !1;
        for (const z in y)
            if (y.hasOwnProperty(z)) {
                if (z == "inputs")
                    _ = y[z].length > 0;
                else if (z == "toMouseDir" || z == "touchMoveDir") {
                    const P = b.clamp(m.dot(y[z], this.SOGcRv[z]), -1, 1);
                    _ = b.rad2deg(Math.acos(P)) > .1
                } else
                    z == "toMouseLen" ? _ = Math.abs(this.SOGcRv[z] - y[z]) > .5 : z == "shootStart" ? _ = y[z] || y[z] != this.SOGcRv[z] : this.SOGcRv[z] != y[z] && (_ = !0);
                if (_)
                    break
            }
        this.TqYSnI -= e,
        (_ || this.TqYSnI < 0) && (this.seqInFlight || (this.seq = (this.seq + 1) % 256,
        this.seqSendTime = Date.now(),
        this.seqInFlight = !0,
        y.seq = this.seq),
        this.JhguE(ge.Input, y, 128),
        this.TqYSnI = 1,
        this.SOGcRv = y),
        this.JuMKdQ.flushInput(),
        this.rkQWB.nYcwKO(e, this.RCdIiz, this.IJTL, this.UPDCtm, this.TAiFB, this.OyqTlU, this.TgLFN, this.PNwB, i, t),
        this.WnBrd.nYcwKO(e, this.RCdIiz, this.rkQWB, this.TAiFB, this.PNwB, t),
        this.uqOoPa.nYcwKO(e, this.IJTL, this.rkQWB, this.PNwB, this.RCdIiz, this.TgLFN, this.UPDCtm, this.TAiFB),
        this.fcsYB.nYcwKO(e, this.IJTL, this.rkQWB, this.PNwB, this.RCdIiz, this.TgLFN, this.UPDCtm, this.TAiFB),
        this.fNnijD.nYcwKO(e, this.UPDCtm, this.TAiFB, this.RCdIiz, this.rkQWB, this.TgLFN, this.PNwB),
        this.tTNWcC.nYcwKO(e, this.rkQWB, this.IJTL, this.PNwB, this.UPDCtm, this.TAiFB, t),
        this.fzff.nYcwKO(e, this.RCdIiz, this.PNwB, this.rkQWB, this.UPDCtm, this.TgLFN, this.TAiFB),
        this.yAA.nYcwKO(e, this.PNwB, this.RCdIiz, this.rkQWB, this.TgLFN),
        this.oYW.nYcwKO(e, this.PNwB, this.RCdIiz, this.rkQWB, this.TgLFN),
        this.mxqUdF.nYcwKO(e, this.FYe, this.IJTL, this.UPDCtm, this.TAiFB),
        this.UPDCtm.nYcwKO(e, this.PNwB, t),
        this.hByIj.nYcwKO(e, this.IJTL, this.RCdIiz, this.rkQWB, this.PNwB, this.TgLFN),
        this.zZW.nYcwKO(e, this.PNwB, this.TgLFN, t),
        this.hiEDQE.nYcwKO(e, this.RCdIiz, this.rkQWB, this.sktYbp, this.WnBrd, this.IJTL, this.PNwB, this.teamMode, this.rkQWB.factionMode),
        this.JuMKdQ.nYcwKO(e, this.RCdIiz, this.LbSAQ, this.IJTL, this.WnBrd, this.rkQWB, this.jxOFs),
        this.eHc.nYcwKO(e, this.ItErHs, this.RCdIiz, this.teamMode, this.hByIj, this.rkQWB, this.TgLFN, this.XHJCu, this.jxOFs, this.LbSAQ),
        this.VrWJy.nYcwKO(e, this.RCdIiz, this.rkQWB, this.PNwB, this.TgLFN),
        this.TgLFN.nYcwKO(e, this.PNwB, this.rkQWB, t);
        for (let z = 0; z < this.eHc.newPings.length; z++) {
            const P = this.eHc.newPings[z]
              , T = new Ei;
            T.type = P.type,
            T.pos = P.pos,
            T.isPing = !0,
            this.JhguE(ge.Emote, T, 128)
        }
        this.eHc.newPings = [];
        for (let z = 0; z < this.eHc.newEmotes.length; z++) {
            const P = this.eHc.newEmotes[z]
              , T = new Ei;
            T.type = P.type,
            T.pos = P.pos,
            T.isPing = !1,
            this.JhguE(ge.Emote, T, 128)
        }
        this.eHc.newEmotes = [];
        const A = Date.now();
        if (A > this.debugPingTime) {
            let z = function(L, j) {
                return (" ".repeat(j) + L).slice(-7)
            };
            this.debugPingTime = A + 2e4;
            const P = this.pings.sort( (L, j) => L - j)
              , T = P.length;
            if (T > 0) {
                const L = P[Math.floor(T * .5)]
                  , j = P[Math.floor(T * .95)]
                  , V = P[T - 1];
                console.log("Ping     min:", z(P[0].toFixed(2), 7), "med:", z(L.toFixed(2), 7), "p95:", z(j.toFixed(2), 7), "max:", z(V.toFixed(2), 7))
            }
            this.pings = [];
            const C = this.updateIntervals.sort( (L, j) => L - j)
              , N = C.length;
            if (N > 0) {
                const L = C[Math.floor(N * .5)]
                  , j = C[Math.floor(N * .95)]
                  , V = C[N - 1];
                console.log("Interval min:", z(C[0].toFixed(2), 7), "med:", z(L.toFixed(2), 7), "p95:", z(j.toFixed(2), 7), "max:", z(V.toFixed(2), 7))
            }
            this.updateIntervals = []
        }
        this.FQpmn(e, t)
    }
    FQpmn(e, t) {
        const i = this.rkQWB.mapLoaded ? this.rkQWB.getMapDef().biome.colors.grass : 8433481;
        this.CRlMIZ.renderer.background.color = i,
        this.IJTL.FQpmn(this.PNwB, t),
        this.uqOoPa.FQpmn(this.PNwB, t),
        this.fcsYB.FQpmn(this.PNwB),
        this.zZW.FQpmn(this.PNwB, t, this.RCdIiz.layer),
        this.rkQWB.FQpmn(this.PNwB),
        this.sktYbp.FQpmn(e, this.PNwB),
        this.hiEDQE.FQpmn(this.RCdIiz.HiVuim, this.sktYbp, this.PNwB, this.rkQWB, this.yAA, t),
        this.eHc.FQpmn(this.PNwB)
    }
    updateAmbience() {
        const e = this.RCdIiz.HiVuim;
        let t = 0
          , i = 0
          , r = 1;
        if (this.rkQWB.isInOcean(e))
            t = 1,
            i = 0,
            r = 0;
        else {
            const s = this.rkQWB.distanceToShore(e);
            t = b.delerp(s, 50, 0),
            i = 0;
            for (let a = 0; a < this.rkQWB.terrain.rivers.length; a++) {
                const o = this.rkQWB.terrain?.rivers[a]
                  , h = o.spline.getClosestTtoPoint(e)
                  , f = o.spline.getPos(h)
                  , u = m.length(m.sub(f, e))
                  , d = o.waterWidth + 2
                  , p = b.delerp(u, 30 + d, d)
                  , w = b.clamp(o.waterWidth / 8, .25, 1);
                i = b.max(p * w, i)
            }
            this.RCdIiz.layer == 1 && (i = 0),
            r = 1
        }
        this.OyqTlU.getTrack("wind").weight = r,
        this.OyqTlU.getTrack("river").weight = i,
        this.OyqTlU.getTrack("waves").weight = t
    }
    resize() {
        this.PNwB.zaTP = B.screenWidth,
        this.PNwB.XbB = B.screenHeight,
        this.rkQWB.resize(this.CRlMIZ.renderer, this.oUI),
        this.sktYbp.resize(),
        this.hiEDQE.resize(this.rkQWB, this.PNwB),
        this.VrWJy.resize(),
        this.TgLFN.resize(this.rkQWB, this.PNwB)
    }
    nqP(e) {
        const t = {
            audioManager: this.TAiFB,
            renderer: this.TgLFN,
            particleBarn: this.UPDCtm,
            map: this.rkQWB,
            smokeBarn: this.oYW,
            decalBarn: this.zZW
        };
        e.activePlayerIdDirty && (this.FYe = e.activePlayerId);
        for (let s = 0; s < e.playerInfos.length; s++)
            this.IJTL.setPlayerInfo(e.playerInfos[s]);
        for (let s = 0; s < e.deletedPlayerIds.length; s++) {
            const a = e.deletedPlayerIds[s];
            this.IJTL.deletePlayerInfo(a)
        }
        if ((e.playerInfos.length > 0 || e.deletedPlayerIds.length > 0) && this.IJTL.recomputeTeamData(),
        e.playerStatusDirty) {
            const s = this.IJTL.getPlayerInfo(this.FYe).teamId;
            this.IJTL.updatePlayerStatus(s, e.playerStatus, this.rkQWB.factionMode)
        }
        if (e.groupStatusDirty) {
            const s = this.IJTL.getPlayerInfo(this.FYe).groupId;
            this.IJTL.updateGroupStatus(s, e.groupStatus)
        }
        for (let s = 0; s < e.delObjIds.length; s++)
            this.dVXQ.ezjqM(e.delObjIds[s]);
        for (let s = 0; s < e.fullObjects.length; s++) {
            const a = e.fullObjects[s];
            this.dVXQ.BsiUaJ(a.__type, a.__id, a, t)
        }
        for (let s = 0; s < e.partObjects.length; s++) {
            const a = e.partObjects[s];
            this.dVXQ.QNo(a.__id, a, t)
        }
        this.LbSAQ = this.FYe != this.ItErHs,
        this.RCdIiz = this.IJTL.getPlayerById(this.FYe),
        this.RCdIiz.SHTvb(e.activePlayerData, this.IJTL),
        e.activePlayerData.weapsDirty && (this.hiEDQE.weapsDirty = !0),
        this.LbSAQ && (this.hiEDQE.setSpectateTarget(this.FYe, this.ItErHs, this.teamMode, this.IJTL),
        this.VrWJy.hideAll()),
        this.RCdIiz.layer = this.RCdIiz.pjeWp.ySWeiH,
        this.TgLFN.setActiveLayer(this.RCdIiz.layer),
        this.TAiFB.activeLayer = this.RCdIiz.layer;
        const i = this.RCdIiz.isUnderground(this.rkQWB);
        this.TgLFN.setUnderground(i),
        this.TAiFB.underground = i,
        e.gasDirty && this.sktYbp.setFullState(e.gasT, e.gasData, this.rkQWB, this.hiEDQE),
        e.gasTDirty && this.sktYbp.setProgress(e.gasT);
        for (let s = 0; s < e.bullets.length; s++) {
            const a = e.bullets[s];
            Ia(a, this.uqOoPa, this.fcsYB, this.IJTL, this.TgLFN),
            a.shotFx && this.mxqUdF.addShot(a)
        }
        for (let s = 0; s < e.explosions.length; s++) {
            const a = e.explosions[s];
            this.tTNWcC.addExplosion(a.type, a.pos, a.layer)
        }
        for (let s = 0; s < e.emotes.length; s++) {
            const a = e.emotes[s];
            a.isPing ? this.eHc.addPing(a, this.rkQWB.factionMode) : this.eHc.addEmote(a)
        }
        this.yAA.updatePlanes(e.planes, this.rkQWB);
        for (let s = 0; s < e.airstrikeZones.length; s++)
            this.yAA.createAirstrikeZone(e.airstrikeZones[s]);
        if (this.hiEDQE.updateMapIndicators(e.mapIndicators),
        e.killLeaderDirty) {
            const s = X.htmlEscape(this.IJTL.getPlayerName(e.killLeaderId, this.FYe, !0));
            this.hiEDQE.updateKillLeader(e.killLeaderId, s, e.killLeaderKills, this.rkQWB.getMapDef().gameMode)
        }
        const r = Date.now();
        if (this.KXXgr++,
        e.ack == this.seq && this.seqInFlight) {
            this.seqInFlight = !1;
            const s = r - this.seqSendTime;
            this.pings.push(s)
        }
        if (this.lastUpdateTime > 0) {
            const s = r - this.lastUpdateTime;
            this.PNwB.NRB = s / 1e3,
            this.updateIntervals.push(s)
        }
        this.lastUpdateTime = r
    }
    buSEal(e, t) {
        switch (e) {
        case ge.Joined:
            {
                const i = new Ss;
                i.deserialize(t),
                this.onJoin(),
                this.teamMode = i.teamMode,
                this.ItErHs = i.playerId,
                this.HAQ = !0,
                this.eHc.updateEmoteWheel(i.emotes),
                i.started || this.hiEDQE.setWaitingForPlayers(!0),
                this.hiEDQE.removeAds(),
                this.victoryMusic && (this.victoryMusic.stop(),
                this.victoryMusic = null),
                document.hasFocus() || this.TAiFB.playSound("notification_start_01", {
                    channel: "ui"
                }),
                we.gamePlayStart();
                break
            }
        case ge.Map:
            {
                const i = new Vs;
                if (i.deserialize(t),
                this.rkQWB.loadMap(i, this.PNwB, this.oUI, this.UPDCtm),
                this.swuiyY.loadMapAssets(this.rkQWB.mapName),
                this.rkQWB.renderMap(this.CRlMIZ.renderer, this.oUI),
                this.IJTL.onMapLoad(this.rkQWB),
                this.uqOoPa.onMapLoad(this.rkQWB),
                this.UPDCtm.onMapLoad(this.rkQWB),
                this.hiEDQE.onMapLoad(this.rkQWB, this.PNwB),
                this.rkQWB.perkMode) {
                    const r = this.mnEX.get("perkModeRole");
                    this.hiEDQE.setRoleMenuOptions(r, this.rkQWB.getMapDef().gameMode.perkModeRoles),
                    this.hiEDQE.setRoleMenuActive(!0)
                } else
                    this.hiEDQE.setRoleMenuActive(!1);
                break
            }
        case ge.Update:
            {
                const i = new Ms;
                i.deserialize(t, this.dVXQ),
                this.tRH = !0,
                this.nqP(i);
                break
            }
        case ge.Kill:
            {
                const i = new Cs;
                i.deserialize(t);
                const r = i.itemSourceType || i.mapSourceType
                  , s = this.IJTL.getPlayerInfo(this.FYe).teamId
                  , a = i.downed && !i.killed || i.damageType == O.DamageType.Gas || i.damageType == O.DamageType.Bleeding || i.damageType == O.DamageType.Airdrop
                  , o = this.IJTL.getPlayerInfo(i.targetId)
                  , h = this.IJTL.getPlayerInfo(i.killCreditId)
                  , f = a ? h : this.IJTL.getPlayerInfo(i.killerId);
                let u = this.IJTL.getPlayerName(o.playerId, this.FYe, !0)
                  , d = this.IJTL.getPlayerName(h.playerId, this.FYe, !0)
                  , p = this.IJTL.getPlayerName(f.playerId, this.FYe, !0);
                if (u = X.htmlEscape(u),
                d = X.htmlEscape(d),
                p = X.htmlEscape(p),
                i.killCreditId == this.FYe) {
                    const g = i.killerId == this.FYe
                      , y = i.killerId == i.targetId || i.killCreditId == i.targetId
                      , M = this.JuMKdQ.getKillText(d, u, g, i.downed, i.killed, y, r, i.damageType, this.LbSAQ)
                      , I = i.killed && !y ? this.JuMKdQ.getKillCountText(i.killerKills) : "";
                    this.JuMKdQ.displayKillMessage(M, I)
                } else if (i.targetId == this.FYe && i.downed && !i.killed) {
                    const g = this.JuMKdQ.getDownedText(d, u, r, i.damageType, this.LbSAQ);
                    this.JuMKdQ.displayKillMessage(g, "")
                }
                i.killCreditId == this.ItErHs && i.killed && this.hiEDQE.setLocalKills(i.killerKills);
                const w = this.JuMKdQ.getKillFeedText(u, f.teamId ? p : "", r, i.damageType, i.downed && !i.killed)
                  , S = this.JuMKdQ.getKillFeedColor(s, o.teamId, h.teamId, this.rkQWB.factionMode);
                this.JuMKdQ.addKillFeedMessage(w, S),
                i.killed && this.IJTL.addDeathEffect(i.targetId, i.killerId, r, this.TAiFB, this.UPDCtm),
                i.damageType == O.DamageType.Player && this.uqOoPa.createBulletHit(this.IJTL, i.targetId, this.TAiFB);
                break
            }
        case ge.RoleAnnouncement:
            {
                const i = new qs;
                i.deserialize(t);
                const r = Tr[i.role];
                if (!r)
                    break;
                const s = this.IJTL.getPlayerInfo(i.playerId)
                  , a = X.htmlEscape(this.IJTL.getPlayerName(i.playerId, this.FYe, !0));
                if (i.assigned) {
                    if (r.sound?.assign && (i.role == "kill_leader" && this.rkQWB.getMapDef().gameMode.spookyKillSounds ? this.TAiFB.playGroup("kill_leader_assigned", {
                        channel: "ui"
                    }) : (i.role == "kill_leader" || !this.rkQWB.perkMode || this.ItErHs == i.playerId) && this.TAiFB.playSound(r.sound.assign, {
                        channel: "ui"
                    })),
                    this.rkQWB.perkMode && this.ItErHs == i.playerId && this.hiEDQE.setRoleMenuActive(!1),
                    r.killFeed?.assign) {
                        const o = this.JuMKdQ.getRoleAssignedKillFeedText(i.role, s.teamId, a)
                          , h = this.JuMKdQ.getRoleKillFeedColor(i.role, s.teamId, this.IJTL);
                        this.JuMKdQ.addKillFeedMessage(o, h)
                    }
                    if (r.announce && this.ItErHs == i.playerId) {
                        const o = this.JuMKdQ.getRoleAnnouncementText(i.role, s.teamId);
                        this.hiEDQE.displayAnnouncement(o.toUpperCase())
                    }
                } else if (i.killed) {
                    if (r.killFeed?.dead) {
                        let o = X.htmlEscape(this.IJTL.getPlayerName(i.killerId, this.FYe, !0));
                        i.playerId == i.killerId && (o = "");
                        const h = this.JuMKdQ.getRoleKilledKillFeedText(i.role, s.teamId, o)
                          , f = this.JuMKdQ.getRoleKillFeedColor(i.role, s.teamId, this.IJTL);
                        this.JuMKdQ.addKillFeedMessage(h, f)
                    }
                    r.sound?.dead && (this.rkQWB.getMapDef().gameMode.spookyKillSounds ? this.TAiFB.playGroup("kill_leader_dead", {
                        channel: "ui"
                    }) : this.TAiFB.playSound(r.sound.dead, {
                        channel: "ui"
                    }))
                }
                break
            }
        case ge.PlayerStats:
            {
                const i = new di;
                i.deserialize(t),
                this.hiEDQE.setLocalStats(i.playerStats),
                this.hiEDQE.showTeamAd(i.playerStats, this.JuMKdQ);
                break
            }
        case ge.Stats:
            {
                t.readString();
                break
            }
        case ge.GameOver:
            {
                const i = new Ds;
                i.deserialize(t),
                this.DdhhuT = i.gameOver;
                const r = this.IJTL.getPlayerInfo(this.ItErHs).teamId;
                for (let s = 0; s < i.playerStats.length; s++) {
                    const a = i.playerStats[s];
                    if (a.playerId == this.ItErHs) {
                        this.hiEDQE.setLocalStats(a);
                        break
                    }
                }
                this.hiEDQE.showStats(i.playerStats, i.teamId, i.teamRank, i.winningTeamId, i.gameOver, r, this.teamMode, this.LbSAQ, this.IJTL, this.TAiFB, this.rkQWB, this.JuMKdQ),
                r == i.winningTeamId && (this.victoryMusic = this.TAiFB.playSound("menu_music", {
                    channel: "music",
                    delay: 1300,
                    forceStart: !0
                })),
                this.VrWJy.hideAll();
                break
            }
        case ge.Pickup:
            {
                const i = new Bs;
                if (i.deserialize(t),
                i.type == Ze.Success && i.item) {
                    this.RCdIiz.playItemPickupSound(i.item, this.TAiFB);
                    const r = U[i.item];
                    r && r.type == "xp" && this.JuMKdQ.addRareLootMessage(i.item, !0)
                } else
                    this.JuMKdQ.displayPickupMessage(i.type);
                break
            }
        case ge.UpdatePass:
            {
                new os().deserialize(t),
                this.IAmJ = !0,
                this.hva = 0;
                break
            }
        case ge.AliveCounts:
            {
                const i = new Hs;
                i.deserialize(t),
                i.teamAliveCounts.length == 1 ? this.hiEDQE.updatePlayersAlive(i.teamAliveCounts[0]) : i.teamAliveCounts.length >= 2 && (this.hiEDQE.updatePlayersAliveRed(i.teamAliveCounts[0]),
                this.hiEDQE.updatePlayersAliveBlue(i.teamAliveCounts[1]));
                break
            }
        case ge.Disconnect:
            {
                const i = new ws;
                i.deserialize(t),
                this.DFNfXd = i.reason
            }
        }
    }
    JhguE(e, t, i) {
        const r = i || 128
          , s = new Bi(new ArrayBuffer(r));
        s.serializeMsg(e, t),
        this.hNYo(s)
    }
    hNYo(e) {
        if (this.hDQMzK && this.hDQMzK.readyState == this.hDQMzK.OPEN)
            try {
                this.hDQMzK.send(e.getBuffer())
            } catch (t) {
                console.error("sendMessageException", t),
                this.hDQMzK.close()
            }
    }
}
var kt = {}, mr;
function ko() {
    if (mr)
        return kt;
    mr = 1,
    kt.byteLength = o,
    kt.toByteArray = f,
    kt.fromByteArray = p;
    for (var l = [], e = [], t = typeof Uint8Array < "u" ? Uint8Array : Array, i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = 0, s = i.length; r < s; ++r)
        l[r] = i[r],
        e[i.charCodeAt(r)] = r;
    e[45] = 62,
    e[95] = 63;
    function a(w) {
        var S = w.length;
        if (S % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
        var g = w.indexOf("=");
        g === -1 && (g = S);
        var y = g === S ? 0 : 4 - g % 4;
        return [g, y]
    }
    function o(w) {
        var S = a(w)
          , g = S[0]
          , y = S[1];
        return (g + y) * 3 / 4 - y
    }
    function h(w, S, g) {
        return (S + g) * 3 / 4 - g
    }
    function f(w) {
        var S, g = a(w), y = g[0], M = g[1], I = new t(h(w, y, M)), v = 0, k = M > 0 ? y - 4 : y, _;
        for (_ = 0; _ < k; _ += 4)
            S = e[w.charCodeAt(_)] << 18 | e[w.charCodeAt(_ + 1)] << 12 | e[w.charCodeAt(_ + 2)] << 6 | e[w.charCodeAt(_ + 3)],
            I[v++] = S >> 16 & 255,
            I[v++] = S >> 8 & 255,
            I[v++] = S & 255;
        return M === 2 && (S = e[w.charCodeAt(_)] << 2 | e[w.charCodeAt(_ + 1)] >> 4,
        I[v++] = S & 255),
        M === 1 && (S = e[w.charCodeAt(_)] << 10 | e[w.charCodeAt(_ + 1)] << 4 | e[w.charCodeAt(_ + 2)] >> 2,
        I[v++] = S >> 8 & 255,
        I[v++] = S & 255),
        I
    }
    function u(w) {
        return l[w >> 18 & 63] + l[w >> 12 & 63] + l[w >> 6 & 63] + l[w & 63]
    }
    function d(w, S, g) {
        for (var y, M = [], I = S; I < g; I += 3)
            y = (w[I] << 16 & 16711680) + (w[I + 1] << 8 & 65280) + (w[I + 2] & 255),
            M.push(u(y));
        return M.join("")
    }
    function p(w) {
        for (var S, g = w.length, y = g % 3, M = [], I = 16383, v = 0, k = g - y; v < k; v += I)
            M.push(d(w, v, v + I > k ? k : v + I));
        return y === 1 ? (S = w[g - 1],
        M.push(l[S >> 2] + l[S << 4 & 63] + "==")) : y === 2 && (S = (w[g - 2] << 8) + w[g - 1],
        M.push(l[S >> 10] + l[S >> 4 & 63] + l[S << 2 & 63] + "=")),
        M.join("")
    }
    return kt
}
var vo = ko();
const hr = Mr(vo);
var oi = {
    exports: {}
}, ur;
function _o() {
    return ur || (ur = 1,
    function(l) {
        (function(e) {
            var t = function(p, w, S) {
                var g = p instanceof ArrayBuffer || typeof Buffer < "u" && p instanceof Buffer;
                if (!g)
                    throw new Error("Must specify a valid ArrayBuffer or Buffer.");
                w = w || 0,
                S = S || p.byteLength || p.length,
                this._view = new Uint8Array(p.buffer || p,w,S),
                this.bigEndian = !1
            };
            t._scratch = new DataView(new ArrayBuffer(8)),
            Object.defineProperty(t.prototype, "buffer", {
                get: function() {
                    return typeof Buffer < "u" ? Buffer.from(this._view.buffer) : this._view.buffer
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(t.prototype, "byteLength", {
                get: function() {
                    return this._view.length
                },
                enumerable: !0,
                configurable: !1
            }),
            t.prototype._setBit = function(p, w) {
                w ? this._view[p >> 3] |= 1 << (p & 7) : this._view[p >> 3] &= ~(1 << (p & 7))
            }
            ,
            t.prototype.getBits = function(p, w, S) {
                var g = this._view.length * 8 - p;
                if (w > g)
                    throw new Error("Cannot get " + w + " bit(s) from offset " + p + ", " + g + " available");
                for (var y = 0, M = 0; M < w; ) {
                    var I = w - M, v = p & 7, k = this._view[p >> 3], _ = Math.min(I, 8 - v), A, z;
                    this.bigEndian ? (A = ~(255 << _),
                    z = k >> 8 - _ - v & A,
                    y <<= _,
                    y |= z) : (A = ~(255 << _),
                    z = k >> v & A,
                    y |= z << M),
                    p += _,
                    M += _
                }
                return S ? (w !== 32 && y & 1 << w - 1 && (y |= -1 ^ (1 << w) - 1),
                y) : y >>> 0
            }
            ,
            t.prototype.setBits = function(p, w, S) {
                var g = this._view.length * 8 - p;
                if (S > g)
                    throw new Error("Cannot set " + S + " bit(s) from offset " + p + ", " + g + " available");
                for (var y = 0; y < S; ) {
                    var M = S - y, I = p & 7, v = p >> 3, k = Math.min(M, 8 - I), _, A, z;
                    if (this.bigEndian) {
                        _ = ~(-1 << k),
                        A = w >> S - y - k & _;
                        var P = 8 - I - k;
                        z = ~(_ << P),
                        this._view[v] = this._view[v] & z | A << P
                    } else
                        _ = ~(255 << k),
                        A = w & _,
                        w >>= k,
                        z = ~(_ << I),
                        this._view[v] = this._view[v] & z | A << I;
                    p += k,
                    y += k
                }
            }
            ,
            t.prototype.getBoolean = function(p) {
                return this.getBits(p, 1, !1) !== 0
            }
            ,
            t.prototype.getInt8 = function(p) {
                return this.getBits(p, 8, !0)
            }
            ,
            t.prototype.getUint8 = function(p) {
                return this.getBits(p, 8, !1)
            }
            ,
            t.prototype.getInt16 = function(p) {
                return this.getBits(p, 16, !0)
            }
            ,
            t.prototype.getUint16 = function(p) {
                return this.getBits(p, 16, !1)
            }
            ,
            t.prototype.getInt32 = function(p) {
                return this.getBits(p, 32, !0)
            }
            ,
            t.prototype.getUint32 = function(p) {
                return this.getBits(p, 32, !1)
            }
            ,
            t.prototype.getFloat32 = function(p) {
                return t._scratch.setUint32(0, this.getUint32(p)),
                t._scratch.getFloat32(0)
            }
            ,
            t.prototype.getFloat64 = function(p) {
                return t._scratch.setUint32(0, this.getUint32(p)),
                t._scratch.setUint32(4, this.getUint32(p + 32)),
                t._scratch.getFloat64(0)
            }
            ,
            t.prototype.setBoolean = function(p, w) {
                this.setBits(p, w ? 1 : 0, 1)
            }
            ,
            t.prototype.setInt8 = t.prototype.setUint8 = function(p, w) {
                this.setBits(p, w, 8)
            }
            ,
            t.prototype.setInt16 = t.prototype.setUint16 = function(p, w) {
                this.setBits(p, w, 16)
            }
            ,
            t.prototype.setInt32 = t.prototype.setUint32 = function(p, w) {
                this.setBits(p, w, 32)
            }
            ,
            t.prototype.setFloat32 = function(p, w) {
                t._scratch.setFloat32(0, w),
                this.setBits(p, t._scratch.getUint32(0), 32)
            }
            ,
            t.prototype.setFloat64 = function(p, w) {
                t._scratch.setFloat64(0, w),
                this.setBits(p, t._scratch.getUint32(0), 32),
                this.setBits(p + 32, t._scratch.getUint32(4), 32)
            }
            ,
            t.prototype.getArrayBuffer = function(p, w) {
                for (var S = new Uint8Array(w), g = 0; g < w; g++)
                    S[g] = this.getUint8(p + g * 8);
                return S
            }
            ;
            var i = function(p, w) {
                return function() {
                    if (this._index + w > this._length)
                        throw new Error("Trying to read past the end of the stream");
                    var S = this._view[p](this._index);
                    return this._index += w,
                    S
                }
            }
              , r = function(p, w) {
                return function(S) {
                    this._view[p](this._index, S),
                    this._index += w
                }
            };
            function s(p, w) {
                return o(p, w, !1)
            }
            function a(p, w) {
                return o(p, w, !0)
            }
            function o(p, w, S) {
                if (w === 0)
                    return "";
                var g = 0
                  , y = []
                  , M = !0
                  , I = !!w;
                for (w || (w = Math.floor((p._length - p._index) / 8)); g < w; ) {
                    var v = p.readUint8();
                    if (v === 0 && (M = !1,
                    !I))
                        break;
                    M && y.push(v),
                    g++
                }
                var k = String.fromCharCode.apply(null, y);
                if (S)
                    try {
                        return decodeURIComponent(escape(k))
                    } catch {
                        return k
                    }
                else
                    return k
            }
            function h(p, w, S) {
                for (var g = S || w.length + 1, y = 0; y < g; y++)
                    p.writeUint8(y < w.length ? w.charCodeAt(y) : 0)
            }
            function f(p, w, S) {
                for (var g = u(w), y = S || g.length + 1, M = 0; M < y; M++)
                    p.writeUint8(M < g.length ? g[M] : 0)
            }
            function u(p) {
                var w = [], S, g;
                for (S = 0; S < p.length; S++)
                    g = p.charCodeAt(S),
                    g <= 127 ? w.push(g) : g <= 2047 ? (w.push(g >> 6 | 192),
                    w.push(g & 63 | 128)) : g <= 65535 ? (w.push(g >> 12 | 224),
                    w.push(g >> 6 & 63 | 128),
                    w.push(g & 63 | 128)) : (w.push(g >> 18 | 240),
                    w.push(g >> 12 & 63 | 128),
                    w.push(g >> 6 & 63 | 128),
                    w.push(g & 63 | 128));
                return w
            }
            var d = function(p, w, S) {
                var g = p instanceof ArrayBuffer || typeof Buffer < "u" && p instanceof Buffer;
                if (!(p instanceof t) && !g)
                    throw new Error("Must specify a valid BitView, ArrayBuffer or Buffer");
                g ? this._view = new t(p,w,S) : this._view = p,
                this._index = 0,
                this._startIndex = 0,
                this._length = this._view.byteLength * 8
            };
            Object.defineProperty(d.prototype, "index", {
                get: function() {
                    return this._index - this._startIndex
                },
                set: function(p) {
                    this._index = p + this._startIndex
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "length", {
                get: function() {
                    return this._length - this._startIndex
                },
                set: function(p) {
                    this._length = p + this._startIndex
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "bitsLeft", {
                get: function() {
                    return this._length - this._index
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "byteIndex", {
                get: function() {
                    return Math.ceil(this._index / 8)
                },
                set: function(p) {
                    this._index = p * 8
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "buffer", {
                get: function() {
                    return this._view.buffer
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(d.prototype, "view", {
                get: function() {
                    return this._view
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(d.prototype, "bigEndian", {
                get: function() {
                    return this._view.bigEndian
                },
                set: function(p) {
                    this._view.bigEndian = p
                },
                enumerable: !0,
                configurable: !1
            }),
            d.prototype.readBits = function(p, w) {
                var S = this._view.getBits(this._index, p, w);
                return this._index += p,
                S
            }
            ,
            d.prototype.writeBits = function(p, w) {
                this._view.setBits(this._index, p, w),
                this._index += w
            }
            ,
            d.prototype.readBoolean = i("getBoolean", 1),
            d.prototype.readInt8 = i("getInt8", 8),
            d.prototype.readUint8 = i("getUint8", 8),
            d.prototype.readInt16 = i("getInt16", 16),
            d.prototype.readUint16 = i("getUint16", 16),
            d.prototype.readInt32 = i("getInt32", 32),
            d.prototype.readUint32 = i("getUint32", 32),
            d.prototype.readFloat32 = i("getFloat32", 32),
            d.prototype.readFloat64 = i("getFloat64", 64),
            d.prototype.writeBoolean = r("setBoolean", 1),
            d.prototype.writeInt8 = r("setInt8", 8),
            d.prototype.writeUint8 = r("setUint8", 8),
            d.prototype.writeInt16 = r("setInt16", 16),
            d.prototype.writeUint16 = r("setUint16", 16),
            d.prototype.writeInt32 = r("setInt32", 32),
            d.prototype.writeUint32 = r("setUint32", 32),
            d.prototype.writeFloat32 = r("setFloat32", 32),
            d.prototype.writeFloat64 = r("setFloat64", 64),
            d.prototype.readASCIIString = function(p) {
                return s(this, p)
            }
            ,
            d.prototype.readUTF8String = function(p) {
                return a(this, p)
            }
            ,
            d.prototype.writeASCIIString = function(p, w) {
                h(this, p, w)
            }
            ,
            d.prototype.writeUTF8String = function(p, w) {
                f(this, p, w)
            }
            ,
            d.prototype.readBitStream = function(p) {
                var w = new d(this._view);
                return w._startIndex = this._index,
                w._index = this._index,
                w.length = p,
                this._index += p,
                w
            }
            ,
            d.prototype.writeBitStream = function(p, w) {
                w || (w = p.bitsLeft);
                for (var S; w > 0; )
                    S = Math.min(w, 32),
                    this.writeBits(p.readBits(S), S),
                    w -= S
            }
            ,
            d.prototype.readArrayBuffer = function(p) {
                var w = this._view.getArrayBuffer(this._index, p);
                return this._index += p * 8,
                w
            }
            ,
            d.prototype.writeArrayBuffer = function(p, w) {
                this.writeBitStream(new d(p), w * 8)
            }
            ,
            l.exports && (l.exports = {
                BitView: t,
                BitStream: d
            })
        }
        )()
    }(oi)),
    oi.exports
}
var Io = _o();
const cr = Mr(Io)
  , To = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
function dr(l) {
    let e = 0;
    for (let t = 0; t < l.length; t++) {
        const i = l[t];
        e = (To[(e ^ i) & 255] ^ e >> 8) & 65535
    }
    return e
}
function te(l, e) {
    return {
        name: l,
        defaultValue: e
    }
}
function ue(l) {
    return new Pt(Ge.Key,l)
}
function pr(l) {
    return new Pt(Ge.MouseButton,l)
}
function fr(l) {
    return new Pt(Ge.MouseWheel,l)
}
const Tt = {
    [F.MoveLeft]: te("Move Left", ue(Q.A)),
    [F.MoveRight]: te("Move Right", ue(Q.D)),
    [F.MoveUp]: te("Move Up", ue(Q.W)),
    [F.MoveDown]: te("Move Down", ue(Q.S)),
    [F.Fire]: te("Fire", pr(fi.Left)),
    [F.Reload]: te("Reload", ue(Q.R)),
    [F.Cancel]: te("Cancel", ue(Q.X)),
    [F.Interact]: te("Interact", ue(Q.F)),
    [F.Revive]: te("Revive", null),
    [F.Use]: te("Open/Use", null),
    [F.Loot]: te("Loot", null),
    [F.EquipPrimary]: te("Equip Primary", ue(Q.One)),
    [F.EquipSecondary]: te("Equip Secondary", ue(Q.Two)),
    [F.EquipMelee]: te("Equip Melee", ue(Q.Three)),
    [F.EquipThrowable]: te("Equip Throwable", ue(Q.Four)),
    [F.EquipNextWeap]: te("Equip Next Weapon", fr(wi.Down)),
    [F.EquipPrevWeap]: te("Equip Previous Weapon", fr(wi.Up)),
    [F.EquipLastWeap]: te("Equip Last Weapon", ue(Q.Q)),
    [F.StowWeapons]: te("Stow Weapons", ue(Q.E)),
    [F.EquipPrevScope]: te("Equip Previous Scope", null),
    [F.EquipNextScope]: te("Equip Next Scope", null),
    [F.UseBandage]: te("Use Bandage", ue(Q.Seven)),
    [F.UseHealthKit]: te("Use Med Kit", ue(Q.Eight)),
    [F.UseSoda]: te("Use Soda", ue(Q.Nine)),
    [F.UsePainkiller]: te("Use Pills", ue(Q.Zero)),
    [F.SwapWeapSlots]: te("Switch Gun Slots", ue(Q.T)),
    [F.ToggleMap]: te("Toggle Map", ue(Q.M)),
    [F.CycleUIMode]: te("Toggle Minimap", ue(Q.V)),
    [F.EmoteMenu]: te("Emote Menu", pr(fi.Right)),
    [F.TeamPingMenu]: te("Team Ping Hold", ue(Q.C)),
    [F.EquipOtherGun]: te("Equip Other Gun", null),
    [F.Fullscreen]: te("Full Screen", ue(Q.L)),
    [F.HideUI]: te("Hide UI", null),
    [F.TeamPingSingle]: te("Team Ping Menu", null)
};
class Mo {
    constructor(e, t) {
        this.input = e,
        this.config = t,
        this.input = e,
        this.config = t,
        this.loadBinds()
    }
    binds = [];
    boundKeys = {};
    menuHovered = !1;
    toArray() {
        const e = new ArrayBuffer(this.binds.length * 2 + 1)
          , t = new cr.BitStream(e);
        t.writeUint8(1);
        for (let a = 0; a < this.binds.length; a++) {
            const o = this.binds[a]
              , h = o ? o.type : 0
              , f = o ? o.code : 0;
            t.writeBits(h & 3, 2),
            t.writeUint8(f & 255)
        }
        const i = new Uint8Array(e,0,t.byteIndex)
          , r = dr(i)
          , s = new Uint8Array(i.length + 2);
        return s.set(i),
        s[s.length - 2] = r >> 8 & 255,
        s[s.length - 1] = r & 255,
        s
    }
    fromArray(e) {
        let t = new Uint8Array(e);
        if (!t || t.length < 3)
            return !1;
        const i = t[t.length - 2] << 8 | t[t.length - 1];
        if (t = t.slice(0, t.length - 2),
        dr(t) != i)
            return !1;
        const r = new ArrayBuffer(t.length)
          , s = new Uint8Array(r);
        for (let h = 0; h < t.length; h++)
            s[h] = t[h];
        const a = new cr.BitStream(r)
          , o = a.readUint8();
        this.clearAllBinds();
        for (let h = 0; a.length - a.index >= 10; ) {
            const f = h++
              , u = a.readBits(2)
              , d = a.readUint8();
            f >= 0 && f < F.Count && u != Ge.None && this.setBind(f, u != 0 ? new Pt(u,d) : null)
        }
        return o < 1 && (this.upgradeBinds(o),
        this.saveBinds()),
        !0
    }
    toBase64() {
        return hr.fromByteArray(this.toArray())
    }
    fromBase64(e) {
        let t = !1;
        try {
            t = this.fromArray(hr.toByteArray(e))
        } catch (i) {
            console.error("Error", i)
        }
        return t
    }
    saveBinds() {
        this.config.set("binds", this.toBase64())
    }
    loadBinds() {
        this.fromBase64(this.config.get("binds") || "") || (this.loadDefaultBinds(),
        this.saveBinds())
    }
    upgradeBinds(e) {
        const t = [];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = Tt[r].defaultValue;
            for (let a = 0; a < this.binds.length && !this.binds[a]?.equals(s); a++)
                ;
            this.setBind(r, s)
        }
    }
    clearAllBinds() {
        for (let e = 0; e < F.Count; e++)
            this.binds[e] = null;
        this.boundKeys = {}
    }
    setBind(e, t) {
        if (t)
            for (let r = 0; r < this.binds.length; r++)
                this.binds[r]?.equals(t) && (this.binds[r] = null);
        const i = this.binds[e];
        i && i.type == Ge.Key && (this.boundKeys[i.code] = null),
        this.binds[e] = t,
        t && t.type == Ge.Key && (this.boundKeys[t.code] = !0)
    }
    getBind(e) {
        return this.binds[e]
    }
    preventMenuBind(e) {
        return e && this.menuHovered && (e.type == 2 || e.type == 3)
    }
    isKeyBound(e) {
        return this.boundKeys[e]
    }
    isBindPressed(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValuePressed(t)
    }
    isBindReleased(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValueReleased(t)
    }
    isBindDown(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValueDown(t)
    }
    loadDefaultBinds() {
        this.clearAllBinds();
        const e = Object.keys(Tt);
        for (let t = 0; t < e.length; t++) {
            const i = e[t]
              , r = Tt[i];
            this.setBind(parseInt(i), r.defaultValue)
        }
    }
}
class Po {
    constructor(e, t) {
        this.input = e,
        this.inputBinds = t,
        this.input = e,
        this.inputBinds = t,
        c(".js-btn-keybind-restore").on("click", () => {
            this.inputBinds.loadDefaultBinds(),
            this.inputBinds.saveBinds(),
            this.refresh()
        }
        )
    }
    cancelBind() {
        this.input.captureNextInput(null)
    }
    refresh() {
        const e = Object.keys(Tt)
          , t = this.inputBinds.binds
          , i = c(".js-keybind-list");
        i.empty();
        for (let r = 0; r < e.length; r++) {
            const s = e[r]
              , a = Tt[s]
              , o = t[s]
              , h = c("<a/>", {
                class: "btn-game-menu btn-darken btn-keybind-desc",
                text: a.name
            })
              , f = c("<div/>", {
                class: "btn-keybind-display",
                text: o ? o.toString() : ""
            });
            h.on("click", u => {
                const d = c(u.target);
                d.addClass("btn-keybind-desc-selected"),
                this.input.captureNextInput( (p, w) => {
                    p.preventDefault(),
                    p.stopPropagation();
                    const S = [Q.Control, Q.Shift, Q.Alt, Q.Windows, Q.ContextMenu, Q.F1, Q.F2, Q.F3, Q.F4, Q.F5, Q.F6, Q.F7, Q.F8, Q.F9, Q.F10, Q.F11, Q.F12];
                    if (w.type == Ge.Key && S.includes(w.code))
                        return !1;
                    if (d.removeClass("btn-keybind-desc-selected"),
                    !w.equals(ue(Q.Escape))) {
                        let g = w;
                        w.equals(ue(Q.Backspace)) && (g = null),
                        this.inputBinds.setBind(parseInt(s), g),
                        this.inputBinds.saveBinds(),
                        this.refresh()
                    }
                    return !0
                }
                )
            }
            ),
            i.append(c("<div/>", {
                class: "ui-keybind-container"
            }).append(h).append(f))
        }
        c("#keybind-link").html(this.inputBinds.toBase64())
    }
}
var li = [{
    region: "na",
    zone: "na",
    url: "usr.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "eu",
    zone: "eu",
    url: "eur.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "asia",
    zone: "asia",
    url: "asr.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "sa",
    zone: "sa",
    url: "sa.mathsiscoolfun.com:8001",
    https: !0
}];
class Co {
    ptcDataBuf = new ArrayBuffer(1);
    tests = li.map(e => ({
        region: e.region,
        zone: e.zone,
        url: e.url,
        https: e.https,
        ping: 9999,
        active: !1,
        complete: !1,
        ws: null,
        sendDelay: 0,
        sendTime: 0,
        sendCount: 0,
        recvCount: 0,
        recvCountMax: 6,
        retryCount: 0,
        retryCountMax: 1
    }));
    testsStarted = 0;
    testsCompleted = 0;
    printSummary = !0;
    start(e) {
        if ("WebSocket"in window) {
            let t = 0;
            for (let i = 0; i < this.tests.length; i++) {
                const r = this.tests[i];
                !r.active && !r.complete && e.includes(r.region) && (r.active = !0,
                this.testsStarted++,
                t++)
            }
            t > 0 && (this.printSummary = !0)
        }
    }
    update(e) {
        const t = r => {
            r.active = !1,
            r.complete = !0,
            this.testsCompleted++
        }
          , i = function(r) {
            r.ws && (r.ws.close(),
            r.ws = null),
            r.complete || r.retryCount++ >= r.retryCountMax && t(r)
        };
        for (let r = 0; r < this.tests.length; r++) {
            const s = this.tests[r];
            if (s.active) {
                if (!s.ws) {
                    const a = new WebSocket(`ws${s.https ? "s" : ""}://${s.url}/ptc`);
                    a.binaryType = "arraybuffer",
                    a.onopen = function() {}
                    ,
                    a.onmessage = function(o) {
                        const h = (Date.now() - s.sendTime) / 1e3;
                        s.ping = Math.min(s.ping, h),
                        s.recvCount++,
                        s.sendDelay = .125
                    }
                    ,
                    a.onerror = function(o) {
                        i(s)
                    }
                    ,
                    a.onclose = function() {
                        i(s)
                    }
                    ,
                    s.ws = a,
                    s.sendDelay = 0,
                    s.sendCount = 0,
                    s.recvCount = 0
                }
                if (s.ws.readyState == s.ws.OPEN) {
                    if (s.sendDelay -= e,
                    s.sendCount == s.recvCount && s.sendDelay < 0) {
                        s.sendTime = Date.now(),
                        s.sendCount++;
                        try {
                            s.ws.send(this.ptcDataBuf)
                        } catch {
                            s.ws.close()
                        }
                    }
                    s.recvCount >= s.recvCountMax && (t(s),
                    s.ws.close())
                }
            }
        }
        if (this.printSummary && this.isComplete()) {
            const r = this.tests.sort( (s, a) => s.ping - a.ping);
            console.log("Ping test results"),
            console.log("----------------------------------------");
            for (let s = 0; s < r.length; s++) {
                const a = r[s];
                console.log("region", a.region, "zone  ", a.zone, "ping  ", a.ping)
            }
            this.printSummary = !1
        }
    }
    isComplete() {
        return this.testsCompleted == this.testsStarted && this.testsStarted > 0
    }
    getRegionList() {
        const e = [];
        for (let t = 0; t < li.length; t++) {
            const i = li[t].region;
            e.includes(i) || e.push(i)
        }
        return e
    }
    getRegion() {
        return this.tests.sort( (e, t) => e.ping - t.ping),
        this.tests[0].region
    }
    getZones(e) {
        const t = this.tests.sort( (r, s) => r.ping - s.ping)
          , i = [];
        for (let r = 0; r < t.length; r++) {
            const s = t[r];
            s.region == e && i.push(s.zone)
        }
        return i
    }
}
const Do = "https://survev.io/assets/cobalt-0-100-Df0tyq7G.png",
  Bo = "https://survev.io/assets/cobalt-0-50-BzZK-69k.png",
  Lo = "https://survev.io/assets/desert-0-100-CcFxaZpx.png",
  Ao = "https://survev.io/assets/desert-0-50-H7rp-TXz.png",
  Eo = "https://survev.io/assets/faction-0-100-CjOcvSr8.png",
  Ro = "https://survev.io/assets/faction-0-50-Bfqg9Qu0.png",
  Oo = "https://survev.io/assets/gradient-0-100-BWziP7KR.png",
  Fo = "https://survev.io/assets/gradient-0-50-bTGcoPWw.png",
  No = "https://survev.io/assets/halloween-0-100-6GI11Ci5.png",
  jo = "https://survev.io/assets/halloween-0-50-CaXpbqBI.png",
  Vo = "https://survev.io/assets/loadout-0-100-Cx3DIbRl.png",
  Uo = "https://survev.io/assets/loadout-0-50-DhXwN0VF.png",
  Wo = "https://survev.io/assets/main-0-100-BauU3jKx.png",
  qo = "https://survev.io/assets/main-0-50-DzJmCPH8.png",
  Ho = "https://survev.io/assets/potato-0-100-CT5DQXbk.png",
  Go = "https://survev.io/assets/potato-0-50-CjiLrj5w.png",
  Qo = "https://survev.io/assets/savannah-0-100-HMmAClDQ.png",
  $o = "https://survev.io/assets/savannah-0-50-bytEgcs1.png",
  Jo = "https://survev.io/assets/shared-0-100-UDUisNiW.png",
  Xo = "https://survev.io/assets/shared-0-50-DUWZj4Qy.png",
  Ko = "https://survev.io/assets/shared-1-100-DyOGRdAe.png",
  Yo = "https://survev.io/assets/shared-1-50-CW16zb35.png",
  Zo = "https://survev.io/assets/shared-2-100-DZ5zt5bS.png",
  el = "https://survev.io/assets/shared-2-50-Dw4HkJQU.png",
  tl = "https://survev.io/assets/snow-0-100-Wkw_7etL.png",
  il = "https://survev.io/assets/snow-0-50-DFXrUIAG.png",
  rl = "https://survev.io/assets/woods-0-100-D64cFzl2.png",
  sl = "https://survev.io/assets/woods-0-50-DQZ4isPk.png",
  al = JSON.parse('[{"meta":{"image":"cobalt-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1490,"y":1811,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":1811,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":726,"y":3067,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1434,"y":2863,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3297,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":3555,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":2010,"y":2092,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":2797,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1418,"y":3067,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1740,"y":2863,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1740,"y":3187,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":1740,"y":3421,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1434,"y":2555,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":712,"y":2055,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1814,"y":2092,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2,"y":3811,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2064,"y":2924,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2055,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1142,"y":1811,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1490,"y":2092,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":3177,"y":1546,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1870,"y":2446,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":710,"y":3297,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":726,"y":2555,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":3177,"y":934,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1904,"y":3421,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1904,"y":3187,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":1418,"y":3679,"w":512,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":352},"sourceSize":{"w":512,"h":352}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":1701,"y":934,"w":1472,"h":1154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":96,"y":127,"w":1472,"h":1154},"sourceSize":{"w":1664,"h":1408}},"map-class-crate-03.img":{"frame":{"x":1870,"y":2720,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":134,"h":134},"sourceSize":{"w":148,"h":148}},"map-class-crate-assault.img":{"frame":{"x":2101,"y":3270,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-demo.img":{"frame":{"x":2194,"y":2348,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-healer.img":{"frame":{"x":2194,"y":2494,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-res-01.img":{"frame":{"x":1012,"y":2403,"w":125,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":15,"w":125,"h":128},"sourceSize":{"w":148,"h":148}},"map-class-crate-scout.img":{"frame":{"x":1934,"y":3625,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-sniper.img":{"frame":{"x":1934,"y":3771,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-tank.img":{"frame":{"x":1934,"y":3917,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-shell-01a.img":{"frame":{"x":712,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01b.img":{"frame":{"x":862,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02a.img":{"frame":{"x":688,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02b.img":{"frame":{"x":838,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03a.img":{"frame":{"x":988,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03b.img":{"frame":{"x":1138,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1340,"y":3067,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1701,"y":359,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1765,"y":359,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-stone-01cb.img":{"frame":{"x":2101,"y":3122,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-03cb.img":{"frame":{"x":406,"y":3811,"w":278,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":278,"h":278},"sourceSize":{"w":288,"h":288}},"map-stone-res-01cb.img":{"frame":{"x":3343,"y":804,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02cb.img":{"frame":{"x":2064,"y":2720,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-tree-03cb.img":{"frame":{"x":2142,"y":2092,"w":254,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":254,"h":252},"sourceSize":{"w":256,"h":256}},"part-class-shell-01a.img":{"frame":{"x":1490,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-01b.img":{"frame":{"x":1814,"y":2446,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-02a.img":{"frame":{"x":1582,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-02b.img":{"frame":{"x":2008,"y":2720,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-03a.img":{"frame":{"x":1674,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-03b.img":{"frame":{"x":2008,"y":2788,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}}}}]')
  , ol = [{
    meta: {
        image: "desert-0-100.png",
        size: {
            w: 4096,
            h: 4096
        },
        scale: 1
    },
    frames: {
        "map-archway-res-01.img": {
            frame: {
                x: 2253,
                y: 1242,
                w: 359,
                h: 91
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 2,
                w: 359,
                h: 91
            },
            sourceSize: {
                w: 360,
                h: 96
            }
        },
        "map-building-archway-ceiling-01.img": {
            frame: {
                x: 3421,
                y: 648,
                w: 672,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 672,
                h: 128
            },
            sourceSize: {
                w: 672,
                h: 128
            }
        },
        "map-building-greenhouse-ceiling-02.img": {
            frame: {
                x: 3421,
                y: 780,
                w: 400,
                h: 624
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 400,
                h: 624
            },
            sourceSize: {
                w: 400,
                h: 624
            }
        },
        "map-building-greenhouse-floor-02.img": {
            frame: {
                x: 2616,
                y: 2,
                w: 832,
                h: 642
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 832,
                h: 642
            },
            sourceSize: {
                w: 834,
                h: 642
            }
        },
        "map-building-saloon-ceiling-01.img": {
            frame: {
                x: 3452,
                y: 2,
                w: 625,
                h: 624
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 625,
                h: 624
            },
            sourceSize: {
                w: 656,
                h: 656
            }
        },
        "map-building-saloon-ceiling-02.img": {
            frame: {
                x: 1774,
                y: 1146,
                w: 192,
                h: 160
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 192,
                h: 160
            },
            sourceSize: {
                w: 192,
                h: 160
            }
        },
        "map-building-saloon-cellar-01.img": {
            frame: {
                x: 2,
                y: 1318,
                w: 1056,
                h: 672
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 1056,
                h: 672
            },
            sourceSize: {
                w: 1056,
                h: 672
            }
        },
        "map-building-saloon-floor-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 1312,
                h: 1312
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 1312,
                h: 1312
            },
            sourceSize: {
                w: 1312,
                h: 1312
            }
        },
        "map-bunker-chrys-chamber-ceiling-01.img": {
            frame: {
                x: 1318,
                y: 938,
                w: 448,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 448,
                h: 272
            },
            sourceSize: {
                w: 448,
                h: 272
            }
        },
        "map-bunker-chrys-chamber-floor-01a.img": {
            frame: {
                x: 3246,
                y: 1426,
                w: 161,
                h: 148
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 34,
                y: 32,
                w: 161,
                h: 148
            },
            sourceSize: {
                w: 228,
                h: 180
            }
        },
        "map-bunker-chrys-chamber-floor-01b.img": {
            frame: {
                x: 1062,
                y: 1318,
                w: 931,
                h: 627
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 931,
                h: 627
            },
            sourceSize: {
                w: 932,
                h: 628
            }
        },
        "map-bunker-chrys-compartment-ceiling-01a.img": {
            frame: {
                x: 3982,
                y: 2162,
                w: 112,
                h: 192
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 192
            },
            sourceSize: {
                w: 112,
                h: 192
            }
        },
        "map-bunker-chrys-compartment-ceiling-01b.img": {
            frame: {
                x: 2253,
                y: 870,
                w: 354,
                h: 368
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 2,
                w: 354,
                h: 368
            },
            sourceSize: {
                w: 356,
                h: 372
            }
        },
        "map-bunker-chrys-compartment-ceiling-02a.img": {
            frame: {
                x: 1318,
                y: 1214,
                w: 224,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 96
            },
            sourceSize: {
                w: 224,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-02b.img": {
            frame: {
                x: 3246,
                y: 1592,
                w: 352,
                h: 258
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 0,
                w: 352,
                h: 258
            },
            sourceSize: {
                w: 356,
                h: 260
            }
        },
        "map-bunker-chrys-compartment-ceiling-03a.img": {
            frame: {
                x: 1546,
                y: 1214,
                w: 224,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 96
            },
            sourceSize: {
                w: 224,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-03b.img": {
            frame: {
                x: 3602,
                y: 1592,
                w: 352,
                h: 306
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 352,
                h: 306
            },
            sourceSize: {
                w: 356,
                h: 308
            }
        },
        "map-bunker-chrys-compartment-floor-01a.img": {
            frame: {
                x: 3825,
                y: 780,
                w: 228,
                h: 611
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 32,
                w: 228,
                h: 611
            },
            sourceSize: {
                w: 228,
                h: 644
            }
        },
        "map-bunker-chrys-compartment-floor-01c.img": {
            frame: {
                x: 2616,
                y: 648,
                w: 801,
                h: 774
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 801,
                h: 774
            },
            sourceSize: {
                w: 804,
                h: 804
            }
        },
        "map-bunker-chrys-compartment-floor-02a.img": {
            frame: {
                x: 1997,
                y: 1426,
                w: 771,
                h: 628
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 771,
                h: 628
            },
            sourceSize: {
                w: 772,
                h: 628
            }
        },
        "map-bunker-chrys-compartment-floor-02c.img": {
            frame: {
                x: 3421,
                y: 1408,
                w: 516,
                h: 180
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 16,
                y: 0,
                w: 516,
                h: 180
            },
            sourceSize: {
                w: 548,
                h: 180
            }
        },
        "map-bunker-chrys-compartment-floor-03a.img": {
            frame: {
                x: 1844,
                y: 2,
                w: 768,
                h: 864
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 768,
                h: 864
            },
            sourceSize: {
                w: 768,
                h: 864
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 3064,
                y: 1922,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 3818,
                y: 2162,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-bunker-statue-chamber-floor-01.img": {
            frame: {
                x: 1997,
                y: 870,
                w: 252,
                h: 542
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 32,
                w: 252,
                h: 542
            },
            sourceSize: {
                w: 256,
                h: 576
            }
        },
        "map-bush-05.img": {
            frame: {
                x: 3064,
                y: 2156,
                w: 140,
                h: 140
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 140,
                h: 140
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-bush-res-05.img": {
            frame: {
                x: 1770,
                y: 938,
                w: 56,
                h: 50
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 44,
                y: 47,
                w: 56,
                h: 50
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-case-meteor-01.img": {
            frame: {
                x: 3208,
                y: 2288,
                w: 140,
                h: 102
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 140,
                h: 102
            },
            sourceSize: {
                w: 140,
                h: 102
            }
        },
        "map-case-meteor-res-01.img": {
            frame: {
                x: 3958,
                y: 1543,
                w: 128,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 13,
                y: 10,
                w: 128,
                h: 115
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-chest-03d.img": {
            frame: {
                x: 3352,
                y: 2288,
                w: 140,
                h: 102
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 140,
                h: 102
            },
            sourceSize: {
                w: 140,
                h: 102
            }
        },
        "map-complex-warehouse-floor-05.img": {
            frame: {
                x: 1318,
                y: 2,
                w: 522,
                h: 932
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1008,
                w: 522,
                h: 932
            },
            sourceSize: {
                w: 1296,
                h: 2048
            }
        },
        "map-crate-02f.img": {
            frame: {
                x: 3941,
                y: 1395,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-crate-18.img": {
            frame: {
                x: 3228,
                y: 2140,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-crate-22.img": {
            frame: {
                x: 3376,
                y: 2140,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-planter-06.img": {
            frame: {
                x: 1844,
                y: 870,
                w: 144,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 272
            },
            sourceSize: {
                w: 144,
                h: 272
            }
        },
        "map-planter-07.img": {
            frame: {
                x: 3958,
                y: 1784,
                w: 100,
                h: 100
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 100,
                h: 100
            },
            sourceSize: {
                w: 100,
                h: 100
            }
        },
        "map-planter-res-02.img": {
            frame: {
                x: 3982,
                y: 2358,
                w: 76,
                h: 134
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 1,
                w: 76,
                h: 134
            },
            sourceSize: {
                w: 86,
                h: 136
            }
        },
        "map-planter-res-03.img": {
            frame: {
                x: 2253,
                y: 1337,
                w: 82,
                h: 74
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 6,
                w: 82,
                h: 74
            },
            sourceSize: {
                w: 86,
                h: 86
            }
        },
        "map-statue-03.img": {
            frame: {
                x: 3246,
                y: 1854,
                w: 288,
                h: 282
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 67,
                y: 67,
                w: 288,
                h: 282
            },
            sourceSize: {
                w: 416,
                h: 416
            }
        },
        "map-statue-04.img": {
            frame: {
                x: 2772,
                y: 1922,
                w: 288,
                h: 282
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 67,
                y: 67,
                w: 288,
                h: 282
            },
            sourceSize: {
                w: 416,
                h: 416
            }
        },
        "map-stone-03b.img": {
            frame: {
                x: 3538,
                y: 2034,
                w: 276,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 6,
                y: 8,
                w: 276,
                h: 272
            },
            sourceSize: {
                w: 288,
                h: 288
            }
        },
        "map-stone-06.img": {
            frame: {
                x: 3538,
                y: 1902,
                w: 288,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 288,
                h: 128
            },
            sourceSize: {
                w: 288,
                h: 128
            }
        },
        "map-stone-res-01b.img": {
            frame: {
                x: 3958,
                y: 1662,
                w: 118,
                h: 118
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 118,
                h: 118
            },
            sourceSize: {
                w: 120,
                h: 120
            }
        },
        "map-tree-05c.img": {
            frame: {
                x: 2772,
                y: 1426,
                w: 470,
                h: 492
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 21,
                y: 10,
                w: 470,
                h: 492
            },
            sourceSize: {
                w: 512,
                h: 512
            }
        },
        "map-tree-06.img": {
            frame: {
                x: 3830,
                y: 1902,
                w: 256,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 256
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        }
    }
}]
  , ll = [{
    meta: {
        image: "faction-0-100.png",
        size: {
            w: 4096,
            h: 4096
        },
        scale: 1
    },
    frames: {
        "map-airdrop-03.img": {
            frame: {
                x: 3770,
                y: 1461,
                w: 256,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 256
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-airdrop-04.img": {
            frame: {
                x: 3770,
                y: 1721,
                w: 256,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 256
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-building-bridge-xlg-floor.img": {
            frame: {
                x: 2,
                y: 2,
                w: 2464,
                h: 960
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 2464,
                h: 960
            },
            sourceSize: {
                w: 2464,
                h: 960
            }
        },
        "map-building-greenhouse-ceiling-01.img": {
            frame: {
                x: 1712,
                y: 2020,
                w: 401,
                h: 314
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 401,
                h: 314
            },
            sourceSize: {
                w: 404,
                h: 316
            }
        },
        "map-building-greenhouse-floor-01.img": {
            frame: {
                x: 774,
                y: 966,
                w: 832,
                h: 641
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 832,
                h: 641
            },
            sourceSize: {
                w: 834,
                h: 642
            }
        },
        "map-bunker-chrys-chamber-ceiling-01.img": {
            frame: {
                x: 1712,
                y: 1744,
                w: 448,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 448,
                h: 272
            },
            sourceSize: {
                w: 448,
                h: 272
            }
        },
        "map-bunker-chrys-chamber-floor-01a.img": {
            frame: {
                x: 750,
                y: 1887,
                w: 161,
                h: 148
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 34,
                y: 32,
                w: 161,
                h: 148
            },
            sourceSize: {
                w: 228,
                h: 180
            }
        },
        "map-bunker-chrys-chamber-floor-01b.img": {
            frame: {
                x: 2,
                y: 2054,
                w: 931,
                h: 627
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 931,
                h: 627
            },
            sourceSize: {
                w: 932,
                h: 628
            }
        },
        "map-bunker-chrys-compartment-ceiling-01a.img": {
            frame: {
                x: 166,
                y: 3833,
                w: 112,
                h: 192
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 192
            },
            sourceSize: {
                w: 112,
                h: 192
            }
        },
        "map-bunker-chrys-compartment-ceiling-01b.img": {
            frame: {
                x: 2,
                y: 2685,
                w: 354,
                h: 368
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 2,
                w: 354,
                h: 368
            },
            sourceSize: {
                w: 356,
                h: 372
            }
        },
        "map-bunker-chrys-compartment-ceiling-02a.img": {
            frame: {
                x: 522,
                y: 1834,
                w: 224,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 96
            },
            sourceSize: {
                w: 224,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-02b.img": {
            frame: {
                x: 2,
                y: 3057,
                w: 352,
                h: 258
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 0,
                w: 352,
                h: 258
            },
            sourceSize: {
                w: 356,
                h: 260
            }
        },
        "map-bunker-chrys-compartment-ceiling-03a.img": {
            frame: {
                x: 522,
                y: 1934,
                w: 224,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 96
            },
            sourceSize: {
                w: 224,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-03b.img": {
            frame: {
                x: 2,
                y: 3319,
                w: 352,
                h: 306
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 352,
                h: 306
            },
            sourceSize: {
                w: 356,
                h: 308
            }
        },
        "map-bunker-chrys-compartment-floor-01a.img": {
            frame: {
                x: 3770,
                y: 2,
                w: 228,
                h: 611
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 32,
                w: 228,
                h: 611
            },
            sourceSize: {
                w: 228,
                h: 644
            }
        },
        "map-bunker-chrys-compartment-floor-01b.img": {
            frame: {
                x: 1610,
                y: 966,
                w: 801,
                h: 774
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 801,
                h: 774
            },
            sourceSize: {
                w: 804,
                h: 804
            }
        },
        "map-bunker-chrys-compartment-floor-02a.img": {
            frame: {
                x: 937,
                y: 1744,
                w: 771,
                h: 628
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 771,
                h: 628
            },
            sourceSize: {
                w: 772,
                h: 628
            }
        },
        "map-bunker-chrys-compartment-floor-02b.img": {
            frame: {
                x: 2,
                y: 1834,
                w: 516,
                h: 180
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 16,
                y: 0,
                w: 516,
                h: 180
            },
            sourceSize: {
                w: 548,
                h: 180
            }
        },
        "map-bunker-chrys-compartment-floor-03a.img": {
            frame: {
                x: 2,
                y: 966,
                w: 768,
                h: 864
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 768,
                h: 864
            },
            sourceSize: {
                w: 768,
                h: 864
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 2,
                y: 3629,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 2,
                y: 3863,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-chest-03f.img": {
            frame: {
                x: 282,
                y: 3981,
                w: 140,
                h: 102
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 140,
                h: 102
            },
            sourceSize: {
                w: 140,
                h: 102
            }
        },
        "map-complex-warehouse-floor-01.img": {
            frame: {
                x: 4030,
                y: 1461,
                w: 60,
                h: 224
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 224
            },
            sourceSize: {
                w: 60,
                h: 224
            }
        },
        "map-complex-warehouse-floor-02.img": {
            frame: {
                x: 4002,
                y: 2,
                w: 60,
                h: 528
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 528
            },
            sourceSize: {
                w: 60,
                h: 528
            }
        },
        "map-complex-warehouse-floor-03.img": {
            frame: {
                x: 4030,
                y: 1689,
                w: 60,
                h: 224
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 224
            },
            sourceSize: {
                w: 60,
                h: 224
            }
        },
        "map-complex-warehouse-floor-04.img": {
            frame: {
                x: 2470,
                y: 2,
                w: 1296,
                h: 2048
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 1296,
                h: 2048
            },
            sourceSize: {
                w: 1296,
                h: 2048
            }
        },
        "map-crate-02f.img": {
            frame: {
                x: 282,
                y: 3833,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-crate-12.img": {
            frame: {
                x: 3770,
                y: 1981,
                w: 240,
                h: 240
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 240,
                h: 240
            },
            sourceSize: {
                w: 240,
                h: 240
            }
        },
        "map-crate-13.img": {
            frame: {
                x: 2117,
                y: 2030,
                w: 240,
                h: 240
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 240,
                h: 240
            },
            sourceSize: {
                w: 240,
                h: 240
            }
        },
        "map-crate-22.img": {
            frame: {
                x: 358,
                y: 3057,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-planter-01.img": {
            frame: {
                x: 774,
                y: 1611,
                w: 144,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 272
            },
            sourceSize: {
                w: 144,
                h: 272
            }
        },
        "map-planter-02.img": {
            frame: {
                x: 3770,
                y: 1185,
                w: 144,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 272
            },
            sourceSize: {
                w: 144,
                h: 272
            }
        },
        "map-planter-03.img": {
            frame: {
                x: 3918,
                y: 1185,
                w: 144,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 272
            },
            sourceSize: {
                w: 144,
                h: 272
            }
        },
        "map-planter-04.img": {
            frame: {
                x: 2361,
                y: 2030,
                w: 100,
                h: 100
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 100,
                h: 100
            },
            sourceSize: {
                w: 100,
                h: 100
            }
        },
        "map-planter-05.img": {
            frame: {
                x: 426,
                y: 3981,
                w: 100,
                h: 100
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 100,
                h: 100
            },
            sourceSize: {
                w: 100,
                h: 100
            }
        },
        "map-planter-res-01.img": {
            frame: {
                x: 4014,
                y: 1981,
                w: 76,
                h: 134
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 1,
                w: 76,
                h: 134
            },
            sourceSize: {
                w: 86,
                h: 136
            }
        },
        "map-statue-01.img": {
            frame: {
                x: 2164,
                y: 1744,
                w: 282,
                h: 282
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 67,
                y: 67,
                w: 282,
                h: 282
            },
            sourceSize: {
                w: 416,
                h: 416
            }
        },
        "map-statue-top-01.img": {
            frame: {
                x: 3770,
                y: 617,
                w: 279,
                h: 142
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 131,
                y: 133,
                w: 279,
                h: 142
            },
            sourceSize: {
                w: 416,
                h: 416
            }
        },
        "map-statue-top-02.img": {
            frame: {
                x: 3770,
                y: 763,
                w: 279,
                h: 142
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 131,
                y: 133,
                w: 279,
                h: 142
            },
            sourceSize: {
                w: 416,
                h: 416
            }
        },
        "map-stone-03f.img": {
            frame: {
                x: 3770,
                y: 909,
                w: 276,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 6,
                y: 8,
                w: 276,
                h: 272
            },
            sourceSize: {
                w: 288,
                h: 288
            }
        },
        "map-stone-res-02f.img": {
            frame: {
                x: 166,
                y: 3629,
                w: 200,
                h: 200
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 200,
                h: 200
            },
            sourceSize: {
                w: 200,
                h: 200
            }
        }
    }
}]
  , nl = [{
    meta: {
        image: "gradient-0-100.png",
        size: {
            w: 1024,
            h: 1024
        },
        scale: 1
    },
    frames: {
        "map-barrel-res-01.img": {
            frame: {
                x: 2,
                y: 264,
                w: 227,
                h: 218
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 20,
                w: 227,
                h: 218
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-building-club-gradient-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 234,
                h: 258
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 33,
                y: 9,
                w: 234,
                h: 258
            },
            sourceSize: {
                w: 292,
                h: 280
            }
        },
        "map-building-mansion-gradient-01.img": {
            frame: {
                x: 240,
                y: 2,
                w: 234,
                h: 204
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 8,
                w: 234,
                h: 204
            },
            sourceSize: {
                w: 248,
                h: 220
            }
        },
        "map-bush-01.img": {
            frame: {
                x: 770,
                y: 280,
                w: 126,
                h: 130
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 8,
                y: 7,
                w: 126,
                h: 130
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-bush-01cb.img": {
            frame: {
                x: 630,
                y: 2,
                w: 142,
                h: 142
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 142,
                h: 142
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-bush-03.img": {
            frame: {
                x: 478,
                y: 2,
                w: 148,
                h: 152
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 0,
                w: 148,
                h: 152
            },
            sourceSize: {
                w: 152,
                h: 152
            }
        },
        "map-bush-04.img": {
            frame: {
                x: 776,
                y: 146,
                w: 136,
                h: 130
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 9,
                w: 136,
                h: 130
            },
            sourceSize: {
                w: 150,
                h: 150
            }
        },
        "map-bush-04cb.img": {
            frame: {
                x: 630,
                y: 148,
                w: 136,
                h: 130
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 10,
                w: 136,
                h: 130
            },
            sourceSize: {
                w: 150,
                h: 150
            }
        },
        "map-light-01.img": {
            frame: {
                x: 776,
                y: 2,
                w: 140,
                h: 140
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 140,
                h: 140
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-plane-01.img": {
            frame: {
                x: 233,
                y: 264,
                w: 180,
                h: 200
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 38,
                y: 11,
                w: 180,
                h: 200
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-plane-02.img": {
            frame: {
                x: 417,
                y: 210,
                w: 84,
                h: 170
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 86,
                y: 2,
                w: 84,
                h: 170
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        }
    }
}]
  , ml = [{
    meta: {
        image: "halloween-0-100.png",
        size: {
            w: 2048,
            h: 2048
        },
        scale: 1
    },
    frames: {
        "map-airdrop-01h.img": {
            frame: {
                x: 710,
                y: 1e3,
                w: 160,
                h: 160
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 160
            },
            sourceSize: {
                w: 160,
                h: 160
            }
        },
        "map-airdrop-02h.img": {
            frame: {
                x: 710,
                y: 1164,
                w: 160,
                h: 160
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 160
            },
            sourceSize: {
                w: 160,
                h: 160
            }
        },
        "map-bunker-eye-chamber-ceiling-01.img": {
            frame: {
                x: 2,
                y: 1350,
                w: 320,
                h: 544
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 320,
                h: 544
            },
            sourceSize: {
                w: 320,
                h: 544
            }
        },
        "map-bunker-eye-chamber-floor-01a.img": {
            frame: {
                x: 2,
                y: 2,
                w: 704,
                h: 1344
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 32,
                w: 704,
                h: 1344
            },
            sourceSize: {
                w: 704,
                h: 1376
            }
        },
        "map-bunker-eye-chamber-floor-01b.img": {
            frame: {
                x: 326,
                y: 1674,
                w: 192,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 192,
                h: 256
            },
            sourceSize: {
                w: 192,
                h: 256
            }
        },
        "map-bunker-eye-compartment-ceiling-01.img": {
            frame: {
                x: 326,
                y: 1350,
                w: 320,
                h: 320
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 320,
                h: 320
            },
            sourceSize: {
                w: 320,
                h: 320
            }
        },
        "map-bunker-eye-compartment-floor-01.img": {
            frame: {
                x: 710,
                y: 2,
                w: 704,
                h: 704
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 704,
                h: 704
            },
            sourceSize: {
                w: 704,
                h: 704
            }
        },
        "map-bush-06.img": {
            frame: {
                x: 650,
                y: 1350,
                w: 190,
                h: 188
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 2,
                w: 190,
                h: 188
            },
            sourceSize: {
                w: 192,
                h: 192
            }
        },
        "map-bush-07sp.img": {
            frame: {
                x: 152,
                y: 1898,
                w: 135,
                h: 143
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 6,
                y: 0,
                w: 135,
                h: 143
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-bush-res-06.img": {
            frame: {
                x: 1934,
                y: 296,
                w: 50,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 47,
                y: 48,
                w: 50,
                h: 48
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-crate-11h.img": {
            frame: {
                x: 2,
                y: 1898,
                w: 146,
                h: 146
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 146,
                h: 146
            },
            sourceSize: {
                w: 148,
                h: 148
            }
        },
        "map-pumpkin-01.img": {
            frame: {
                x: 866,
                y: 710,
                w: 140,
                h: 140
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 140,
                h: 140
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-pumpkin-02.img": {
            frame: {
                x: 866,
                y: 854,
                w: 140,
                h: 140
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 140,
                h: 140
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-pumpkin-03.img": {
            frame: {
                x: 291,
                y: 1934,
                w: 95,
                h: 97
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 22,
                y: 25,
                w: 95,
                h: 97
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-pumpkin-res-01.img": {
            frame: {
                x: 1010,
                y: 710,
                w: 135,
                h: 132
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 8,
                w: 135,
                h: 132
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-pumpkin-res-03.img": {
            frame: {
                x: 1934,
                y: 210,
                w: 86,
                h: 82
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 9,
                w: 86,
                h: 82
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-tree-04h.img": {
            frame: {
                x: 1934,
                y: 2,
                w: 112,
                h: 112
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 112
            },
            sourceSize: {
                w: 112,
                h: 112
            }
        },
        "map-tree-05.img": {
            frame: {
                x: 1418,
                y: 516,
                w: 490,
                h: 480
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 11,
                y: 17,
                w: 490,
                h: 480
            },
            sourceSize: {
                w: 512,
                h: 512
            }
        },
        "map-tree-07.img": {
            frame: {
                x: 522,
                y: 1674,
                w: 256,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 256
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-tree-08.img": {
            frame: {
                x: 1418,
                y: 2,
                w: 512,
                h: 510
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 512,
                h: 510
            },
            sourceSize: {
                w: 512,
                h: 512
            }
        },
        "map-web-01.img": {
            frame: {
                x: 710,
                y: 710,
                w: 152,
                h: 158
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 152,
                h: 158
            },
            sourceSize: {
                w: 152,
                h: 160
            }
        },
        "part-airdrop-01h.img": {
            frame: {
                x: 1934,
                y: 118,
                w: 88,
                h: 88
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 4,
                y: 4,
                w: 88,
                h: 88
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "part-airdrop-02h.img": {
            frame: {
                x: 390,
                y: 1934,
                w: 80,
                h: 80
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 80
            },
            sourceSize: {
                w: 80,
                h: 80
            }
        }
    }
}]
  , hl = JSON.parse('[{"meta":{"image":"loadout-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"acorn.img":{"frame":{"x":1220,"y":3184,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"ammo-12gauge.img":{"frame":{"x":2158,"y":1172,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-308sub.img":{"frame":{"x":2161,"y":1030,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-45acp.img":{"frame":{"x":2172,"y":879,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-50AE.img":{"frame":{"x":2212,"y":750,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-556mm.img":{"frame":{"x":2327,"y":621,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-762mm.img":{"frame":{"x":2400,"y":492,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-9mm.img":{"frame":{"x":2405,"y":350,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-box.img":{"frame":{"x":1801,"y":2955,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-flare.img":{"frame":{"x":1801,"y":3071,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"audio-off.img":{"frame":{"x":2089,"y":2520,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"audio-on.img":{"frame":{"x":2185,"y":2520,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"baguette.img":{"frame":{"x":2656,"y":670,"w":98,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":98,"h":98},"sourceSize":{"w":128,"h":128}},"bugle-final-blue.img":{"frame":{"x":1812,"y":2700,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-final-red.img":{"frame":{"x":1865,"y":2517,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-blue.img":{"frame":{"x":1237,"y":3029,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-red.img":{"frame":{"x":1237,"y":3304,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bullets.img":{"frame":{"x":2,"y":3657,"w":86,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":86,"h":124},"sourceSize":{"w":128,"h":128}},"campfire.img":{"frame":{"x":2079,"y":623,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"candy-corn.img":{"frame":{"x":322,"y":3542,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"cattle.img":{"frame":{"x":1158,"y":3604,"w":118,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":118,"h":112},"sourceSize":{"w":128,"h":128}},"checked.img":{"frame":{"x":2455,"y":1734,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"chick.img":{"frame":{"x":1916,"y":2818,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"chicken-dinner.img":{"frame":{"x":1501,"y":1854,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"chicken.img":{"frame":{"x":2409,"y":258,"w":106,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":23,"w":106,"h":82},"sourceSize":{"w":128,"h":128}},"close.img":{"frame":{"x":1237,"y":1190,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"cobalt.img":{"frame":{"x":876,"y":2576,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":42,"h":42},"sourceSize":{"w":48,"h":48}},"coconut.img":{"frame":{"x":1992,"y":2720,"w":110,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":110,"h":90},"sourceSize":{"w":128,"h":128}},"cog.img":{"frame":{"x":773,"y":3507,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"copy.img":{"frame":{"x":1748,"y":3602,"w":88,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":16,"w":88,"h":96},"sourceSize":{"w":128,"h":128}},"crab.img":{"frame":{"x":2619,"y":824,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":100,"h":100},"sourceSize":{"w":128,"h":128}},"crosshair.img":{"frame":{"x":1662,"y":3720,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"crown.img":{"frame":{"x":465,"y":3228,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"cupcake.img":{"frame":{"x":338,"y":3412,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"danger.img":{"frame":{"x":1186,"y":3720,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"dc.img":{"frame":{"x":1237,"y":3424,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"donut.img":{"frame":{"x":615,"y":3660,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"dot.img":{"frame":{"x":375,"y":3123,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":32,"h":32},"sourceSize":{"w":36,"h":36}},"down.img":{"frame":{"x":560,"y":3478,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"egg.img":{"frame":{"x":560,"y":3354,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"eggplant.img":{"frame":{"x":2442,"y":737,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"emote-circle-outer.img":{"frame":{"x":767,"y":330,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"emote-medical-healthkit.img":{"frame":{"x":1199,"y":3480,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"emote.img":{"frame":{"x":430,"y":3538,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"eye.img":{"frame":{"x":804,"y":1970,"w":128,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":128,"h":82},"sourceSize":{"w":128,"h":128}},"face-alien.img":{"frame":{"x":2029,"y":236,"w":124,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":125},"sourceSize":{"w":128,"h":128}},"face-angel-treat.img":{"frame":{"x":1509,"y":1669,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"face-angry.img":{"frame":{"x":2144,"y":494,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-bandaged.img":{"frame":{"x":2149,"y":365,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-dab.img":{"frame":{"x":222,"y":1856,"w":144,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":144,"h":98},"sourceSize":{"w":144,"h":144}},"face-disappoint.img":{"frame":{"x":2157,"y":236,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-happy.img":{"frame":{"x":2084,"y":751,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-headshot.img":{"frame":{"x":134,"y":2169,"w":127,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":24,"w":127,"h":88},"sourceSize":{"w":128,"h":128}},"face-heart.img":{"frame":{"x":2199,"y":622,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-imp-trick.img":{"frame":{"x":1373,"y":1988,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-imp.img":{"frame":{"x":134,"y":2261,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":126,"h":124},"sourceSize":{"w":128,"h":128}},"face-joy.img":{"frame":{"x":2272,"y":493,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-monocle.img":{"frame":{"x":2277,"y":364,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-picasso.img":{"frame":{"x":2159,"y":2,"w":122,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":122,"h":124},"sourceSize":{"w":128,"h":128}},"face-poo.img":{"frame":{"x":418,"y":2228,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"face-sad.img":{"frame":{"x":2285,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sob.img":{"frame":{"x":2285,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sunglass.img":{"frame":{"x":2,"y":2905,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-thinking.img":{"frame":{"x":1501,"y":2094,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-upsidedown.img":{"frame":{"x":2,"y":3033,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"fish.img":{"frame":{"x":1097,"y":1942,"w":128,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":128,"h":92},"sourceSize":{"w":128,"h":128}},"flag-albania.img":{"frame":{"x":1633,"y":1801,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-algeria.img":{"frame":{"x":1765,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-argentina.img":{"frame":{"x":1897,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-australia.img":{"frame":{"x":1511,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-austria.img":{"frame":{"x":1366,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-azerbaijan.img":{"frame":{"x":1224,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belarus.img":{"frame":{"x":1765,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belgium.img":{"frame":{"x":1897,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bolivia.img":{"frame":{"x":1511,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":1366,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-brazil.img":{"frame":{"x":1224,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-canada.img":{"frame":{"x":1765,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-chile.img":{"frame":{"x":1897,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-china.img":{"frame":{"x":1511,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-colombia.img":{"frame":{"x":1366,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-croatia.img":{"frame":{"x":1152,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-czech-republic.img":{"frame":{"x":1765,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-denmark.img":{"frame":{"x":1897,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-dominican-republic.img":{"frame":{"x":1511,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ecuador.img":{"frame":{"x":1366,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-egypt.img":{"frame":{"x":1116,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-estonia.img":{"frame":{"x":1765,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-finland.img":{"frame":{"x":1897,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-france.img":{"frame":{"x":1023,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-georgia.img":{"frame":{"x":1023,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-germany.img":{"frame":{"x":1028,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-greece.img":{"frame":{"x":1155,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-guatemala.img":{"frame":{"x":1155,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-honduras.img":{"frame":{"x":1116,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hong-kong.img":{"frame":{"x":1160,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hungary.img":{"frame":{"x":1287,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-india.img":{"frame":{"x":1287,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-indonesia.img":{"frame":{"x":1237,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-israel.img":{"frame":{"x":1248,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-italy.img":{"frame":{"x":1292,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-japan.img":{"frame":{"x":1419,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-kazakhstan.img":{"frame":{"x":1419,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-latvia.img":{"frame":{"x":1366,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lithuania.img":{"frame":{"x":1369,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-malaysia.img":{"frame":{"x":1380,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-mexico.img":{"frame":{"x":1424,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-moldova.img":{"frame":{"x":1551,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-morocco.img":{"frame":{"x":1551,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-netherlands.img":{"frame":{"x":1408,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-new-zealand.img":{"frame":{"x":1498,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-norway.img":{"frame":{"x":1501,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-peru.img":{"frame":{"x":1512,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-philippines.img":{"frame":{"x":1556,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-portugal.img":{"frame":{"x":1683,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-republic-of-poland.img":{"frame":{"x":1511,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-romania.img":{"frame":{"x":1540,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-russia.img":{"frame":{"x":1630,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-serbia.img":{"frame":{"x":1633,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-singapore.img":{"frame":{"x":1644,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-slovakia.img":{"frame":{"x":1688,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-south-korea.img":{"frame":{"x":1815,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-spain.img":{"frame":{"x":1641,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-sweden.img":{"frame":{"x":1643,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-switzerland.img":{"frame":{"x":1672,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-taiwan.img":{"frame":{"x":1762,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-thailand.img":{"frame":{"x":1765,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-trinidad-and-tobago.img":{"frame":{"x":1776,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-turkey.img":{"frame":{"x":1820,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ukraine.img":{"frame":{"x":1908,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-arab-emirates.img":{"frame":{"x":1897,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-kingdom.img":{"frame":{"x":1894,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-states-of-america.img":{"frame":{"x":1804,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-uruguay.img":{"frame":{"x":1775,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-venezuela.img":{"frame":{"x":1907,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-vietnam.img":{"frame":{"x":1773,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flex.img":{"frame":{"x":1328,"y":3149,"w":109,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":109,"h":116},"sourceSize":{"w":128,"h":128}},"forest.img":{"frame":{"x":2159,"y":130,"w":120,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":15,"w":120,"h":98},"sourceSize":{"w":128,"h":128}},"gas.img":{"frame":{"x":1333,"y":2898,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"gg.img":{"frame":{"x":1765,"y":2060,"w":114,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":28,"w":114,"h":72},"sourceSize":{"w":128,"h":128}},"ghost-base.img":{"frame":{"x":1329,"y":3029,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"globe.img":{"frame":{"x":1411,"y":2537,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"gun-awc-01.img":{"frame":{"x":2,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-awc-02.img":{"frame":{"x":51,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-bugle-01.img":{"frame":{"x":762,"y":1549,"w":64,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":89,"w":64,"h":143},"sourceSize":{"w":96,"h":232}},"gun-deagle-01.img":{"frame":{"x":314,"y":2733,"w":40,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":108,"w":40,"h":124},"sourceSize":{"w":56,"h":232}},"gun-dp28-top-01.img":{"frame":{"x":553,"y":1401,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"gun-famas-01.img":{"frame":{"x":646,"y":908,"w":36,"h":166},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":42,"w":36,"h":166},"sourceSize":{"w":48,"h":208}},"gun-garand-01.img":{"frame":{"x":988,"y":2,"w":32,"h":212},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":20,"w":32,"h":212},"sourceSize":{"w":48,"h":232}},"gun-groza-01.img":{"frame":{"x":222,"y":1706,"w":37,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":62,"w":37,"h":146},"sourceSize":{"w":48,"h":208}},"gun-grozas-01.img":{"frame":{"x":605,"y":717,"w":37,"h":189},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":19,"w":37,"h":189},"sourceSize":{"w":48,"h":208}},"gun-long-01.img":{"frame":{"x":692,"y":717,"w":28,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":184},"sourceSize":{"w":28,"h":184}},"gun-m249-bot-01.img":{"frame":{"x":2372,"y":1218,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":40},"sourceSize":{"w":72,"h":40}},"gun-m249-top-01.img":{"frame":{"x":462,"y":508,"w":36,"h":214},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":18,"w":36,"h":214},"sourceSize":{"w":56,"h":232}},"gun-m4a1-01.img":{"frame":{"x":646,"y":717,"w":42,"h":187},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":42,"h":187},"sourceSize":{"w":48,"h":196}},"gun-med-01.img":{"frame":{"x":692,"y":905,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-mp220-01.img":{"frame":{"x":306,"y":1958,"w":38,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":38,"h":128},"sourceSize":{"w":40,"h":128}},"gun-ots38-01.img":{"frame":{"x":1152,"y":162,"w":34,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":132,"w":34,"h":100},"sourceSize":{"w":56,"h":232}},"gun-p30l-01.img":{"frame":{"x":724,"y":717,"w":31,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":112,"w":31,"h":120},"sourceSize":{"w":56,"h":232}},"gun-pkp-bot-01.img":{"frame":{"x":947,"y":2696,"w":76,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":44},"sourceSize":{"w":76,"h":44}},"gun-pkp-top-01.img":{"frame":{"x":500,"y":726,"w":34,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":40,"w":34,"h":192},"sourceSize":{"w":56,"h":232}},"gun-potato-cannon-01.img":{"frame":{"x":796,"y":44,"w":56,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":248},"sourceSize":{"w":56,"h":248}},"gun-potato-smg-01.img":{"frame":{"x":100,"y":726,"w":99,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":38,"w":99,"h":210},"sourceSize":{"w":176,"h":248}},"gun-potato-smg-top-01.img":{"frame":{"x":302,"y":4029,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":64,"h":64},"sourceSize":{"w":80,"h":80}},"gun-qbb97-bot-01.img":{"frame":{"x":830,"y":1664,"w":60,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":28},"sourceSize":{"w":64,"h":32}},"gun-saiga-01.img":{"frame":{"x":943,"y":842,"w":40,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":40,"h":174},"sourceSize":{"w":48,"h":196}},"gun-scarssr-01.img":{"frame":{"x":924,"y":2,"w":60,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":248},"sourceSize":{"w":60,"h":248}},"gun-scorpion-01.img":{"frame":{"x":457,"y":804,"w":39,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":39,"h":198},"sourceSize":{"w":48,"h":208}},"gun-short-01.img":{"frame":{"x":382,"y":592,"w":28,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":96},"sourceSize":{"w":28,"h":96}},"gun-usas-01.img":{"frame":{"x":415,"y":592,"w":41,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":24,"w":41,"h":208},"sourceSize":{"w":56,"h":232}},"gun-vss-01.img":{"frame":{"x":415,"y":804,"w":38,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":38,"h":208},"sourceSize":{"w":48,"h":208}},"hamburger.img":{"frame":{"x":650,"y":2041,"w":128,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":128,"h":104},"sourceSize":{"w":128,"h":128}},"hatchet.img":{"frame":{"x":189,"y":2863,"w":44,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":44,"h":38},"sourceSize":{"w":48,"h":48}},"heart.img":{"frame":{"x":2,"y":3161,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"hide.img":{"frame":{"x":2026,"y":1190,"w":128,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":128,"h":106},"sourceSize":{"w":128,"h":128}},"ice-cream.img":{"frame":{"x":353,"y":3283,"w":66,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":3,"w":66,"h":122},"sourceSize":{"w":128,"h":128}},"indicator.img":{"frame":{"x":1248,"y":398,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"keyboard.img":{"frame":{"x":817,"y":4032,"w":104,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":33,"w":104,"h":62},"sourceSize":{"w":128,"h":128}},"leek.img":{"frame":{"x":2443,"y":608,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"link.img":{"frame":{"x":2029,"y":1058,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loadout-boost.img":{"frame":{"x":1280,"y":3588,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-crosshair.img":{"frame":{"x":1952,"y":776,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loadout-emote.img":{"frame":{"x":2,"y":3785,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loadout-heal.img":{"frame":{"x":1437,"y":3018,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-kill-icon.img":{"frame":{"x":693,"y":3914,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-melee.img":{"frame":{"x":226,"y":3287,"w":123,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":123,"h":121},"sourceSize":{"w":128,"h":128}},"loadout-outfit.img":{"frame":{"x":1176,"y":2305,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loadout-player-icon.img":{"frame":{"x":1973,"y":2490,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"lock.img":{"frame":{"x":762,"y":1696,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"logo-caduceus.img":{"frame":{"x":1633,"y":1933,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-chrysanthemum.img":{"frame":{"x":1905,"y":1586,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-cloud.img":{"frame":{"x":1905,"y":1700,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-conch.img":{"frame":{"x":1765,"y":1718,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-crossing.img":{"frame":{"x":1897,"y":1814,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-egg.img":{"frame":{"x":1765,"y":1832,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hatchet.img":{"frame":{"x":1897,"y":1928,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hydra.img":{"frame":{"x":1501,"y":1980,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-meteor.img":{"frame":{"x":1765,"y":1946,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-storm.img":{"frame":{"x":1633,"y":2047,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-surviv.img":{"frame":{"x":518,"y":1982,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-swine.img":{"frame":{"x":1947,"y":662,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-twins.img":{"frame":{"x":1936,"y":1322,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loot-ammo-box.img":{"frame":{"x":154,"y":2037,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-chest-01.img":{"frame":{"x":643,"y":3167,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-02.img":{"frame":{"x":697,"y":3041,"w":76,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":4,"w":76,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-03.img":{"frame":{"x":1308,"y":3710,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-circle-outer-01.img":{"frame":{"x":370,"y":1836,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-02.img":{"frame":{"x":413,"y":1686,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-03.img":{"frame":{"x":263,"y":1706,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-04.img":{"frame":{"x":946,"y":1372,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":140,"h":133},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-05.img":{"frame":{"x":546,"y":1475,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-06.img":{"frame":{"x":518,"y":1834,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-helmet-01.img":{"frame":{"x":2029,"y":1932,"w":112,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":112,"h":102},"sourceSize":{"w":128,"h":128}},"loot-helmet-02.img":{"frame":{"x":1641,"y":1718,"w":118,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":26,"w":118,"h":76},"sourceSize":{"w":128,"h":128}},"loot-helmet-03.img":{"frame":{"x":1510,"y":4006,"w":112,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":21,"w":112,"h":86},"sourceSize":{"w":128,"h":128}},"loot-medical-bandage.img":{"frame":{"x":1368,"y":2617,"w":106,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":6,"w":106,"h":116},"sourceSize":{"w":128,"h":128}},"loot-medical-healthkit.img":{"frame":{"x":1250,"y":3954,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-heart.img":{"frame":{"x":715,"y":2909,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-pill.img":{"frame":{"x":824,"y":2802,"w":118,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":19,"w":118,"h":90},"sourceSize":{"w":128,"h":128}},"loot-medical-soda.img":{"frame":{"x":130,"y":3415,"w":60,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":9,"w":60,"h":110},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-rugged.img":{"frame":{"x":1136,"y":2300,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-woodland.img":{"frame":{"x":1338,"y":3832,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bonesaw-healer.img":{"frame":{"x":158,"y":1817,"w":60,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":10,"w":60,"h":155},"sourceSize":{"w":168,"h":168}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":136,"y":1321,"w":54,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":81,"y":22,"w":54,"h":155},"sourceSize":{"w":192,"h":192}},"loot-melee-bowie-frontier.img":{"frame":{"x":1372,"y":3954,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-vintage.img":{"frame":{"x":1378,"y":3832,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-crowbar-recon.img":{"frame":{"x":967,"y":1020,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-crowbar-scout.img":{"frame":{"x":987,"y":842,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-fireaxe.img":{"frame":{"x":136,"y":1480,"w":150,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":150,"h":76},"sourceSize":{"w":152,"h":76}},"loot-melee-hook-silver.img":{"frame":{"x":1505,"y":2769,"w":42,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":25,"w":42,"h":78},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-burnished.img":{"frame":{"x":72,"y":550,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-rugged.img":{"frame":{"x":195,"y":989,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-drowned.img":{"frame":{"x":442,"y":1475,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-prismatic.img":{"frame":{"x":1099,"y":1264,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-rugged.img":{"frame":{"x":1228,"y":1402,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":947,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-orchid.img":{"frame":{"x":232,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-rusted.img":{"frame":{"x":2,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana.img":{"frame":{"x":232,"y":550,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-knuckles-heroic.img":{"frame":{"x":955,"y":1310,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-rusted.img":{"frame":{"x":693,"y":4036,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-kukri-sniper.img":{"frame":{"x":329,"y":1110,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-trad.img":{"frame":{"x":1024,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-machete-taiga.img":{"frame":{"x":405,"y":1016,"w":44,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":3,"w":44,"h":164},"sourceSize":{"w":168,"h":168}},"loot-melee-naginata.img":{"frame":{"x":508,"y":2,"w":345,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":14,"w":345,"h":38},"sourceSize":{"w":350,"h":54}},"loot-melee-pan-black-side.img":{"frame":{"x":322,"y":3668,"w":19,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":55,"y":7,"w":19,"h":113},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black.img":{"frame":{"x":839,"y":2896,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":21,"w":118,"h":86},"sourceSize":{"w":128,"h":128}},"loot-melee-sledgehammer.img":{"frame":{"x":2,"y":1977,"w":148,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":58},"sourceSize":{"w":148,"h":58}},"loot-melee-spade-assault.img":{"frame":{"x":194,"y":1321,"w":54,"h":150},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":53,"y":5,"w":54,"h":150},"sourceSize":{"w":160,"h":160}},"loot-melee-stonehammer.img":{"frame":{"x":154,"y":1977,"w":148,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":148,"h":56},"sourceSize":{"w":148,"h":60}},"loot-melee-warhammer-tank.img":{"frame":{"x":508,"y":330,"w":255,"h":131},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":255,"h":131},"sourceSize":{"w":264,"h":152}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":252,"y":1422,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-melee-woodaxe.img":{"frame":{"x":290,"y":1480,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-pack-00.img":{"frame":{"x":901,"y":2986,"w":90,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":90,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-01.img":{"frame":{"x":1407,"y":2737,"w":94,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":6,"w":94,"h":116},"sourceSize":{"w":128,"h":128}},"loot-pack-02.img":{"frame":{"x":1418,"y":3954,"w":88,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":5,"w":88,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-03.img":{"frame":{"x":1920,"y":2372,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-aoe-heal.img":{"frame":{"x":265,"y":2248,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-45.img":{"frame":{"x":662,"y":3291,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-9mm.img":{"frame":{"x":767,"y":3165,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-assault.img":{"frame":{"x":777,"y":3017,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-broken-arrow.img":{"frame":{"x":2068,"y":1300,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-chambered.img":{"frame":{"x":817,"y":3908,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-endless-ammo.img":{"frame":{"x":2513,"y":843,"w":102,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":15,"w":102,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-explosive.img":{"frame":{"x":2078,"y":2604,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-fabricate.img":{"frame":{"x":825,"y":2622,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-field-medic.img":{"frame":{"x":2104,"y":2038,"w":98,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":98,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-final-bugle.img":{"frame":{"x":1888,"y":2060,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-firepower.img":{"frame":{"x":396,"y":2359,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-flak-jacket.img":{"frame":{"x":2144,"y":2274,"w":102,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":105},"sourceSize":{"w":128,"h":128}},"loot-perk-gotw.img":{"frame":{"x":2,"y":2039,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-halloween-mystery.img":{"frame":{"x":836,"y":3724,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-hotw.img":{"frame":{"x":450,"y":3409,"w":106,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":106,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hunted.img":{"frame":{"x":362,"y":2745,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-inspiration.img":{"frame":{"x":1453,"y":2857,"w":115,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":115,"h":116},"sourceSize":{"w":128,"h":128}},"loot-perk-leadership.img":{"frame":{"x":2,"y":2165,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-martyrdom.img":{"frame":{"x":2237,"y":1778,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-rare-potato.img":{"frame":{"x":362,"y":2871,"w":90,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":3,"w":90,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger.img":{"frame":{"x":2145,"y":1932,"w":108,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":14,"w":108,"h":100},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger_adv.img":{"frame":{"x":876,"y":2498,"w":118,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":27,"w":118,"h":74},"sourceSize":{"w":128,"h":128}},"loot-perk-self-revive.img":{"frame":{"x":1511,"y":1586,"w":126,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":31,"w":126,"h":66},"sourceSize":{"w":128,"h":128}},"loot-perk-small-arms.img":{"frame":{"x":2277,"y":995,"w":107,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":107,"h":111},"sourceSize":{"w":128,"h":128}},"loot-perk-splinter.img":{"frame":{"x":2,"y":3913,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-steelskin.img":{"frame":{"x":1134,"y":3184,"w":82,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":5,"w":82,"h":117},"sourceSize":{"w":128,"h":128}},"loot-perk-takedown.img":{"frame":{"x":2338,"y":1644,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-targeting.img":{"frame":{"x":122,"y":3913,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-12g.img":{"frame":{"x":773,"y":3399,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-556.img":{"frame":{"x":786,"y":3273,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-762.img":{"frame":{"x":891,"y":3125,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-9mm.img":{"frame":{"x":863,"y":3507,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-super.img":{"frame":{"x":264,"y":2379,"w":126,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":19,"w":126,"h":90},"sourceSize":{"w":128,"h":128}},"loot-perk-tree-climbing.img":{"frame":{"x":1626,"y":3945,"w":94,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":94,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-chatty.img":{"frame":{"x":2288,"y":866,"w":110,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":110,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-drain.img":{"frame":{"x":946,"y":2744,"w":118,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":22,"w":118,"h":83},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-m9.img":{"frame":{"x":863,"y":3615,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-nothing.img":{"frame":{"x":2357,"y":1516,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-size.img":{"frame":{"x":2367,"y":1374,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-turkey_shoot.img":{"frame":{"x":2251,"y":1532,"w":102,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":102,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-windwalk.img":{"frame":{"x":1109,"y":3481,"w":86,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":86,"h":119},"sourceSize":{"w":128,"h":128}},"loot-scope-00.img":{"frame":{"x":936,"y":1974,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-01.img":{"frame":{"x":782,"y":2056,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-02.img":{"frame":{"x":1068,"y":2038,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-03.img":{"frame":{"x":914,"y":2106,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-04.img":{"frame":{"x":348,"y":1984,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-shirt-01.img":{"frame":{"x":1296,"y":2305,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitBase.img":{"frame":{"x":1321,"y":3424,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCamo.img":{"frame":{"x":1329,"y":3269,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":1441,"y":3138,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":1557,"y":2977,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":1400,"y":3540,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":1441,"y":3385,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":1449,"y":3254,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDev.img":{"frame":{"x":1561,"y":3093,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitHeaven.img":{"frame":{"x":1408,"y":3656,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":1520,"y":3501,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitLumber.img":{"frame":{"x":1561,"y":3370,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitMod.img":{"frame":{"x":1569,"y":3209,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParma.img":{"frame":{"x":1424,"y":3772,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":1528,"y":3617,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRed.img":{"frame":{"x":1640,"y":3486,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":1681,"y":3325,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":1411,"y":2421,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitTurkey.img":{"frame":{"x":1416,"y":2248,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWheat.img":{"frame":{"x":1478,"y":2537,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWhite.img":{"frame":{"x":1531,"y":2364,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWoodland.img":{"frame":{"x":1536,"y":2224,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag-egg.img":{"frame":{"x":2467,"y":1218,"w":94,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":11,"w":94,"h":106},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag.img":{"frame":{"x":2610,"y":943,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"loot-throwable-mirv.img":{"frame":{"x":1992,"y":2604,"w":82,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":8,"w":82,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-potato.img":{"frame":{"x":600,"y":2680,"w":92,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":12,"w":92,"h":104},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke-egg.img":{"frame":{"x":1979,"y":2178,"w":82,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":82,"h":114},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke.img":{"frame":{"x":375,"y":2997,"w":84,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":84,"h":122},"sourceSize":{"w":128,"h":128}},"loot-throwable-snowball.img":{"frame":{"x":2,"y":2811,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"loot-throwable-strobe.img":{"frame":{"x":376,"y":3794,"w":104,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":23,"w":104,"h":89},"sourceSize":{"w":128,"h":128}},"loot-weapon-ak.img":{"frame":{"x":897,"y":3381,"w":102,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":102,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-an94.img":{"frame":{"x":130,"y":3785,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-awc.img":{"frame":{"x":456,"y":2871,"w":122,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":122,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-bar.img":{"frame":{"x":120,"y":2389,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-blr.img":{"frame":{"x":1505,"y":2653,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-bugle.img":{"frame":{"x":463,"y":2996,"w":122,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":7,"w":122,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45-dual.img":{"frame":{"x":250,"y":2473,"w":120,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":120,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45.img":{"frame":{"x":910,"y":3233,"w":96,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":4,"w":96,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle-dual.img":{"frame":{"x":480,"y":2096,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle.img":{"frame":{"x":1996,"y":2042,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-dp28.img":{"frame":{"x":2,"y":2421,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-famas.img":{"frame":{"x":961,"y":2831,"w":112,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":112,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-fists.img":{"frame":{"x":2250,"y":2262,"w":74,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":74,"h":79},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":1643,"y":134,"w":110,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":110,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun.img":{"frame":{"x":1598,"y":2480,"w":82,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":82,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-garand.img":{"frame":{"x":1510,"y":3888,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":112,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock-dual.img":{"frame":{"x":465,"y":3114,"w":122,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":122,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock.img":{"frame":{"x":222,"y":3542,"w":90,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":9,"w":90,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-groza.img":{"frame":{"x":2347,"y":1754,"w":104,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":14,"w":104,"h":100},"sourceSize":{"w":128,"h":128}},"loot-weapon-grozas.img":{"frame":{"x":120,"y":2515,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-hk416.img":{"frame":{"x":1127,"y":3357,"w":106,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":106,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-l86.img":{"frame":{"x":941,"y":3848,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1014.img":{"frame":{"x":2,"y":2551,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1100.img":{"frame":{"x":1063,"y":3753,"w":119,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":119,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911-dual.img":{"frame":{"x":612,"y":2149,"w":128,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":128,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911.img":{"frame":{"x":948,"y":3723,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":4,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1a1.img":{"frame":{"x":204,"y":3657,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-m249.img":{"frame":{"x":523,"y":3228,"w":116,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":116,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m39.img":{"frame":{"x":488,"y":2663,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m4a1.img":{"frame":{"x":678,"y":2310,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m870.img":{"frame":{"x":947,"y":2576,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-cursed.img":{"frame":{"x":941,"y":3972,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-dual.img":{"frame":{"x":744,"y":2188,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9.img":{"frame":{"x":1068,"y":2696,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r-dual.img":{"frame":{"x":286,"y":2116,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r.img":{"frame":{"x":1643,"y":266,"w":100,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":100,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-mac10.img":{"frame":{"x":2448,"y":1626,"w":103,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":103,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-mk12.img":{"frame":{"x":582,"y":2789,"w":114,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":114,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-mkg45.img":{"frame":{"x":2029,"y":365,"w":116,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-model94.img":{"frame":{"x":998,"y":2430,"w":118,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":109},"sourceSize":{"w":128,"h":128}},"loot-weapon-mosin.img":{"frame":{"x":1069,"y":2543,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp220.img":{"frame":{"x":1544,"y":3733,"w":114,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":114,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp5.img":{"frame":{"x":1648,"y":3602,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38-dual.img":{"frame":{"x":526,"y":2403,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38.img":{"frame":{"x":2029,"y":1814,"w":90,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":7,"w":90,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38-dual.img":{"frame":{"x":1643,"y":398,"w":105,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":105,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38.img":{"frame":{"x":1043,"y":3972,"w":81,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":4,"w":81,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l-dual.img":{"frame":{"x":248,"y":3785,"w":124,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":124,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l.img":{"frame":{"x":2123,"y":1704,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-pkp.img":{"frame":{"x":250,"y":3901,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-cannon.img":{"frame":{"x":589,"y":2915,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-smg.img":{"frame":{"x":2029,"y":494,"w":111,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":111,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-qbb97.img":{"frame":{"x":987,"y":3505,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-saiga.img":{"frame":{"x":368,"y":3901,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scar.img":{"frame":{"x":1651,"y":2340,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scarssr.img":{"frame":{"x":130,"y":2905,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-scorpion.img":{"frame":{"x":130,"y":3031,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scout.img":{"frame":{"x":1136,"y":2422,"w":118,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-spas12.img":{"frame":{"x":2037,"y":1586,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-sv98.img":{"frame":{"x":700,"y":2680,"w":121,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":121,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-svd.img":{"frame":{"x":374,"y":2485,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ump9.img":{"frame":{"x":995,"y":2953,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-usas.img":{"frame":{"x":751,"y":2498,"w":121,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":121,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector.img":{"frame":{"x":2137,"y":1549,"w":110,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":110,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector45.img":{"frame":{"x":1077,"y":2818,"w":104,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":5,"w":104,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-vss.img":{"frame":{"x":246,"y":2603,"w":108,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":108,"h":126},"sourceSize":{"w":128,"h":128}},"loot-xp-bone-01.img":{"frame":{"x":2156,"y":1416,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-xp-book-01.img":{"frame":{"x":1168,"y":2663,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-02.img":{"frame":{"x":1191,"y":2536,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-03.img":{"frame":{"x":1015,"y":3075,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-04.img":{"frame":{"x":1113,"y":2940,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-05.img":{"frame":{"x":1185,"y":2785,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-06.img":{"frame":{"x":1268,"y":2658,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-compass-01.img":{"frame":{"x":1695,"y":3821,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":96,"h":96},"sourceSize":{"w":128,"h":128}},"loot-xp-donut-01.img":{"frame":{"x":2328,"y":737,"w":110,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":110,"h":110},"sourceSize":{"w":128,"h":128}},"loot-xp-glasses-01.img":{"frame":{"x":2467,"y":1484,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"loot-xp-stump-01.img":{"frame":{"x":1115,"y":3062,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"mag-glass.img":{"frame":{"x":1216,"y":3832,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"minimize.img":{"frame":{"x":1801,"y":3320,"w":95,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":95,"h":95},"sourceSize":{"w":128,"h":128}},"mobile-gas.img":{"frame":{"x":1072,"y":1647,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":13}},"movement.img":{"frame":{"x":2181,"y":2154,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"news.img":{"frame":{"x":2123,"y":1820,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"ok.img":{"frame":{"x":1128,"y":3876,"w":84,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":5,"w":84,"h":118},"sourceSize":{"w":128,"h":128}},"pad.img":{"frame":{"x":203,"y":726,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":208},"sourceSize":{"w":208,"h":208}},"part-airdrop-01.img":{"frame":{"x":1763,"y":3702,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-01x.img":{"frame":{"x":1760,"y":3441,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-02.img":{"frame":{"x":2,"y":1157,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-02x.img":{"frame":{"x":457,"y":1006,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-03.img":{"frame":{"x":2,"y":1653,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"part-airdrop-04.img":{"frame":{"x":1683,"y":530,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"part-aura-circle-01.img":{"frame":{"x":508,"y":44,"w":284,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":284,"h":282},"sourceSize":{"w":288,"h":288}},"part-blossom-01.img":{"frame":{"x":2358,"y":1262,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"part-blossom-02.img":{"frame":{"x":2229,"y":1665,"w":105,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":105,"h":109},"sourceSize":{"w":128,"h":128}},"part-blossom-03.img":{"frame":{"x":1689,"y":3204,"w":115,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":115,"h":112},"sourceSize":{"w":128,"h":128}},"part-blossom-04.img":{"frame":{"x":1797,"y":2838,"w":115,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":115,"h":113},"sourceSize":{"w":128,"h":128}},"part-book-01.img":{"frame":{"x":1008,"y":984,"w":104,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":3,"w":104,"h":138},"sourceSize":{"w":144,"h":144}},"part-boost-basic.img":{"frame":{"x":1213,"y":2907,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-naturalize.img":{"frame":{"x":130,"y":3287,"w":92,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":2,"w":92,"h":124},"sourceSize":{"w":128,"h":128}},"part-boost-shuriken.img":{"frame":{"x":1656,"y":2161,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"part-boost-star.img":{"frame":{"x":1285,"y":2780,"w":118,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":118,"h":114},"sourceSize":{"w":128,"h":128}},"part-cloth-01.img":{"frame":{"x":2308,"y":1992,"w":70,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":72},"sourceSize":{"w":72,"h":72}},"part-feather-01.img":{"frame":{"x":1003,"y":3357,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-feather-02.img":{"frame":{"x":1010,"y":3233,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-flare-01.img":{"frame":{"x":2199,"y":2383,"w":92,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":92,"h":92},"sourceSize":{"w":100,"h":100}},"part-frag-burst-01.img":{"frame":{"x":1840,"y":3611,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-02.img":{"frame":{"x":1860,"y":3419,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-03.img":{"frame":{"x":460,"y":726,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"part-frag-lever-01.img":{"frame":{"x":591,"y":3167,"w":48,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":44,"w":48,"h":40},"sourceSize":{"w":128,"h":128}},"part-frag-pin-01.img":{"frame":{"x":418,"y":2116,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"part-heal-basic.img":{"frame":{"x":1572,"y":2769,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-heart.img":{"frame":{"x":1625,"y":2600,"w":116,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":116,"h":114},"sourceSize":{"w":128,"h":128}},"part-heal-moon.img":{"frame":{"x":1684,"y":2460,"w":112,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":112,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-tomoe.img":{"frame":{"x":591,"y":3041,"w":102,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":102,"h":122},"sourceSize":{"w":128,"h":128}},"part-leaf-01.img":{"frame":{"x":600,"y":2570,"w":122,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":122,"h":106},"sourceSize":{"w":128,"h":128}},"part-leaf-01sv.img":{"frame":{"x":2372,"y":1110,"w":108,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":12,"w":108,"h":104},"sourceSize":{"w":128,"h":128}},"part-leaf-02.img":{"frame":{"x":2388,"y":974,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":108,"h":108},"sourceSize":{"w":128,"h":128}},"part-leaf-03.img":{"frame":{"x":1759,"y":2277,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-04.img":{"frame":{"x":1677,"y":2889,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-05.img":{"frame":{"x":1692,"y":2718,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-06.img":{"frame":{"x":1745,"y":2580,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-log-01.img":{"frame":{"x":210,"y":3159,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"part-note-01.img":{"frame":{"x":101,"y":2775,"w":84,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":84,"h":126},"sourceSize":{"w":128,"h":128}},"part-note-02.img":{"frame":{"x":1023,"y":307,"w":88,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":88,"h":128},"sourceSize":{"w":128,"h":128}},"part-panel-01.img":{"frame":{"x":800,"y":1374,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plank-01.img":{"frame":{"x":809,"y":1226,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plate-01.img":{"frame":{"x":814,"y":1834,"w":138,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":138,"h":132},"sourceSize":{"w":144,"h":144}},"part-pot-01.img":{"frame":{"x":974,"y":1509,"w":94,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":4,"w":94,"h":136},"sourceSize":{"w":144,"h":144}},"part-potato-01.img":{"frame":{"x":1900,"y":3286,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-potato-02.img":{"frame":{"x":1060,"y":3629,"w":94,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":94,"h":120},"sourceSize":{"w":128,"h":128}},"part-pulse-01.img":{"frame":{"x":1902,"y":3187,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-pumpkin-01.img":{"frame":{"x":2484,"y":1086,"w":106,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":106,"h":94},"sourceSize":{"w":128,"h":128}},"part-shell-01.img":{"frame":{"x":1348,"y":1402,"w":56,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":133},"sourceSize":{"w":56,"h":133}},"part-shell-02.img":{"frame":{"x":538,"y":717,"w":63,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":190},"sourceSize":{"w":63,"h":190}},"part-shell-03.img":{"frame":{"x":724,"y":842,"w":63,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":180},"sourceSize":{"w":63,"h":180}},"part-shell-04.img":{"frame":{"x":2,"y":989,"w":55,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":55,"h":164},"sourceSize":{"w":55,"h":164}},"part-shell-05.img":{"frame":{"x":857,"y":2,"w":63,"h":260},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":260},"sourceSize":{"w":63,"h":260}},"part-smoke-01.img":{"frame":{"x":2382,"y":1934,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"part-smoke-02.img":{"frame":{"x":508,"y":465,"w":254,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":254,"h":248},"sourceSize":{"w":256,"h":256}},"part-smoke-03.img":{"frame":{"x":766,"y":588,"w":253,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":253,"h":250},"sourceSize":{"w":256,"h":256}},"part-snow-01.img":{"frame":{"x":2435,"y":1858,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-spark-01.img":{"frame":{"x":1800,"y":2397,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-spark-02.img":{"frame":{"x":1681,"y":3009,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-splat-01.img":{"frame":{"x":2029,"y":2,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":126,"h":124},"sourceSize":{"w":144,"h":144}},"part-splat-02.img":{"frame":{"x":1373,"y":1854,"w":124,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":8,"w":124,"h":130},"sourceSize":{"w":144,"h":144}},"part-splat-03.img":{"frame":{"x":338,"y":3159,"w":123,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":6,"w":123,"h":120},"sourceSize":{"w":144,"h":144}},"part-strobe-01.img":{"frame":{"x":1724,"y":3921,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-takedown-01.img":{"frame":{"x":2029,"y":130,"w":126,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":13,"w":126,"h":102},"sourceSize":{"w":128,"h":128}},"part-wedge-01.img":{"frame":{"x":100,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"part-woodchip-01.img":{"frame":{"x":822,"y":1022,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"pass.img":{"frame":{"x":1200,"y":2045,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"pilgrim-hat.img":{"frame":{"x":2285,"y":258,"w":120,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":120,"h":88},"sourceSize":{"w":128,"h":128}},"pineapple.img":{"frame":{"x":1920,"y":2635,"w":68,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":68,"h":112},"sourceSize":{"w":128,"h":128}},"ping-border.img":{"frame":{"x":398,"y":1538,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"ping-indicator.img":{"frame":{"x":1023,"y":439,"w":88,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":60,"w":88,"h":68},"sourceSize":{"w":128,"h":128}},"ping-map-airdrop.img":{"frame":{"x":2037,"y":1704,"w":74,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":10,"w":74,"h":106},"sourceSize":{"w":128,"h":128}},"ping-map-airstrike.img":{"frame":{"x":166,"y":1706,"w":44,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":13,"w":44,"h":103},"sourceSize":{"w":128,"h":128}},"ping-map-coming.img":{"frame":{"x":1643,"y":2,"w":112,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":128},"sourceSize":{"w":128,"h":256}},"ping-map-danger.img":{"frame":{"x":1284,"y":266,"w":40,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":40,"h":128},"sourceSize":{"w":128,"h":128}},"ping-map-help.img":{"frame":{"x":2552,"y":718,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":502,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":502,"h":502},"sourceSize":{"w":512,"h":512}},"ping-map-unlock.img":{"frame":{"x":1063,"y":3876,"w":60,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":25,"w":60,"h":78},"sourceSize":{"w":128,"h":128}},"ping-map-woods-king.img":{"frame":{"x":1572,"y":2889,"w":92,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":22,"w":92,"h":84},"sourceSize":{"w":128,"h":128}},"ping-part-circle-auto-highlight.img":{"frame":{"x":998,"y":2543,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":29,"h":29},"sourceSize":{"w":29,"h":29}},"ping-part-circle-auto-outer.img":{"frame":{"x":373,"y":1110,"w":28,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":28,"h":26},"sourceSize":{"w":28,"h":28}},"ping-part-circle-auto.img":{"frame":{"x":2367,"y":1484,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":28},"sourceSize":{"w":28,"h":28}},"ping-part-circle-highlight.img":{"frame":{"x":894,"y":1664,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle.img":{"frame":{"x":373,"y":1140,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-eighth-highlight.img":{"frame":{"x":1865,"y":2635,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-eighth.img":{"frame":{"x":1321,"y":3540,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-quarter-highlight.img":{"frame":{"x":1375,"y":1669,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-part-quarter.img":{"frame":{"x":1024,"y":162,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-team-airdrop.img":{"frame":{"x":1046,"y":2170,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airstrike.img":{"frame":{"x":876,"y":2238,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-coming.img":{"frame":{"x":1330,"y":2118,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-danger.img":{"frame":{"x":1176,"y":2175,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-help.img":{"frame":{"x":1006,"y":2300,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-unlock.img":{"frame":{"x":548,"y":2273,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"player-armor-base-01.img":{"frame":{"x":555,"y":1253,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-base-01.img":{"frame":{"x":1072,"y":1509,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-02.img":{"frame":{"x":1090,"y":1310,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitDC.img":{"frame":{"x":1099,"y":1126,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitHeaven.img":{"frame":{"x":1097,"y":1804,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitLumber.img":{"frame":{"x":1099,"y":1647,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitParmaPrestige.img":{"frame":{"x":1210,"y":1448,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitSpetsnaz.img":{"frame":{"x":1228,"y":1264,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitTurkey.img":{"frame":{"x":1235,"y":1785,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitWheat.img":{"frame":{"x":1237,"y":1586,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-bullet-trail-02.img":{"frame":{"x":1008,"y":1126,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"player-bullet-trail-03.img":{"frame":{"x":1028,"y":926,"w":35,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":35,"h":54},"sourceSize":{"w":36,"h":56}},"player-circle-base-01.img":{"frame":{"x":674,"y":1078,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-circle-base-02.img":{"frame":{"x":666,"y":1771,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-emote.img":{"frame":{"x":2028,"y":2296,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-feet-01.img":{"frame":{"x":777,"y":3125,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-feet-02.img":{"frame":{"x":72,"y":670,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-gui.img":{"frame":{"x":2065,"y":2160,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-hands-01.img":{"frame":{"x":2308,"y":2068,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-hands-02.img":{"frame":{"x":2359,"y":1858,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-helmet-bugler.img":{"frame":{"x":116,"y":2645,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-forest.img":{"frame":{"x":791,"y":842,"w":148,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":176},"sourceSize":{"w":176,"h":176}},"player-helmet-grenadier.img":{"frame":{"x":2,"y":2681,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-01.img":{"frame":{"x":956,"y":1834,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-02.img":{"frame":{"x":958,"y":1664,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-leader.img":{"frame":{"x":798,"y":2368,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-lieutenant.img":{"frame":{"x":897,"y":2368,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-marksman.img":{"frame":{"x":652,"y":2440,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-medic.img":{"frame":{"x":488,"y":2533,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-moon.img":{"frame":{"x":561,"y":1623,"w":117,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":16,"w":117,"h":144},"sourceSize":{"w":176,"h":176}},"player-helmet-potato.img":{"frame":{"x":358,"y":2615,"w":97,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":97,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-recon.img":{"frame":{"x":215,"y":2733,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-king-woods.img":{"frame":{"x":814,"y":1696,"w":140,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":140,"h":134},"sourceSize":{"w":148,"h":148}},"player-map-downed.img":{"frame":{"x":1424,"y":3888,"w":72,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":72,"h":62},"sourceSize":{"w":72,"h":72}},"player-map-inner.img":{"frame":{"x":1888,"y":2178,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-map-outer.img":{"frame":{"x":662,"y":3399,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-mash-01.img":{"frame":{"x":988,"y":218,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-mash-02.img":{"frame":{"x":404,"y":1391,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-mash-03.img":{"frame":{"x":373,"y":1184,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-medic.img":{"frame":{"x":712,"y":3784,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":120,"h":120},"sourceSize":{"w":148,"h":148}},"player-patch-01.img":{"frame":{"x":1681,"y":3129,"w":116,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":71},"sourceSize":{"w":160,"h":160}},"player-patch-02.img":{"frame":{"x":1116,"y":1058,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-blue.img":{"frame":{"x":856,"y":266,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":50,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-red.img":{"frame":{"x":1258,"y":2421,"w":116,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":44,"w":116,"h":72},"sourceSize":{"w":160,"h":160}},"player-ripple-01.img":{"frame":{"x":955,"y":1166,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":140,"h":140},"sourceSize":{"w":142,"h":142}},"player-snow-01.img":{"frame":{"x":218,"y":592,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-snow-02.img":{"frame":{"x":525,"y":1169,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-snow-03.img":{"frame":{"x":499,"y":1091,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-star.img":{"frame":{"x":252,"y":1276,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"player-the-hunted.img":{"frame":{"x":830,"y":1520,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"player-visor-assault.img":{"frame":{"x":2477,"y":1328,"w":102,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":68,"y":36,"w":102,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-demo.img":{"frame":{"x":1626,"y":3843,"w":65,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":39,"w":65,"h":98},"sourceSize":{"w":176,"h":176}},"player-visor-healer.img":{"frame":{"x":2565,"y":1184,"w":63,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":95,"y":36,"w":63,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-scout.img":{"frame":{"x":130,"y":3159,"w":76,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":77,"y":26,"w":76,"h":124},"sourceSize":{"w":176,"h":176}},"player-visor-sniper.img":{"frame":{"x":2262,"y":1404,"w":101,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":34,"w":101,"h":108},"sourceSize":{"w":176,"h":176}},"player-visor-tank.img":{"frame":{"x":2185,"y":1288,"w":71,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":32,"w":71,"h":112},"sourceSize":{"w":176,"h":176}},"player-wading-01.img":{"frame":{"x":232,"y":938,"w":169,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":169,"h":168},"sourceSize":{"w":172,"h":172}},"police.img":{"frame":{"x":258,"y":2863,"w":100,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":2,"w":100,"h":123},"sourceSize":{"w":128,"h":128}},"potato.img":{"frame":{"x":2553,"y":570,"w":100,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":16,"w":100,"h":96},"sourceSize":{"w":128,"h":128}},"proj-bomb-iron-01.img":{"frame":{"x":2,"y":550,"w":66,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":1,"w":66,"h":158},"sourceSize":{"w":160,"h":160}},"proj-frag-nopin-01.img":{"frame":{"x":485,"y":3794,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-02.img":{"frame":{"x":502,"y":3664,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":556,"y":3535,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":485,"y":3919,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-01.img":{"frame":{"x":579,"y":3919,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-02.img":{"frame":{"x":598,"y":3789,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-part.img":{"frame":{"x":561,"y":1771,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"proj-martyrdom-01.img":{"frame":{"x":247,"y":3031,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"proj-mirv-mini-01.img":{"frame":{"x":488,"y":2789,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-mini-02.img":{"frame":{"x":1408,"y":1454,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-nopin-nolever.img":{"frame":{"x":682,"y":1623,"w":76,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":76,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-nopin.img":{"frame":{"x":694,"y":1401,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-pin.img":{"frame":{"x":703,"y":1226,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-potato-01.img":{"frame":{"x":2260,"y":1288,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-potato-02.img":{"frame":{"x":2274,"y":1146,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-smoke-nopin-nolever.img":{"frame":{"x":318,"y":1538,"w":76,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":7,"w":76,"h":146},"sourceSize":{"w":160,"h":160}},"proj-smoke-nopin.img":{"frame":{"x":1068,"y":2,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-smoke-pin.img":{"frame":{"x":2,"y":1817,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-snowball-01.img":{"frame":{"x":2500,"y":946,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-02.img":{"frame":{"x":2089,"y":2410,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-strobe-armed.img":{"frame":{"x":1235,"y":1923,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-arming.img":{"frame":{"x":666,"y":1919,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-unarmed.img":{"frame":{"x":404,"y":1262,"w":147,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":25,"w":147,"h":125},"sourceSize":{"w":160,"h":160}},"proj-wedge-01.img":{"frame":{"x":159,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"pumpkin-play.img":{"frame":{"x":2477,"y":1436,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"pumpkin.img":{"frame":{"x":1776,"y":2136,"w":108,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":108,"h":114},"sourceSize":{"w":128,"h":128}},"question.img":{"frame":{"x":2594,"y":1056,"w":68,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":13,"w":68,"h":102},"sourceSize":{"w":128,"h":128}},"quit.img":{"frame":{"x":987,"y":3629,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":28,"w":68,"h":72},"sourceSize":{"w":128,"h":128}},"rainbow.img":{"frame":{"x":650,"y":3478,"w":119,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":119,"h":120},"sourceSize":{"w":128,"h":128}},"reload.img":{"frame":{"x":92,"y":3657,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"resume.img":{"frame":{"x":694,"y":1549,"w":64,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":31,"w":64,"h":66},"sourceSize":{"w":128,"h":128}},"ribbon-blue.img":{"frame":{"x":2206,"y":2036,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"ribbon-red.img":{"frame":{"x":2257,"y":1884,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"role-assault.img":{"frame":{"x":500,"y":922,"w":130,"h":165},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":165},"sourceSize":{"w":176,"h":176}},"role-demo.img":{"frame":{"x":61,"y":989,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-healer.img":{"frame":{"x":195,"y":1110,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-scout.img":{"frame":{"x":61,"y":1155,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-sniper.img":{"frame":{"x":2,"y":1321,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-tank.img":{"frame":{"x":2,"y":1487,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"salt.img":{"frame":{"x":2,"y":3287,"w":124,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":124,"h":118},"sourceSize":{"w":128,"h":128}},"santa-hat.img":{"frame":{"x":2039,"y":1436,"w":113,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":113,"h":109},"sourceSize":{"w":128,"h":128}},"skull-leader.img":{"frame":{"x":1808,"y":3187,"w":90,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":90,"h":95},"sourceSize":{"w":96,"h":96}},"skull-outlined.img":{"frame":{"x":2382,"y":2004,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"skull-team.img":{"frame":{"x":822,"y":1166,"w":48,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":56},"sourceSize":{"w":64,"h":64}},"skull.img":{"frame":{"x":739,"y":3602,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"sleepy.img":{"frame":{"x":2,"y":3409,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":124,"h":116},"sourceSize":{"w":128,"h":128}},"snowflake.img":{"frame":{"x":2,"y":2291,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"snowman.img":{"frame":{"x":423,"y":3283,"w":96,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":3,"w":96,"h":122},"sourceSize":{"w":128,"h":128}},"star-blue.img":{"frame":{"x":1373,"y":1724,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star-red.img":{"frame":{"x":1375,"y":1539,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star.img":{"frame":{"x":166,"y":1560,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"submit.img":{"frame":{"x":1840,"y":3541,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"surviv.img":{"frame":{"x":376,"y":3668,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"tap.img":{"frame":{"x":1879,"y":2254,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"target.img":{"frame":{"x":1291,"y":2497,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"teabag.img":{"frame":{"x":2402,"y":851,"w":107,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":19,"w":107,"h":91},"sourceSize":{"w":128,"h":128}},"thumbs-up.img":{"frame":{"x":2,"y":3529,"w":104,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":104,"h":124},"sourceSize":{"w":128,"h":128}},"timer-background.img":{"frame":{"x":2289,"y":2144,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"timer.img":{"frame":{"x":2040,"y":908,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"tombstone.img":{"frame":{"x":222,"y":3415,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"trash.img":{"frame":{"x":110,"y":3529,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"trunk.img":{"frame":{"x":2516,"y":466,"w":106,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":14,"w":106,"h":100},"sourceSize":{"w":128,"h":128}},"turkey-animal.img":{"frame":{"x":700,"y":2802,"w":120,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":103},"sourceSize":{"w":128,"h":128}},"unlock.img":{"frame":{"x":250,"y":4029,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"whale.img":{"frame":{"x":1128,"y":3998,"w":118,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":118,"h":94},"sourceSize":{"w":128,"h":128}}}}]')
  , ul = JSON.parse('[{"meta":{"image":"main-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":710,"y":3733,"w":401,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":401,"h":314},"sourceSize":{"w":404,"h":316}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":1811,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":3641,"y":2922,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1918,"y":3333,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2841,"y":934,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1662,"y":3871,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2473,"y":1178,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1462,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1439,"y":3609,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1690,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1462,"y":3089,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3863,"y":2307,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":838,"y":1811,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":2456,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":2447,"y":2631,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1701,"y":1178,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1058,"y":3089,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1701,"y":934,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2447,"y":2433,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1439,"y":3871,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3832,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2447,"y":2177,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1701,"y":359,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":777,"y":2589,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3776,"y":804,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":2021,"y":2706,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1255,"y":3089,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":2239,"y":3766,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":3641,"y":3198,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1697,"y":2706,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1501,"y":2706,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1058,"y":3333,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1818,"y":3054,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":3341,"y":1565,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2,"y":3088,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1115,"y":3609,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1643,"y":2046,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1795,"y":3506,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":350,"y":3089,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3155,"y":2307,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2473,"y":1565,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":2379,"y":3506,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-complex-warehouse-floor-01.img":{"frame":{"x":2379,"y":2706,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3061,"y":2433,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2967,"y":2631,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-planter-01.img":{"frame":{"x":1795,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":1943,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-03.img":{"frame":{"x":2091,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-04.img":{"frame":{"x":1462,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":1566,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-01.img":{"frame":{"x":1818,"y":3252,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-tree-07sp.img":{"frame":{"x":2119,"y":3506,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":3125,"y":2819,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}}}}]')
  , cl = [{
    meta: {
        image: "potato-0-100.png",
        size: {
            w: 2048,
            h: 2048
        },
        scale: 1
    },
    frames: {
        "map-building-shilo-ceiling-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 960,
                h: 768
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 960,
                h: 768
            },
            sourceSize: {
                w: 960,
                h: 768
            }
        },
        "map-building-shilo-floor-01.img": {
            frame: {
                x: 966,
                y: 2,
                w: 960,
                h: 768
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 960,
                h: 768
            },
            sourceSize: {
                w: 960,
                h: 768
            }
        },
        "map-egg-01.img": {
            frame: {
                x: 1930,
                y: 2,
                w: 94,
                h: 122
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 1,
                w: 94,
                h: 122
            },
            sourceSize: {
                w: 124,
                h: 124
            }
        },
        "map-egg-02.img": {
            frame: {
                x: 1930,
                y: 128,
                w: 94,
                h: 122
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 1,
                w: 94,
                h: 122
            },
            sourceSize: {
                w: 124,
                h: 124
            }
        },
        "map-egg-03.img": {
            frame: {
                x: 1930,
                y: 254,
                w: 94,
                h: 122
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 1,
                w: 94,
                h: 122
            },
            sourceSize: {
                w: 124,
                h: 124
            }
        },
        "map-egg-04.img": {
            frame: {
                x: 1930,
                y: 380,
                w: 94,
                h: 122
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 1,
                w: 94,
                h: 122
            },
            sourceSize: {
                w: 124,
                h: 124
            }
        },
        "map-egg-res-01.img": {
            frame: {
                x: 1930,
                y: 506,
                w: 92,
                h: 88
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 4,
                y: 6,
                w: 92,
                h: 88
            },
            sourceSize: {
                w: 100,
                h: 100
            }
        },
        "map-potato-01.img": {
            frame: {
                x: 1930,
                y: 685,
                w: 72,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 72,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-potato-02.img": {
            frame: {
                x: 1930,
                y: 759,
                w: 72,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 72,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-potato-03.img": {
            frame: {
                x: 2,
                y: 833,
                w: 72,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 72,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-potato-res-01.img": {
            frame: {
                x: 1930,
                y: 598,
                w: 85,
                h: 83
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 29,
                y: 36,
                w: 85,
                h: 83
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        }
    }
}]
  , dl = [{
    meta: {
        image: "savannah-0-100.png",
        size: {
            w: 2048,
            h: 2048
        },
        scale: 1
    },
    frames: {
        "map-brush-01sv.img": {
            frame: {
                x: 326,
                y: 1373,
                w: 186,
                h: 184
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 4,
                w: 186,
                h: 184
            },
            sourceSize: {
                w: 192,
                h: 192
            }
        },
        "map-brush-02sv.img": {
            frame: {
                x: 369,
                y: 1024,
                w: 182,
                h: 184
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 4,
                w: 182,
                h: 184
            },
            sourceSize: {
                w: 192,
                h: 192
            }
        },
        "map-brush-res-02sv.img": {
            frame: {
                x: 433,
                y: 1967,
                w: 62,
                h: 62
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 17,
                y: 17,
                w: 62,
                h: 62
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-building-perch-ceiling.img": {
            frame: {
                x: 2,
                y: 1024,
                w: 363,
                h: 345
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 14,
                y: 23,
                w: 363,
                h: 345
            },
            sourceSize: {
                w: 400,
                h: 384
            }
        },
        "map-building-perch-floor.img": {
            frame: {
                x: 578,
                y: 418,
                w: 400,
                h: 320
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 400,
                h: 320
            },
            sourceSize: {
                w: 400,
                h: 320
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 26,
                y: 1633,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 190,
                y: 1633,
                w: 160,
                h: 230
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 230
            },
            sourceSize: {
                w: 160,
                h: 230
            }
        },
        "map-bush-01sv.img": {
            frame: {
                x: 206,
                y: 1867,
                w: 140,
                h: 140
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 140,
                h: 140
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-bush-res-01sv.img": {
            frame: {
                x: 206,
                y: 2011,
                w: 44,
                h: 34
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 50,
                y: 55,
                w: 44,
                h: 34
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-complex-warehouse-floor-01.img": {
            frame: {
                x: 2,
                y: 794,
                w: 60,
                h: 224
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 224
            },
            sourceSize: {
                w: 60,
                h: 224
            }
        },
        "map-complex-warehouse-floor-02.img": {
            frame: {
                x: 2,
                y: 2,
                w: 60,
                h: 528
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 528
            },
            sourceSize: {
                w: 60,
                h: 528
            }
        },
        "map-complex-warehouse-floor-03.img": {
            frame: {
                x: 262,
                y: 1373,
                w: 60,
                h: 224
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 60,
                h: 224
            },
            sourceSize: {
                w: 60,
                h: 224
            }
        },
        "map-crate-21.img": {
            frame: {
                x: 369,
                y: 1212,
                w: 144,
                h: 144
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 144
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-perch-res-01.img": {
            frame: {
                x: 26,
                y: 1867,
                w: 176,
                h: 158
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 40,
                y: 49,
                w: 176,
                h: 158
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-propane-01.img": {
            frame: {
                x: 350,
                y: 1867,
                w: 96,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 96,
                h: 96
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-stone-07.img": {
            frame: {
                x: 66,
                y: 514,
                w: 504,
                h: 506
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 4,
                y: 3,
                w: 504,
                h: 506
            },
            sourceSize: {
                w: 512,
                h: 512
            }
        },
        "map-stone-res-07.img": {
            frame: {
                x: 578,
                y: 2,
                w: 410,
                h: 412
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 4,
                w: 410,
                h: 412
            },
            sourceSize: {
                w: 420,
                h: 420
            }
        },
        "map-tree-03sv.img": {
            frame: {
                x: 2,
                y: 1373,
                w: 256,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 256
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-tree-12.img": {
            frame: {
                x: 66,
                y: 2,
                w: 508,
                h: 508
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 508,
                h: 508
            },
            sourceSize: {
                w: 512,
                h: 512
            }
        },
        "map-tree-res-12.img": {
            frame: {
                x: 350,
                y: 1967,
                w: 79,
                h: 71
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 8,
                y: 13,
                w: 79,
                h: 71
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-wall-03-grassy-res.img": {
            frame: {
                x: 2,
                y: 1889,
                w: 20,
                h: 92
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 22,
                y: 2,
                w: 20,
                h: 92
            },
            sourceSize: {
                w: 64,
                h: 96
            }
        },
        "map-wall-03-grassy.img": {
            frame: {
                x: 354,
                y: 1561,
                w: 34,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 15,
                y: 0,
                w: 34,
                h: 96
            },
            sourceSize: {
                w: 64,
                h: 96
            }
        },
        "map-wall-08-grassy-res.img": {
            frame: {
                x: 2,
                y: 1633,
                w: 20,
                h: 252
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 22,
                y: 2,
                w: 20,
                h: 252
            },
            sourceSize: {
                w: 64,
                h: 256
            }
        },
        "map-wall-08-grassy.img": {
            frame: {
                x: 2,
                y: 534,
                w: 45,
                h: 256
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 0,
                w: 45,
                h: 256
            },
            sourceSize: {
                w: 64,
                h: 256
            }
        }
    }
}]
  , pl = JSON.parse('[{"meta":{"image":"shared-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-barrel-03.img":{"frame":{"x":2182,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-04.img":{"frame":{"x":2275,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-res-03.img":{"frame":{"x":2368,"y":4040,"w":76,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":86,"w":76,"h":52},"sourceSize":{"w":144,"h":144}},"map-bathhouse-pool-01.img":{"frame":{"x":1076,"y":3536,"w":38,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":63},"sourceSize":{"w":38,"h":63}},"map-bookshelf-01.img":{"frame":{"x":506,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bookshelf-02.img":{"frame":{"x":734,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bottle-01.img":{"frame":{"x":1269,"y":3590,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-02.img":{"frame":{"x":1357,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-03.img":{"frame":{"x":1393,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-04.img":{"frame":{"x":2638,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-05.img":{"frame":{"x":2674,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-building-bank-floor-01.img":{"frame":{"x":2118,"y":1224,"w":1696,"h":802},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1696,"h":802},"sourceSize":{"w":1696,"h":802}},"map-building-bank-window-res-01.img":{"frame":{"x":3758,"y":3067,"w":44,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":55,"w":44,"h":43},"sourceSize":{"w":144,"h":144}},"map-building-barn-basement-stairs.img":{"frame":{"x":3758,"y":2579,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":1574,"w":1600,"h":1088},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1600,"h":1088},"sourceSize":{"w":1600,"h":1088}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":1606,"y":2030,"w":1432,"h":1592},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1432,"h":1592},"sourceSize":{"w":1432,"h":1592}},"map-building-boarded-window-01.img":{"frame":{"x":3947,"y":1097,"w":44,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":44,"h":113},"sourceSize":{"w":48,"h":128}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":1770,"y":1942,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":74},"sourceSize":{"w":148,"h":76}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":2666,"w":1442,"h":866},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1442,"h":866},"sourceSize":{"w":1442,"h":866}},"map-building-container-ceiling-01.img":{"frame":{"x":3574,"y":2030,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-floor-01.img":{"frame":{"x":3574,"y":2579,"w":180,"h":531},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":531},"sourceSize":{"w":180,"h":536}},"map-building-container-open-floor.img":{"frame":{"x":3818,"y":1224,"w":180,"h":684},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":180,"h":684},"sourceSize":{"w":180,"h":692}},"map-building-dock-floor-01b.img":{"frame":{"x":3818,"y":1912,"w":162,"h":663},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":162,"h":663},"sourceSize":{"w":162,"h":664}},"map-building-hut-floor-02.img":{"frame":{"x":3947,"y":2,"w":130,"h":767},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":130,"h":767},"sourceSize":{"w":136,"h":768}},"map-building-mansion-floor-01b.img":{"frame":{"x":2118,"y":2,"w":1825,"h":1218},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1825,"h":1218},"sourceSize":{"w":1826,"h":1218}},"map-building-mansion-floor-01d.img":{"frame":{"x":2640,"y":3626,"w":1089,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1089,"h":186},"sourceSize":{"w":1090,"h":194}},"map-building-police-ceiling-01.img":{"frame":{"x":3042,"y":3114,"w":1008,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1008,"h":480},"sourceSize":{"w":1008,"h":480}},"map-building-police-ceiling-02.img":{"frame":{"x":3042,"y":2030,"w":528,"h":1080},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":528,"h":1080},"sourceSize":{"w":528,"h":1080}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":2112,"h":1568},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":2112,"h":1568},"sourceSize":{"w":2112,"h":1568}},"map-building-porch-01.img":{"frame":{"x":3574,"y":2507,"w":128,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":64},"sourceSize":{"w":128,"h":64}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":1606,"y":1574,"w":496,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":496,"h":192},"sourceSize":{"w":496,"h":192}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":3626,"w":1394,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":42,"w":1394,"h":384},"sourceSize":{"w":1520,"h":432}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":1400,"y":3626,"w":1236,"h":410},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":27,"w":1236,"h":410},"sourceSize":{"w":1304,"h":464}},"map-bunker-conch-floor-01.img":{"frame":{"x":3328,"y":3816,"w":580,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":580,"h":252},"sourceSize":{"w":600,"h":256}},"map-bunker-vent-01.img":{"frame":{"x":401,"y":3536,"w":82,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":82,"h":84},"sourceSize":{"w":84,"h":84}},"map-bunker-vent-02.img":{"frame":{"x":3912,"y":3960,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-res-01.img":{"frame":{"x":2582,"y":4040,"w":52,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":48,"w":52,"h":48},"sourceSize":{"w":144,"h":144}},"map-bush-res-02.img":{"frame":{"x":1118,"y":3536,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":45,"w":59,"h":60},"sourceSize":{"w":144,"h":144}},"map-bush-res-04.img":{"frame":{"x":1323,"y":3536,"w":48,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":48,"h":46},"sourceSize":{"w":54,"h":54}},"map-candle-01.img":{"frame":{"x":1269,"y":3536,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":50,"h":50},"sourceSize":{"w":52,"h":52}},"map-club-bar-01.img":{"frame":{"x":3758,"y":2030,"w":54,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":480},"sourceSize":{"w":54,"h":480}},"map-column-01.img":{"frame":{"x":972,"y":3536,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-couch-01.img":{"frame":{"x":3758,"y":2967,"w":288,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":96},"sourceSize":{"w":288,"h":96}},"map-couch-res-01.img":{"frame":{"x":317,"y":3536,"w":80,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":80,"h":86},"sourceSize":{"w":96,"h":96}},"map-crate-mil-01.img":{"frame":{"x":3574,"y":2414,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-club-02.img":{"frame":{"x":3912,"y":3598,"w":100,"h":358},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":100,"h":358},"sourceSize":{"w":104,"h":360}},"map-decal-oil-04.img":{"frame":{"x":2524,"y":4040,"w":54,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":54,"h":48},"sourceSize":{"w":64,"h":64}},"map-decal-oil-05.img":{"frame":{"x":1181,"y":3536,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"map-decal-oil-06.img":{"frame":{"x":122,"y":3536,"w":94,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":21,"w":94,"h":86},"sourceSize":{"w":128,"h":128}},"map-deposit-box-01.img":{"frame":{"x":1158,"y":4014,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-deposit-box-02.img":{"frame":{"x":1606,"y":1942,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-door-01.img":{"frame":{"x":1578,"y":3466,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-drawers-res.img":{"frame":{"x":3706,"y":2514,"w":93,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":93,"h":57},"sourceSize":{"w":96,"h":64}},"map-fire-ext-01.img":{"frame":{"x":575,"y":3536,"w":83,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":83,"h":65},"sourceSize":{"w":84,"h":70}},"map-fire-ext-res.img":{"frame":{"x":1219,"y":3536,"w":46,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":8,"w":46,"h":56},"sourceSize":{"w":84,"h":70}},"map-gun-mount-01.img":{"frame":{"x":1322,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-gun-mount-02.img":{"frame":{"x":1618,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-03.img":{"frame":{"x":1750,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-04.img":{"frame":{"x":1922,"y":1942,"w":128,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":56},"sourceSize":{"w":128,"h":56}},"map-gun-mount-05.img":{"frame":{"x":1470,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-locker-01.img":{"frame":{"x":1882,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-02.img":{"frame":{"x":1982,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-03.img":{"frame":{"x":2082,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-piano-01.img":{"frame":{"x":262,"y":4014,"w":240,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":75},"sourceSize":{"w":240,"h":75}},"map-pipes-01.img":{"frame":{"x":1448,"y":3318,"w":90,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":288},"sourceSize":{"w":90,"h":288}},"map-pipes-03.img":{"frame":{"x":2640,"y":3816,"w":684,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":684,"h":236},"sourceSize":{"w":684,"h":236}},"map-pipes-04.img":{"frame":{"x":1448,"y":2666,"w":88,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":352},"sourceSize":{"w":88,"h":352}},"map-pot-res-01.img":{"frame":{"x":662,"y":3536,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":80,"h":80},"sourceSize":{"w":144,"h":144}},"map-potato-res.img":{"frame":{"x":910,"y":3536,"w":58,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":58,"h":68},"sourceSize":{"w":96,"h":96}},"map-power-box-01.img":{"frame":{"x":834,"y":3536,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-recorder-03.img":{"frame":{"x":2054,"y":1942,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-recorder-04.img":{"frame":{"x":746,"y":3536,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-saloon-bar-01.img":{"frame":{"x":1540,"y":2666,"w":54,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":324},"sourceSize":{"w":54,"h":324}},"map-screen-01.img":{"frame":{"x":2,"y":4040,"w":256,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":48},"sourceSize":{"w":256,"h":48}},"map-screen-res-01.img":{"frame":{"x":2,"y":3536,"w":116,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":116,"h":58},"sourceSize":{"w":124,"h":58}},"map-snow-07.img":{"frame":{"x":1606,"y":1770,"w":496,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":12,"w":496,"h":168},"sourceSize":{"w":512,"h":192}},"map-squash-res-01.img":{"frame":{"x":487,"y":3536,"w":84,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":84,"h":82},"sourceSize":{"w":96,"h":96}},"map-switch-01.img":{"frame":{"x":4020,"y":2502,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-switch-02.img":{"frame":{"x":4020,"y":2540,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":32},"sourceSize":{"w":30,"h":34}},"map-switch-03.img":{"frame":{"x":1323,"y":3588,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-towelrack-01.img":{"frame":{"x":962,"y":4014,"w":192,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":192,"h":76},"sourceSize":{"w":192,"h":96}},"map-tree-res-01.img":{"frame":{"x":1375,"y":3536,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vending-res.img":{"frame":{"x":220,"y":3536,"w":93,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":93,"h":82},"sourceSize":{"w":108,"h":94}},"map-wall-01-rounded.img":{"frame":{"x":2710,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-wall-02-5-rounded.img":{"frame":{"x":798,"y":3536,"w":32,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":80},"sourceSize":{"w":32,"h":80}},"map-wall-02-rounded.img":{"frame":{"x":4002,"y":1841,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-02.img":{"frame":{"x":1040,"y":3536,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-04-cobalt.img":{"frame":{"x":3733,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-04-stone.img":{"frame":{"x":3777,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-05-rounded.img":{"frame":{"x":3821,"y":3626,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-06-rounded.img":{"frame":{"x":4052,"y":3873,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-06.img":{"frame":{"x":3860,"y":3598,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-08-rounded.img":{"frame":{"x":3984,"y":2300,"w":32,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":256},"sourceSize":{"w":32,"h":256}},"map-wall-09-rounded.img":{"frame":{"x":1448,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-09.img":{"frame":{"x":1484,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-10-rounded.img":{"frame":{"x":4002,"y":1517,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-10.img":{"frame":{"x":3947,"y":773,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-11-rounded.img":{"frame":{"x":4016,"y":3598,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-11.img":{"frame":{"x":4002,"y":1161,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-12-rounded.img":{"frame":{"x":4054,"y":3097,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-12.img":{"frame":{"x":4054,"y":3485,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-13-rounded.img":{"frame":{"x":4054,"y":2257,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-13.img":{"frame":{"x":4054,"y":2677,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-14-rounded.img":{"frame":{"x":4054,"y":1353,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-14.img":{"frame":{"x":4054,"y":1805,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-18.img":{"frame":{"x":4054,"y":773,"w":32,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":576},"sourceSize":{"w":32,"h":576}},"map-wall-glass-10.img":{"frame":{"x":1540,"y":2994,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-glass-12-2.img":{"frame":{"x":3984,"y":1912,"w":64,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":384},"sourceSize":{"w":64,"h":384}},"map-wall-glass-12.img":{"frame":{"x":4002,"y":773,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-glass-9.img":{"frame":{"x":1542,"y":3318,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-outhouse-bot.img":{"frame":{"x":2,"y":3598,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":24}},"map-wall-outhouse-side.img":{"frame":{"x":4020,"y":2300,"w":24,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":198},"sourceSize":{"w":24,"h":198}},"map-wall-outhouse-top.img":{"frame":{"x":3652,"y":3598,"w":204,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":204,"h":24},"sourceSize":{"w":204,"h":24}},"map-wall-shack-bot.img":{"frame":{"x":3406,"y":3598,"w":242,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":242,"h":24},"sourceSize":{"w":242,"h":24}},"map-wall-shack-left.img":{"frame":{"x":1578,"y":3240,"w":24,"h":222},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":222},"sourceSize":{"w":24,"h":222}},"map-wall-shack-right.img":{"frame":{"x":1578,"y":2994,"w":24,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":242},"sourceSize":{"w":24,"h":242}},"map-wall-shack-top.img":{"frame":{"x":3042,"y":3598,"w":360,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":24},"sourceSize":{"w":360,"h":24}},"map-woodpile-res-01.img":{"frame":{"x":2448,"y":4040,"w":72,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":22,"w":72,"h":52},"sourceSize":{"w":96,"h":96}}}},{"meta":{"image":"shared-1-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bed-01.img":{"frame":{"x":3954,"y":3558,"w":96,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":216},"sourceSize":{"w":96,"h":216}},"map-bed-res-01.img":{"frame":{"x":3990,"y":3778,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-building-bank-ceiling-02.img":{"frame":{"x":3225,"y":2,"w":556,"h":888},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":50,"w":556,"h":888},"sourceSize":{"w":556,"h":940}},"map-building-bank-floor-02.img":{"frame":{"x":3220,"y":894,"w":864,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":448},"sourceSize":{"w":1088,"h":448}},"map-building-bank-window-01.img":{"frame":{"x":2116,"y":602,"w":56,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":104},"sourceSize":{"w":56,"h":104}},"map-building-barn-ceiling-01.img":{"frame":{"x":2,"y":2622,"w":1200,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1200,"h":624},"sourceSize":{"w":1200,"h":624}},"map-building-barn-ceiling-02.img":{"frame":{"x":1714,"y":2430,"w":416,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":144},"sourceSize":{"w":416,"h":144}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":1304,"h":919},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1304,"h":919},"sourceSize":{"w":1304,"h":920}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":3250,"w":1112,"h":728},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":1112,"h":728},"sourceSize":{"w":1112,"h":729}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":1118,"y":3250,"w":1088,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":1088,"h":544},"sourceSize":{"w":1088,"h":576}},"map-building-bridge-lg-floor.img":{"frame":{"x":2210,"y":2,"w":1011,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1011,"h":704},"sourceSize":{"w":1012,"h":708}},"map-building-bridge-md-floor.img":{"frame":{"x":1310,"y":2,"w":896,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":368},"sourceSize":{"w":896,"h":368}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":3174,"y":1594,"w":912,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":576},"sourceSize":{"w":912,"h":576}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":1626,"w":1216,"h":992},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1216,"h":992},"sourceSize":{"w":1216,"h":992}},"map-building-club-ceiling-01b.img":{"frame":{"x":2922,"y":3298,"w":177,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":242},"sourceSize":{"w":178,"h":242}},"map-building-club-floor-01d.img":{"frame":{"x":1530,"y":3798,"w":322,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":322,"h":193},"sourceSize":{"w":322,"h":194}},"map-building-club-floor-01h.img":{"frame":{"x":1856,"y":3798,"w":321,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":321,"h":289},"sourceSize":{"w":322,"h":290}},"map-building-container-ceiling-02.img":{"frame":{"x":3770,"y":3558,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-house-floor-01.img":{"frame":{"x":1310,"y":710,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-floor-02.img":{"frame":{"x":2210,"y":2430,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-window-01.img":{"frame":{"x":3900,"y":1479,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-house-window-res-01.img":{"frame":{"x":4034,"y":1478,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-mansion-ceiling.img":{"frame":{"x":3174,"y":2174,"w":912,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":912,"h":800},"sourceSize":{"w":1024,"h":864}},"map-building-mansion-cellar-01c.img":{"frame":{"x":3604,"y":1346,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":354,"h":129},"sourceSize":{"w":354,"h":130}},"map-building-mansion-floor-01a.img":{"frame":{"x":1310,"y":374,"w":802,"h":317},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":802,"h":317},"sourceSize":{"w":802,"h":322}},"map-building-panicroom-ceiling.img":{"frame":{"x":3785,"y":2,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-panicroom-floor.img":{"frame":{"x":3785,"y":390,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-saferoom-ceiling.img":{"frame":{"x":2210,"y":3298,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-saferoom-floor.img":{"frame":{"x":2566,"y":3298,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-shack-ceiling-03.img":{"frame":{"x":1118,"y":3798,"w":408,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":408,"h":288},"sourceSize":{"w":432,"h":336}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":1206,"y":2622,"w":934,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":934,"h":608},"sourceSize":{"w":960,"h":640}},"map-building-teahouse-floor-01.img":{"frame":{"x":3174,"y":2978,"w":896,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":576},"sourceSize":{"w":896,"h":576}},"map-building-teahouse-floor-02.img":{"frame":{"x":3577,"y":3994,"w":128,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":88},"sourceSize":{"w":128,"h":88}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":2210,"y":3558,"w":832,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":832,"h":432},"sourceSize":{"w":832,"h":432}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":3046,"y":3558,"w":720,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":432},"sourceSize":{"w":720,"h":432}},"map-building-warehouse-floor-01.img":{"frame":{"x":1222,"y":1626,"w":1000,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1000,"h":800},"sourceSize":{"w":1000,"h":800}},"map-building-warehouse-floor-02.img":{"frame":{"x":2226,"y":1594,"w":880,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":880,"h":800},"sourceSize":{"w":880,"h":800}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":3220,"y":1346,"w":380,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":380,"h":180},"sourceSize":{"w":380,"h":180}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":1222,"y":2430,"w":488,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":176},"sourceSize":{"w":488,"h":176}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":2274,"y":710,"w":942,"h":880},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":0,"w":942,"h":880},"sourceSize":{"w":992,"h":880}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":925,"w":1270,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":1270,"h":697},"sourceSize":{"w":1280,"h":704}},"map-case-basement-01.img":{"frame":{"x":2,"y":3982,"w":148,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":112},"sourceSize":{"w":148,"h":112}},"map-case-deagle-01.img":{"frame":{"x":3604,"y":1479,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-deagle-02.img":{"frame":{"x":3752,"y":1479,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-flare-01.img":{"frame":{"x":450,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-hatchet-01.img":{"frame":{"x":594,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-01.img":{"frame":{"x":738,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-02.img":{"frame":{"x":882,"y":3982,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-control-panel-01.img":{"frame":{"x":3785,"y":778,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-02.img":{"frame":{"x":154,"y":3982,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-04.img":{"frame":{"x":3933,"y":778,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-05.img":{"frame":{"x":302,"y":3982,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-06.img":{"frame":{"x":1530,"y":3995,"w":192,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":94},"sourceSize":{"w":192,"h":94}},"map-couch-02.img":{"frame":{"x":2181,"y":3994,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-crate-06.img":{"frame":{"x":3081,"y":3994,"w":164,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":100},"sourceSize":{"w":164,"h":100}},"map-crate-mil-02.img":{"frame":{"x":2377,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-03.img":{"frame":{"x":2553,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-04.img":{"frame":{"x":2729,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-05.img":{"frame":{"x":2905,"y":3994,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-flyer-01.img":{"frame":{"x":1276,"y":1578,"w":36,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":36,"h":44},"sourceSize":{"w":48,"h":48}},"map-door-02.img":{"frame":{"x":2116,"y":374,"w":80,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":224},"sourceSize":{"w":80,"h":224}},"map-door-03.img":{"frame":{"x":1026,"y":3982,"w":32,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":112},"sourceSize":{"w":32,"h":112}},"map-door-04.img":{"frame":{"x":4034,"y":1346,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"map-door-05.img":{"frame":{"x":2181,"y":3798,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-door-slot-01.img":{"frame":{"x":3110,"y":1594,"w":38,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":134},"sourceSize":{"w":38,"h":134}},"map-door-slot-02.img":{"frame":{"x":4054,"y":3558,"w":38,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":136},"sourceSize":{"w":38,"h":136}},"map-drawers-01.img":{"frame":{"x":3249,"y":3994,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-drawers-02.img":{"frame":{"x":3413,"y":3994,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-oven-01.img":{"frame":{"x":1726,"y":3995,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-recorder-01.img":{"frame":{"x":2134,"y":2430,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-saloon-bar-02.img":{"frame":{"x":3110,"y":1996,"w":54,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":92},"sourceSize":{"w":54,"h":92}},"map-toilet-03.img":{"frame":{"x":3103,"y":3298,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-toilet-04.img":{"frame":{"x":3103,"y":3400,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-wall-03-rounded.img":{"frame":{"x":3709,"y":3994,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-03.img":{"frame":{"x":1062,"y":3982,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-04-rounded.img":{"frame":{"x":3110,"y":1732,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-04.img":{"frame":{"x":3110,"y":1864,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-05.img":{"frame":{"x":3954,"y":3778,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-07-rounded.img":{"frame":{"x":3962,"y":1346,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wall-07.img":{"frame":{"x":3998,"y":1346,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wheel-03.img":{"frame":{"x":3770,"y":3942,"w":312,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":149},"sourceSize":{"w":312,"h":156}}}},{"meta":{"image":"shared-2-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01.img":{"frame":{"x":890,"y":3184,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02.img":{"frame":{"x":2047,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-barrel-01.img":{"frame":{"x":3097,"y":150,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-02.img":{"frame":{"x":3153,"y":2,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-res-02.img":{"frame":{"x":2517,"y":3270,"w":130,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":130,"h":127},"sourceSize":{"w":144,"h":144}},"map-bathhouse-column-01.img":{"frame":{"x":2553,"y":2732,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bathrocks-01.img":{"frame":{"x":821,"y":2524,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bed-02.img":{"frame":{"x":2755,"y":2118,"w":176,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":216},"sourceSize":{"w":176,"h":216}},"map-bed-res-02.img":{"frame":{"x":2624,"y":1888,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-bollard-01.img":{"frame":{"x":2539,"y":3984,"w":112,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":112,"h":108},"sourceSize":{"w":144,"h":144}},"map-building-bank-ceiling-01.img":{"frame":{"x":598,"y":2628,"w":505,"h":552},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":48,"w":505,"h":552},"sourceSize":{"w":506,"h":600}},"map-building-bank-ceiling-03.img":{"frame":{"x":2009,"y":2470,"w":216,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":192,"w":216,"h":360},"sourceSize":{"w":216,"h":552}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":2009,"y":2834,"w":304,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":304,"h":192},"sourceSize":{"w":304,"h":208}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1447,"y":2317,"w":164,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":164,"h":192},"sourceSize":{"w":164,"h":208}},"map-building-barn-basement-floor-01.img":{"frame":{"x":2,"y":1510,"w":663,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":663,"h":470},"sourceSize":{"w":664,"h":472}},"map-building-barn-basement-floor-02.img":{"frame":{"x":1675,"y":2,"w":375,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":375,"h":470},"sourceSize":{"w":376,"h":472}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":2329,"y":2080,"w":225,"h":290},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":290},"sourceSize":{"w":226,"h":290}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":2,"y":3348,"w":567,"h":343},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":567,"h":343},"sourceSize":{"w":568,"h":344}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":2483,"y":2,"w":258,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":258,"h":193},"sourceSize":{"w":258,"h":194}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":615,"y":1984,"w":536,"h":536},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":536,"h":536},"sourceSize":{"w":536,"h":536}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":2745,"y":2,"w":256,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":224},"sourceSize":{"w":256,"h":224}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":2,"y":3695,"w":512,"h":336},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":336},"sourceSize":{"w":512,"h":336}},"map-building-club-ceiling-01a.img":{"frame":{"x":871,"y":584,"w":737,"h":593},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":737,"h":593},"sourceSize":{"w":738,"h":594}},"map-building-club-ceiling-01c.img":{"frame":{"x":1581,"y":3490,"w":400,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":400,"h":433},"sourceSize":{"w":402,"h":434}},"map-building-club-floor-01a.img":{"frame":{"x":2755,"y":1888,"w":225,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":226},"sourceSize":{"w":226,"h":226}},"map-building-club-floor-01b.img":{"frame":{"x":2659,"y":1062,"w":194,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":193},"sourceSize":{"w":194,"h":194}},"map-building-club-floor-01e.img":{"frame":{"x":1612,"y":584,"w":353,"h":482},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":482},"sourceSize":{"w":354,"h":482}},"map-building-club-floor-01f.img":{"frame":{"x":2370,"y":1656,"w":194,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":130},"sourceSize":{"w":194,"h":130}},"map-building-club-floor-01g.img":{"frame":{"x":871,"y":2,"w":800,"h":578},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":800,"h":578},"sourceSize":{"w":802,"h":578}},"map-building-club-vault-ceiling.img":{"frame":{"x":2834,"y":1441,"w":160,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":176},"sourceSize":{"w":160,"h":176}},"map-building-container-ceiling-03.img":{"frame":{"x":1965,"y":1070,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-05.img":{"frame":{"x":1969,"y":476,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-open-ceiling-01.img":{"frame":{"x":2054,"y":2,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":156,"w":180,"h":380},"sourceSize":{"w":180,"h":692}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1155,"y":2317,"w":288,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-building-dock-floor-01a.img":{"frame":{"x":2211,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":160,"h":160},"sourceSize":{"w":160,"h":162}},"map-building-house-ceiling.img":{"frame":{"x":733,"y":1181,"w":720,"h":648},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":648},"sourceSize":{"w":720,"h":648}},"map-building-hut-ceiling-01.img":{"frame":{"x":1065,"y":3698,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-02.img":{"frame":{"x":1623,"y":2317,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-03.img":{"frame":{"x":1663,"y":1689,"w":379,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":379,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-floor-01.img":{"frame":{"x":1581,"y":3038,"w":448,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":448,"h":448},"sourceSize":{"w":512,"h":512}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":865,"h":801},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":865,"h":801},"sourceSize":{"w":866,"h":802}},"map-building-mansion-cellar-01b.img":{"frame":{"x":2528,"y":2374,"w":225,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":230},"sourceSize":{"w":226,"h":230}},"map-building-mansion-floor-01c.img":{"frame":{"x":2624,"y":1656,"w":225,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":228},"sourceSize":{"w":226,"h":228}},"map-building-outhouse-ceiling.img":{"frame":{"x":2477,"y":314,"w":272,"h":225},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":272,"h":225},"sourceSize":{"w":400,"h":316}},"map-building-outhouse-floor.img":{"frame":{"x":2238,"y":2,"w":241,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":80,"y":4,"w":241,"h":308},"sourceSize":{"w":400,"h":316}},"map-building-police-ceiling-03.img":{"frame":{"x":1155,"y":1833,"w":504,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":480},"sourceSize":{"w":504,"h":480}},"map-building-police-floor-02.img":{"frame":{"x":2,"y":1984,"w":609,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":65,"w":609,"h":640},"sourceSize":{"w":610,"h":1570}},"map-building-shack-ceiling-01.img":{"frame":{"x":1663,"y":2086,"w":315,"h":207},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":315,"h":207},"sourceSize":{"w":315,"h":255}},"map-building-shack-ceiling-02.img":{"frame":{"x":2033,"y":3290,"w":240,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":192},"sourceSize":{"w":240,"h":240}},"map-building-shack-floor-01.img":{"frame":{"x":1623,"y":2714,"w":382,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":20,"w":382,"h":320},"sourceSize":{"w":420,"h":340}},"map-building-shack-floor-02.img":{"frame":{"x":2149,"y":860,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-shack-floor-03.img":{"frame":{"x":2,"y":2936,"w":568,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":568,"h":408},"sourceSize":{"w":576,"h":448}},"map-building-teahouse-res-01.img":{"frame":{"x":2149,"y":1184,"w":282,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":115,"y":152,"w":282,"h":208},"sourceSize":{"w":512,"h":512}},"map-building-vault-ceiling.img":{"frame":{"x":2046,"y":1454,"w":320,"h":337},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":337},"sourceSize":{"w":432,"h":337}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":573,"y":3348,"w":488,"h":560},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":560},"sourceSize":{"w":488,"h":560}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":1985,"y":3490,"w":400,"h":430},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":430},"sourceSize":{"w":400,"h":448}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":2153,"y":386,"w":320,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":144,"w":320,"h":304},"sourceSize":{"w":320,"h":448}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":2,"y":807,"w":727,"h":699},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":727,"h":699},"sourceSize":{"w":738,"h":706}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":2677,"y":858,"w":192,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":179},"sourceSize":{"w":194,"h":180}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":2558,"y":2072,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-01.img":{"frame":{"x":2046,"y":1795,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-02.img":{"frame":{"x":2229,"y":2470,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":2,"y":2628,"w":592,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":112,"w":592,"h":304},"sourceSize":{"w":592,"h":416}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":2746,"y":543,"w":192,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-storm-floor-02.img":{"frame":{"x":2005,"y":2086,"w":320,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":380},"sourceSize":{"w":320,"h":384}},"map-bunker-vent-03.img":{"frame":{"x":733,"y":807,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-01f.img":{"frame":{"x":2533,"y":2991,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-07.img":{"frame":{"x":3090,"y":526,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-bush-07x.img":{"frame":{"x":2533,"y":3125,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-case-chrys-01.img":{"frame":{"x":1399,"y":3038,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-case-flare-res-01.img":{"frame":{"x":2473,"y":1062,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-hatchet-res-01.img":{"frame":{"x":2553,"y":2864,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-ring-01.img":{"frame":{"x":2528,"y":2608,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-chest-03.img":{"frame":{"x":1675,"y":476,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chimney-01.img":{"frame":{"x":2621,"y":3526,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":120,"h":118},"sourceSize":{"w":120,"h":120}},"map-chute-01.img":{"frame":{"x":2317,"y":2755,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-control-panel-03.img":{"frame":{"x":921,"y":2524,"w":96,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":94},"sourceSize":{"w":96,"h":94}},"map-couch-03.img":{"frame":{"x":2659,"y":1259,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-crate-01.img":{"frame":{"x":2998,"y":1441,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02.img":{"frame":{"x":3009,"y":1177,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02sv.img":{"frame":{"x":3011,"y":1008,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03.img":{"frame":{"x":2942,"y":426,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-04.img":{"frame":{"x":1879,"y":3927,"w":164,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":164},"sourceSize":{"w":164,"h":164}},"map-crate-05.img":{"frame":{"x":2389,"y":3744,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":124,"h":124},"sourceSize":{"w":124,"h":124}},"map-crate-07.img":{"frame":{"x":2949,"y":230,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-08.img":{"frame":{"x":3005,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-09.img":{"frame":{"x":2942,"y":574,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-10.img":{"frame":{"x":2873,"y":856,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-11.img":{"frame":{"x":2853,"y":1621,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-14.img":{"frame":{"x":929,"y":1833,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-14a.img":{"frame":{"x":2477,"y":543,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-20.img":{"frame":{"x":2655,"y":3984,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":108},"sourceSize":{"w":108,"h":108}},"map-crate-res-01.img":{"frame":{"x":3025,"y":870,"w":138,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":138,"h":129},"sourceSize":{"w":144,"h":144}},"map-crate-res-03.img":{"frame":{"x":1447,"y":3927,"w":216,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":216,"h":154},"sourceSize":{"w":216,"h":156}},"map-decal-club-01.img":{"frame":{"x":1612,"y":1070,"w":100,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":115,"w":100,"h":106},"sourceSize":{"w":104,"h":360}},"map-decal-initiative.img":{"frame":{"x":2647,"y":3401,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-decal-oil-01.img":{"frame":{"x":2637,"y":543,"w":86,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":86,"h":122},"sourceSize":{"w":128,"h":128}},"map-decal-oil-02.img":{"frame":{"x":727,"y":2524,"w":90,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":90,"h":100},"sourceSize":{"w":128,"h":128}},"map-decal-oil-03.img":{"frame":{"x":2329,"y":2374,"w":88,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":18,"w":88,"h":92},"sourceSize":{"w":128,"h":128}},"map-grill-01.img":{"frame":{"x":1819,"y":476,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"map-hedgehog-01.img":{"frame":{"x":2753,"y":230,"w":192,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":192},"sourceSize":{"w":192,"h":192}},"map-hut-res-01.img":{"frame":{"x":2293,"y":3030,"w":236,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":130,"y":136,"w":236,"h":236},"sourceSize":{"w":512,"h":512}},"map-outhouse-res.img":{"frame":{"x":2857,"y":1041,"w":150,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":125,"y":42,"w":150,"h":132},"sourceSize":{"w":400,"h":312}},"map-pipes-02.img":{"frame":{"x":2277,"y":3290,"w":236,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":236,"h":172},"sourceSize":{"w":238,"h":172}},"map-pipes-05.img":{"frame":{"x":1969,"y":860,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":192}},"map-pot-01.img":{"frame":{"x":2585,"y":199,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-02.img":{"frame":{"x":2953,"y":1773,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-03.img":{"frame":{"x":2753,"y":426,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-04.img":{"frame":{"x":3157,"y":1156,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-05.img":{"frame":{"x":3159,"y":1003,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-recorder-02.img":{"frame":{"x":1021,"y":2524,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-refrigerator-01.img":{"frame":{"x":733,"y":1081,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-sandbags-01.img":{"frame":{"x":669,"y":1833,"w":256,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":146},"sourceSize":{"w":256,"h":148}},"map-sandbags-02.img":{"frame":{"x":1447,"y":3698,"w":114,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":114,"h":146},"sourceSize":{"w":148,"h":148}},"map-shack-res-01.img":{"frame":{"x":518,"y":3912,"w":305,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":49,"w":305,"h":181},"sourceSize":{"w":420,"h":340}},"map-shack-res-02.img":{"frame":{"x":827,"y":3912,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-shack-res-03.img":{"frame":{"x":2435,"y":1184,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-silo-01.img":{"frame":{"x":1457,"y":1181,"w":504,"h":504},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":504,"h":504},"sourceSize":{"w":512,"h":512}},"map-smoke-res.img":{"frame":{"x":2834,"y":1259,"w":171,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":39,"w":171,"h":178},"sourceSize":{"w":256,"h":256}},"map-squash-01.img":{"frame":{"x":2517,"y":3744,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":124,"h":116},"sourceSize":{"w":144,"h":144}},"map-stairs-broken-01.img":{"frame":{"x":2746,"y":724,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-stand-01.img":{"frame":{"x":2621,"y":3648,"w":80,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":90},"sourceSize":{"w":80,"h":90}},"map-stone-01.img":{"frame":{"x":2389,"y":3466,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-stone-03.img":{"frame":{"x":2345,"y":1795,"w":275,"h":273},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":275,"h":273},"sourceSize":{"w":289,"h":289}},"map-stone-04.img":{"frame":{"x":3025,"y":722,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-05.img":{"frame":{"x":3090,"y":378,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-res-01.img":{"frame":{"x":2651,"y":3259,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02.img":{"frame":{"x":2630,"y":1364,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-04.img":{"frame":{"x":2539,"y":3864,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"map-stone-res-06.img":{"frame":{"x":1107,"y":3038,"w":288,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-stove-01.img":{"frame":{"x":1667,"y":3927,"w":208,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":208,"h":162},"sourceSize":{"w":224,"h":176}},"map-stove-02.img":{"frame":{"x":1716,"y":1070,"w":98,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":98,"h":105},"sourceSize":{"w":112,"h":112}},"map-table-01.img":{"frame":{"x":1457,"y":1689,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02.img":{"frame":{"x":2454,"y":694,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03.img":{"frame":{"x":2375,"y":3924,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-res.img":{"frame":{"x":733,"y":945,"w":131,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":131,"h":132},"sourceSize":{"w":144,"h":144}},"map-toilet-01.img":{"frame":{"x":2910,"y":724,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-02.img":{"frame":{"x":2521,"y":3612,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-res-01.img":{"frame":{"x":2483,"y":199,"w":98,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":98,"h":108},"sourceSize":{"w":128,"h":128}},"map-toilet-res-02.img":{"frame":{"x":2063,"y":860,"w":80,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":17,"w":80,"h":94},"sourceSize":{"w":128,"h":128}},"map-tree-03.img":{"frame":{"x":2370,"y":1396,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-04.img":{"frame":{"x":3009,"y":1325,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-07su.img":{"frame":{"x":2033,"y":3030,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08f.img":{"frame":{"x":1065,"y":3184,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08su.img":{"frame":{"x":1107,"y":2524,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-09.img":{"frame":{"x":3125,"y":1325,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-res-02.img":{"frame":{"x":1818,"y":1070,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-vat-01.img":{"frame":{"x":2389,"y":3612,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":128,"h":128},"sourceSize":{"w":144,"h":144}},"map-vat-02.img":{"frame":{"x":2473,"y":858,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-vat-res.img":{"frame":{"x":2535,"y":3401,"w":108,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":108,"h":121},"sourceSize":{"w":144,"h":144}},"map-vending-soda-01.img":{"frame":{"x":615,"y":2524,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-wheel-01.img":{"frame":{"x":574,"y":3184,"w":312,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":156},"sourceSize":{"w":312,"h":156}},"map-wheel-02.img":{"frame":{"x":2153,"y":694,"w":297,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":297,"h":149},"sourceSize":{"w":312,"h":156}},"map-woodpile-01.img":{"frame":{"x":2853,"y":1773,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}}}}]')
  , fl = JSON.parse('[{"meta":{"image":"snow-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01x.img":{"frame":{"x":3889,"y":3182,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02x.img":{"frame":{"x":774,"y":2656,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":3405,"y":870,"w":400,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-building-greenhouse-floor-02.img":{"frame":{"x":2569,"y":870,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":774,"y":2380,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2195,"y":2023,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1701,"y":2,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3953,"y":2830,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":3035,"y":2318,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":3408,"y":746,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2195,"y":2484,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":3035,"y":2176,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":3393,"y":2318,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3809,"y":2,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":1701,"y":1245,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1454,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":774,"y":2196,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2636,"y":2,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":2955,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":3119,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2195,"y":2176,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3749,"y":2318,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1487,"y":1454,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2631,"y":2176,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":3691,"y":3066,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":777,"y":1454,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":3408,"y":2,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3310,"y":1516,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":2631,"y":2452,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":2506,"y":1516,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3393,"y":2628,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":2086,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1487,"y":2023,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1701,"y":633,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":3283,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bush-01x.img":{"frame":{"x":1632,"y":2535,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2360,"y":2023,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chute-01x.img":{"frame":{"x":3717,"y":2830,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-complex-warehouse-floor-01.img":{"frame":{"x":710,"y":2618,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":710,"y":2086,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2569,"y":633,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-crate-01x.img":{"frame":{"x":166,"y":2730,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":1484,"y":2535,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":477,"y":2730,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-planter-06.img":{"frame":{"x":1294,"y":2196,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":3283,"y":2690,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":2551,"y":2484,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":4009,"y":2666,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snow-01.img":{"frame":{"x":3809,"y":1329,"w":212,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":41,"w":212,"h":174},"sourceSize":{"w":256,"h":256}},"map-snow-02.img":{"frame":{"x":1487,"y":1808,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":24,"w":208,"h":208},"sourceSize":{"w":256,"h":256}},"map-snow-03.img":{"frame":{"x":3756,"y":617,"w":312,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":7,"w":312,"h":178},"sourceSize":{"w":360,"h":192}},"map-snow-04.img":{"frame":{"x":3283,"y":2794,"w":100,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":100,"h":98},"sourceSize":{"w":128,"h":128}},"map-snow-05.img":{"frame":{"x":3636,"y":746,"w":90,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":12,"w":90,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-06.img":{"frame":{"x":3889,"y":3066,"w":178,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":178,"h":112},"sourceSize":{"w":192,"h":128}},"map-snowball-res.img":{"frame":{"x":2955,"y":2452,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":322,"y":2730,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":3809,"y":799,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1102,"y":2656,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":3487,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":938,"y":2656,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":3717,"y":2666,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2,"y":2730,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-10.img":{"frame":{"x":1226,"y":2472,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":3809,"y":1075,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}}}}]')
  , wl = JSON.parse('[{"meta":{"image":"woods-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":710,"y":2646,"w":623,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":623,"h":608},"sourceSize":{"w":640,"h":640}},"map-building-pavilion-floor-01.img":{"frame":{"x":735,"y":1945,"w":576,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":576,"h":576},"sourceSize":{"w":576,"h":576}},"map-building-pavilion-res-01.img":{"frame":{"x":2107,"y":2510,"w":178,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":167,"y":162,"w":178,"h":188},"sourceSize":{"w":512,"h":512}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":937,"y":3258,"w":320,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":1777,"y":3509,"w":192,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":1831,"y":1928,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":2646,"w":704,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":1261,"y":3772,"w":416,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":304},"sourceSize":{"w":416,"h":304}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":1945,"w":729,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":729,"h":697},"sourceSize":{"w":738,"h":706}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1624,"y":1640,"w":193,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":193,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":1716,"y":2861,"w":226,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":226,"h":368},"sourceSize":{"w":226,"h":385}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":904,"y":1443,"w":512,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":400},"sourceSize":{"w":512,"h":400}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":1315,"y":1847,"w":512,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":496},"sourceSize":{"w":512,"h":496}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":3680,"w":608,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":304},"sourceSize":{"w":608,"h":304}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":1184,"h":925},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1184,"h":925},"sourceSize":{"w":1184,"h":928}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":1350,"w":898,"h":591},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":898,"h":591},"sourceSize":{"w":898,"h":594}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":3354,"w":672,"h":322},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":672,"h":322},"sourceSize":{"w":690,"h":322}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":678,"y":3354,"w":255,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":255,"h":656},"sourceSize":{"w":258,"h":674}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":1681,"y":3772,"w":382,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":382,"h":210},"sourceSize":{"w":401,"h":210}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":1337,"y":2861,"w":375,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":375,"h":226},"sourceSize":{"w":386,"h":226}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":904,"y":931,"w":732,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":732,"h":508},"sourceSize":{"w":738,"h":514}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":937,"y":3806,"w":194,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":194,"h":280},"sourceSize":{"w":194,"h":306}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":1640,"y":931,"w":380,"h":509},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":380,"h":509},"sourceSize":{"w":386,"h":530}},"map-bush-01x.img":{"frame":{"x":2057,"y":3112,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-06.img":{"frame":{"x":1946,"y":2764,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-bush-07sp.img":{"frame":{"x":2310,"y":1928,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2,"y":3988,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-crate-01x.img":{"frame":{"x":1946,"y":2956,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":2275,"y":2233,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":2155,"y":2081,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-19.img":{"frame":{"x":2307,"y":2081,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":710,"y":931,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":146,"y":3988,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":1629,"y":3091,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":250,"y":4014,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snowball-res.img":{"frame":{"x":336,"y":4014,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":2155,"y":1928,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":1777,"y":3233,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1135,"y":3866,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":1420,"y":1640,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":710,"y":1207,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":1337,"y":3091,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2111,"y":2252,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-05.img":{"frame":{"x":1831,"y":1444,"w":490,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":490,"h":480},"sourceSize":{"w":512,"h":512}},"map-tree-07.img":{"frame":{"x":1973,"y":3509,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-07sp.img":{"frame":{"x":2067,"y":3769,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08.img":{"frame":{"x":1261,"y":3258,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08sp.img":{"frame":{"x":1337,"y":2347,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-10.img":{"frame":{"x":1853,"y":2252,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":1853,"y":2510,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}},"map-tree-switch-01.img":{"frame":{"x":735,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-02.img":{"frame":{"x":851,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-03.img":{"frame":{"x":967,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-04.img":{"frame":{"x":1083,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-woodpile-02.img":{"frame":{"x":1420,"y":1444,"w":384,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":192},"sourceSize":{"w":384,"h":192}},"map-woodpile-res-02.img":{"frame":{"x":1135,"y":3806,"w":121,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":121,"h":56},"sourceSize":{"w":128,"h":64}}}}]')
  , Sl = {
    cobalt: al,
    desert: ol,
    faction: ll,
    gradient: nl,
    halloween: ml,
    loadout: hl,
    main: ul,
    potato: cl,
    savannah: dl,
    shared: pl,
    snow: fl,
    woods: wl
}
  , gl = JSON.parse('[{"meta":{"image":"cobalt-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":750,"y":910,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":910,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":366,"y":1542,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":722,"y":1440,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":1659,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":1790,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":877,"y":1616,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1407,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":714,"y":1542,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":942,"y":1230,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":133,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":217,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":722,"y":1284,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":877,"y":1440,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":914,"y":1051,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":359,"y":1034,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1041,"y":1513,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1034,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":574,"y":910,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1676,"y":2,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":750,"y":1051,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1593,"y":778,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1014,"y":1051,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":358,"y":1659,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":366,"y":1284,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1593,"y":470,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":359,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1041,"y":1394,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":714,"y":1850,"w":256,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":176},"sourceSize":{"w":256,"h":176}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":853,"y":470,"w":736,"h":577},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":63,"w":736,"h":577},"sourceSize":{"w":832,"h":704}},"map-class-crate-03.img":{"frame":{"x":1088,"y":1614,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":67,"h":67},"sourceSize":{"w":74,"h":74}},"map-class-crate-assault.img":{"frame":{"x":1183,"y":1187,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-demo.img":{"frame":{"x":1255,"y":1110,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-healer.img":{"frame":{"x":1183,"y":1262,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-res-01.img":{"frame":{"x":853,"y":182,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":62,"h":64},"sourceSize":{"w":74,"h":74}},"map-class-crate-scout.img":{"frame":{"x":974,"y":1836,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-sniper.img":{"frame":{"x":1031,"y":1759,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-tank.img":{"frame":{"x":974,"y":1911,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-shell-01a.img":{"frame":{"x":877,"y":1772,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-01b.img":{"frame":{"x":954,"y":1759,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02a.img":{"frame":{"x":1106,"y":1190,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02b.img":{"frame":{"x":1178,"y":1110,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03a.img":{"frame":{"x":1106,"y":1267,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03b.img":{"frame":{"x":1141,"y":1344,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-complex-warehouse-floor-01.img":{"frame":{"x":675,"y":1542,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1997,"y":778,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":301,"y":1920,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-stone-01cb.img":{"frame":{"x":1141,"y":1421,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-03cb.img":{"frame":{"x":945,"y":1616,"w":139,"h":139},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":139,"h":139},"sourceSize":{"w":144,"h":144}},"map-stone-res-01cb.img":{"frame":{"x":974,"y":1986,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02cb.img":{"frame":{"x":463,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-tree-03cb.img":{"frame":{"x":2,"y":1920,"w":127,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":127,"h":126},"sourceSize":{"w":128,"h":128}},"part-class-shell-01a.img":{"frame":{"x":750,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-01b.img":{"frame":{"x":1014,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-02a.img":{"frame":{"x":798,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-02b.img":{"frame":{"x":1044,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-03a.img":{"frame":{"x":846,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-03b.img":{"frame":{"x":1074,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}}}}]')
  , yl = [{
    meta: {
        image: "desert-0-50.png",
        size: {
            w: 2048,
            h: 2048
        },
        scale: .5
    },
    frames: {
        "map-archway-res-01.img": {
            frame: {
                x: 1003,
                y: 646,
                w: 179,
                h: 45
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 179,
                h: 45
            },
            sourceSize: {
                w: 180,
                h: 48
            }
        },
        "map-building-archway-ceiling-01.img": {
            frame: {
                x: 927,
                y: 438,
                w: 336,
                h: 64
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 336,
                h: 64
            },
            sourceSize: {
                w: 336,
                h: 64
            }
        },
        "map-building-greenhouse-ceiling-02.img": {
            frame: {
                x: 1735,
                y: 2,
                w: 200,
                h: 312
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 200,
                h: 312
            },
            sourceSize: {
                w: 200,
                h: 312
            }
        },
        "map-building-greenhouse-floor-02.img": {
            frame: {
                x: 1315,
                y: 2,
                w: 416,
                h: 321
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 416,
                h: 321
            },
            sourceSize: {
                w: 417,
                h: 321
            }
        },
        "map-building-saloon-ceiling-01.img": {
            frame: {
                x: 1719,
                y: 327,
                w: 312,
                h: 312
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 312,
                h: 312
            },
            sourceSize: {
                w: 328,
                h: 328
            }
        },
        "map-building-saloon-ceiling-02.img": {
            frame: {
                x: 1939,
                y: 121,
                w: 96,
                h: 80
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 96,
                h: 80
            },
            sourceSize: {
                w: 96,
                h: 80
            }
        },
        "map-building-saloon-cellar-01.img": {
            frame: {
                x: 2,
                y: 662,
                w: 528,
                h: 336
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 528,
                h: 336
            },
            sourceSize: {
                w: 528,
                h: 336
            }
        },
        "map-building-saloon-floor-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 656,
                h: 656
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 656,
                h: 656
            },
            sourceSize: {
                w: 656,
                h: 656
            }
        },
        "map-bunker-chrys-chamber-ceiling-01.img": {
            frame: {
                x: 924,
                y: 506,
                w: 224,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 136
            },
            sourceSize: {
                w: 224,
                h: 136
            }
        },
        "map-bunker-chrys-chamber-floor-01a.img": {
            frame: {
                x: 1939,
                y: 205,
                w: 80,
                h: 74
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 17,
                y: 16,
                w: 80,
                h: 74
            },
            sourceSize: {
                w: 114,
                h: 90
            }
        },
        "map-bunker-chrys-chamber-floor-01b.img": {
            frame: {
                x: 534,
                y: 662,
                w: 465,
                h: 313
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 465,
                h: 313
            },
            sourceSize: {
                w: 466,
                h: 314
            }
        },
        "map-bunker-chrys-compartment-ceiling-01a.img": {
            frame: {
                x: 1631,
                y: 837,
                w: 56,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 56,
                h: 96
            },
            sourceSize: {
                w: 56,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-01b.img": {
            frame: {
                x: 1837,
                y: 918,
                w: 177,
                h: 184
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 177,
                h: 184
            },
            sourceSize: {
                w: 178,
                h: 186
            }
        },
        "map-bunker-chrys-compartment-ceiling-02a.img": {
            frame: {
                x: 662,
                y: 566,
                w: 112,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 48
            },
            sourceSize: {
                w: 112,
                h: 48
            }
        },
        "map-bunker-chrys-compartment-ceiling-02b.img": {
            frame: {
                x: 1631,
                y: 952,
                w: 176,
                h: 129
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 176,
                h: 129
            },
            sourceSize: {
                w: 178,
                h: 130
            }
        },
        "map-bunker-chrys-compartment-ceiling-03a.img": {
            frame: {
                x: 778,
                y: 566,
                w: 112,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 48
            },
            sourceSize: {
                w: 112,
                h: 48
            }
        },
        "map-bunker-chrys-compartment-ceiling-03b.img": {
            frame: {
                x: 1392,
                y: 968,
                w: 176,
                h: 153
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 176,
                h: 153
            },
            sourceSize: {
                w: 178,
                h: 154
            }
        },
        "map-bunker-chrys-compartment-floor-01a.img": {
            frame: {
                x: 1719,
                y: 643,
                w: 114,
                h: 305
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 16,
                w: 114,
                h: 305
            },
            sourceSize: {
                w: 114,
                h: 322
            }
        },
        "map-bunker-chrys-compartment-floor-01c.img": {
            frame: {
                x: 1315,
                y: 327,
                w: 400,
                h: 387
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 400,
                h: 387
            },
            sourceSize: {
                w: 402,
                h: 402
            }
        },
        "map-bunker-chrys-compartment-floor-02a.img": {
            frame: {
                x: 1003,
                y: 718,
                w: 385,
                h: 314
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 385,
                h: 314
            },
            sourceSize: {
                w: 386,
                h: 314
            }
        },
        "map-bunker-chrys-compartment-floor-02c.img": {
            frame: {
                x: 662,
                y: 472,
                w: 258,
                h: 90
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 8,
                y: 0,
                w: 258,
                h: 90
            },
            sourceSize: {
                w: 274,
                h: 90
            }
        },
        "map-bunker-chrys-compartment-floor-03a.img": {
            frame: {
                x: 927,
                y: 2,
                w: 384,
                h: 432
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 384,
                h: 432
            },
            sourceSize: {
                w: 384,
                h: 432
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 1631,
                y: 718,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 1939,
                y: 2,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-bunker-statue-chamber-floor-01.img": {
            frame: {
                x: 1837,
                y: 643,
                w: 126,
                h: 271
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 16,
                w: 126,
                h: 271
            },
            sourceSize: {
                w: 128,
                h: 288
            }
        },
        "map-bush-05.img": {
            frame: {
                x: 534,
                y: 979,
                w: 70,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 70,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-bush-res-05.img": {
            frame: {
                x: 2018,
                y: 871,
                w: 28,
                h: 25
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 22,
                y: 23,
                w: 28,
                h: 25
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-case-meteor-01.img": {
            frame: {
                x: 608,
                y: 979,
                w: 70,
                h: 51
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 70,
                h: 51
            },
            sourceSize: {
                w: 70,
                h: 51
            }
        },
        "map-case-meteor-res-01.img": {
            frame: {
                x: 756,
                y: 979,
                w: 64,
                h: 57
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 6,
                y: 5,
                w: 64,
                h: 57
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-chest-03d.img": {
            frame: {
                x: 682,
                y: 979,
                w: 70,
                h: 51
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 70,
                h: 51
            },
            sourceSize: {
                w: 70,
                h: 51
            }
        },
        "map-complex-warehouse-floor-05.img": {
            frame: {
                x: 662,
                y: 2,
                w: 261,
                h: 466
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 504,
                w: 261,
                h: 466
            },
            sourceSize: {
                w: 648,
                h: 1024
            }
        },
        "map-crate-02f.img": {
            frame: {
                x: 1967,
                y: 643,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-crate-18.img": {
            frame: {
                x: 1967,
                y: 719,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-crate-22.img": {
            frame: {
                x: 1967,
                y: 795,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-planter-06.img": {
            frame: {
                x: 1186,
                y: 574,
                w: 72,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 136
            },
            sourceSize: {
                w: 72,
                h: 136
            }
        },
        "map-planter-07.img": {
            frame: {
                x: 1572,
                y: 968,
                w: 50,
                h: 50
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 50,
                h: 50
            },
            sourceSize: {
                w: 50,
                h: 50
            }
        },
        "map-planter-res-02.img": {
            frame: {
                x: 2e3,
                y: 1246,
                w: 38,
                h: 67
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 0,
                w: 38,
                h: 67
            },
            sourceSize: {
                w: 43,
                h: 68
            }
        },
        "map-planter-res-03.img": {
            frame: {
                x: 1267,
                y: 438,
                w: 41,
                h: 37
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 3,
                w: 41,
                h: 37
            },
            sourceSize: {
                w: 43,
                h: 43
            }
        },
        "map-statue-03.img": {
            frame: {
                x: 1572,
                y: 1085,
                w: 144,
                h: 141
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 33,
                y: 33,
                w: 144,
                h: 141
            },
            sourceSize: {
                w: 208,
                h: 208
            }
        },
        "map-statue-04.img": {
            frame: {
                x: 1720,
                y: 1106,
                w: 144,
                h: 141
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 33,
                y: 33,
                w: 144,
                h: 141
            },
            sourceSize: {
                w: 208,
                h: 208
            }
        },
        "map-stone-03b.img": {
            frame: {
                x: 1868,
                y: 1106,
                w: 138,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 4,
                w: 138,
                h: 136
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-stone-06.img": {
            frame: {
                x: 1152,
                y: 506,
                w: 144,
                h: 64
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 144,
                h: 64
            },
            sourceSize: {
                w: 144,
                h: 64
            }
        },
        "map-stone-res-01b.img": {
            frame: {
                x: 608,
                y: 1034,
                w: 59,
                h: 59
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 59,
                h: 59
            },
            sourceSize: {
                w: 60,
                h: 60
            }
        },
        "map-tree-05c.img": {
            frame: {
                x: 1392,
                y: 718,
                w: 235,
                h: 246
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 10,
                y: 5,
                w: 235,
                h: 246
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-tree-06.img": {
            frame: {
                x: 1868,
                y: 1246,
                w: 128,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 128,
                h: 128
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        }
    }
}]
  , xl = [{
    meta: {
        image: "faction-0-50.png",
        size: {
            w: 2048,
            h: 2048
        },
        scale: .5
    },
    frames: {
        "map-airdrop-03.img": {
            frame: {
                x: 1890,
                y: 741,
                w: 128,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 128,
                h: 128
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-airdrop-04.img": {
            frame: {
                x: 1890,
                y: 873,
                w: 128,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 128,
                h: 128
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-building-bridge-xlg-floor.img": {
            frame: {
                x: 2,
                y: 2,
                w: 1232,
                h: 480
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 1232,
                h: 480
            },
            sourceSize: {
                w: 1232,
                h: 480
            }
        },
        "map-building-greenhouse-ceiling-01.img": {
            frame: {
                x: 860,
                y: 1017,
                w: 200,
                h: 157
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 200,
                h: 157
            },
            sourceSize: {
                w: 202,
                h: 158
            }
        },
        "map-building-greenhouse-floor-01.img": {
            frame: {
                x: 390,
                y: 486,
                w: 416,
                h: 320
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 416,
                h: 320
            },
            sourceSize: {
                w: 417,
                h: 321
            }
        },
        "map-bunker-chrys-chamber-ceiling-01.img": {
            frame: {
                x: 860,
                y: 877,
                w: 224,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 224,
                h: 136
            },
            sourceSize: {
                w: 224,
                h: 136
            }
        },
        "map-bunker-chrys-chamber-floor-01a.img": {
            frame: {
                x: 380,
                y: 950,
                w: 80,
                h: 74
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 17,
                y: 16,
                w: 80,
                h: 74
            },
            sourceSize: {
                w: 114,
                h: 90
            }
        },
        "map-bunker-chrys-chamber-floor-01b.img": {
            frame: {
                x: 2,
                y: 1030,
                w: 465,
                h: 313
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 465,
                h: 313
            },
            sourceSize: {
                w: 466,
                h: 314
            }
        },
        "map-bunker-chrys-compartment-ceiling-01a.img": {
            frame: {
                x: 106,
                y: 1944,
                w: 56,
                h: 96
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 56,
                h: 96
            },
            sourceSize: {
                w: 56,
                h: 96
            }
        },
        "map-bunker-chrys-compartment-ceiling-01b.img": {
            frame: {
                x: 2,
                y: 1347,
                w: 177,
                h: 184
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 177,
                h: 184
            },
            sourceSize: {
                w: 178,
                h: 186
            }
        },
        "map-bunker-chrys-compartment-ceiling-02a.img": {
            frame: {
                x: 264,
                y: 922,
                w: 112,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 48
            },
            sourceSize: {
                w: 112,
                h: 48
            }
        },
        "map-bunker-chrys-compartment-ceiling-02b.img": {
            frame: {
                x: 2,
                y: 1535,
                w: 176,
                h: 129
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 176,
                h: 129
            },
            sourceSize: {
                w: 178,
                h: 130
            }
        },
        "map-bunker-chrys-compartment-ceiling-03a.img": {
            frame: {
                x: 264,
                y: 974,
                w: 112,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 112,
                h: 48
            },
            sourceSize: {
                w: 112,
                h: 48
            }
        },
        "map-bunker-chrys-compartment-ceiling-03b.img": {
            frame: {
                x: 2,
                y: 1668,
                w: 176,
                h: 153
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 176,
                h: 153
            },
            sourceSize: {
                w: 178,
                h: 154
            }
        },
        "map-bunker-chrys-compartment-floor-01a.img": {
            frame: {
                x: 1890,
                y: 2,
                w: 114,
                h: 305
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 16,
                w: 114,
                h: 305
            },
            sourceSize: {
                w: 114,
                h: 322
            }
        },
        "map-bunker-chrys-compartment-floor-01b.img": {
            frame: {
                x: 810,
                y: 486,
                w: 400,
                h: 387
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 400,
                h: 387
            },
            sourceSize: {
                w: 402,
                h: 402
            }
        },
        "map-bunker-chrys-compartment-floor-02a.img": {
            frame: {
                x: 471,
                y: 877,
                w: 385,
                h: 314
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 385,
                h: 314
            },
            sourceSize: {
                w: 386,
                h: 314
            }
        },
        "map-bunker-chrys-compartment-floor-02b.img": {
            frame: {
                x: 2,
                y: 922,
                w: 258,
                h: 90
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 8,
                y: 0,
                w: 258,
                h: 90
            },
            sourceSize: {
                w: 274,
                h: 90
            }
        },
        "map-bunker-chrys-compartment-floor-03a.img": {
            frame: {
                x: 2,
                y: 486,
                w: 384,
                h: 432
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 384,
                h: 432
            },
            sourceSize: {
                w: 384,
                h: 432
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 2,
                y: 1825,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 86,
                y: 1825,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-chest-03f.img": {
            frame: {
                x: 466,
                y: 810,
                w: 70,
                h: 51
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 70,
                h: 51
            },
            sourceSize: {
                w: 70,
                h: 51
            }
        },
        "map-complex-warehouse-floor-01.img": {
            frame: {
                x: 2014,
                y: 1005,
                w: 30,
                h: 112
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 112
            },
            sourceSize: {
                w: 30,
                h: 112
            }
        },
        "map-complex-warehouse-floor-02.img": {
            frame: {
                x: 2008,
                y: 2,
                w: 30,
                h: 264
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 264
            },
            sourceSize: {
                w: 30,
                h: 264
            }
        },
        "map-complex-warehouse-floor-03.img": {
            frame: {
                x: 2014,
                y: 1121,
                w: 30,
                h: 112
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 112
            },
            sourceSize: {
                w: 30,
                h: 112
            }
        },
        "map-complex-warehouse-floor-04.img": {
            frame: {
                x: 1238,
                y: 2,
                w: 648,
                h: 1024
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 648,
                h: 1024
            },
            sourceSize: {
                w: 648,
                h: 1024
            }
        },
        "map-crate-02f.img": {
            frame: {
                x: 166,
                y: 1944,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-crate-12.img": {
            frame: {
                x: 1890,
                y: 1005,
                w: 120,
                h: 120
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 120,
                h: 120
            },
            sourceSize: {
                w: 120,
                h: 120
            }
        },
        "map-crate-13.img": {
            frame: {
                x: 1064,
                y: 1022,
                w: 120,
                h: 120
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 120,
                h: 120
            },
            sourceSize: {
                w: 120,
                h: 120
            }
        },
        "map-crate-22.img": {
            frame: {
                x: 170,
                y: 1825,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-planter-01.img": {
            frame: {
                x: 390,
                y: 810,
                w: 72,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 136
            },
            sourceSize: {
                w: 72,
                h: 136
            }
        },
        "map-planter-02.img": {
            frame: {
                x: 1890,
                y: 601,
                w: 72,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 136
            },
            sourceSize: {
                w: 72,
                h: 136
            }
        },
        "map-planter-03.img": {
            frame: {
                x: 1966,
                y: 601,
                w: 72,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 136
            },
            sourceSize: {
                w: 72,
                h: 136
            }
        },
        "map-planter-04.img": {
            frame: {
                x: 540,
                y: 810,
                w: 50,
                h: 50
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 50,
                h: 50
            },
            sourceSize: {
                w: 50,
                h: 50
            }
        },
        "map-planter-05.img": {
            frame: {
                x: 594,
                y: 810,
                w: 50,
                h: 50
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 50,
                h: 50
            },
            sourceSize: {
                w: 50,
                h: 50
            }
        },
        "map-planter-res-01.img": {
            frame: {
                x: 1188,
                y: 1022,
                w: 38,
                h: 67
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 0,
                w: 38,
                h: 67
            },
            sourceSize: {
                w: 43,
                h: 68
            }
        },
        "map-statue-01.img": {
            frame: {
                x: 1088,
                y: 877,
                w: 141,
                h: 141
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 33,
                y: 33,
                w: 141,
                h: 141
            },
            sourceSize: {
                w: 208,
                h: 208
            }
        },
        "map-statue-top-01.img": {
            frame: {
                x: 1890,
                y: 311,
                w: 139,
                h: 71
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 65,
                y: 66,
                w: 139,
                h: 71
            },
            sourceSize: {
                w: 208,
                h: 208
            }
        },
        "map-statue-top-02.img": {
            frame: {
                x: 1890,
                y: 386,
                w: 139,
                h: 71
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 65,
                y: 66,
                w: 139,
                h: 71
            },
            sourceSize: {
                w: 208,
                h: 208
            }
        },
        "map-stone-03f.img": {
            frame: {
                x: 1890,
                y: 461,
                w: 138,
                h: 136
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 4,
                w: 138,
                h: 136
            },
            sourceSize: {
                w: 144,
                h: 144
            }
        },
        "map-stone-res-02f.img": {
            frame: {
                x: 2,
                y: 1944,
                w: 100,
                h: 100
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 100,
                h: 100
            },
            sourceSize: {
                w: 100,
                h: 100
            }
        }
    }
}]
  , zl = [{
    meta: {
        image: "gradient-0-50.png",
        size: {
            w: 512,
            h: 512
        },
        scale: .5
    },
    frames: {
        "map-barrel-res-01.img": {
            frame: {
                x: 2,
                y: 135,
                w: 113,
                h: 109
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 10,
                w: 113,
                h: 109
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-building-club-gradient-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 117,
                h: 129
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 16,
                y: 4,
                w: 117,
                h: 129
            },
            sourceSize: {
                w: 146,
                h: 140
            }
        },
        "map-building-mansion-gradient-01.img": {
            frame: {
                x: 123,
                y: 2,
                w: 117,
                h: 102
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 4,
                w: 117,
                h: 102
            },
            sourceSize: {
                w: 124,
                h: 110
            }
        },
        "map-bush-01.img": {
            frame: {
                x: 123,
                y: 239,
                w: 63,
                h: 65
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 4,
                y: 3,
                w: 63,
                h: 65
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-bush-01cb.img": {
            frame: {
                x: 48,
                y: 248,
                w: 71,
                h: 71
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 71,
                h: 71
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-bush-03.img": {
            frame: {
                x: 2,
                y: 337,
                w: 74,
                h: 76
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 74,
                h: 76
            },
            sourceSize: {
                w: 76,
                h: 76
            }
        },
        "map-bush-04.img": {
            frame: {
                x: 76,
                y: 417,
                w: 68,
                h: 65
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 4,
                w: 68,
                h: 65
            },
            sourceSize: {
                w: 75,
                h: 75
            }
        },
        "map-bush-04cb.img": {
            frame: {
                x: 80,
                y: 323,
                w: 68,
                h: 65
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 5,
                w: 68,
                h: 65
            },
            sourceSize: {
                w: 75,
                h: 75
            }
        },
        "map-light-01.img": {
            frame: {
                x: 2,
                y: 417,
                w: 70,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 70,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-plane-01.img": {
            frame: {
                x: 119,
                y: 135,
                w: 90,
                h: 100
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 19,
                y: 5,
                w: 90,
                h: 100
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-plane-02.img": {
            frame: {
                x: 2,
                y: 248,
                w: 42,
                h: 85
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 43,
                y: 1,
                w: 42,
                h: 85
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        }
    }
}]
  , bl = [{
    meta: {
        image: "halloween-0-50.png",
        size: {
            w: 1024,
            h: 1024
        },
        scale: .5
    },
    frames: {
        "map-airdrop-01h.img": {
            frame: {
                x: 358,
                y: 505,
                w: 80,
                h: 80
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 80
            },
            sourceSize: {
                w: 80,
                h: 80
            }
        },
        "map-airdrop-02h.img": {
            frame: {
                x: 358,
                y: 589,
                w: 80,
                h: 80
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 80
            },
            sourceSize: {
                w: 80,
                h: 80
            }
        },
        "map-bunker-eye-chamber-ceiling-01.img": {
            frame: {
                x: 2,
                y: 678,
                w: 160,
                h: 272
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 272
            },
            sourceSize: {
                w: 160,
                h: 272
            }
        },
        "map-bunker-eye-chamber-floor-01a.img": {
            frame: {
                x: 2,
                y: 2,
                w: 352,
                h: 672
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 16,
                w: 352,
                h: 672
            },
            sourceSize: {
                w: 352,
                h: 688
            }
        },
        "map-bunker-eye-chamber-floor-01b.img": {
            frame: {
                x: 166,
                y: 842,
                w: 96,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 96,
                h: 128
            },
            sourceSize: {
                w: 96,
                h: 128
            }
        },
        "map-bunker-eye-compartment-ceiling-01.img": {
            frame: {
                x: 166,
                y: 678,
                w: 160,
                h: 160
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 160,
                h: 160
            },
            sourceSize: {
                w: 160,
                h: 160
            }
        },
        "map-bunker-eye-compartment-floor-01.img": {
            frame: {
                x: 358,
                y: 2,
                w: 352,
                h: 352
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 352,
                h: 352
            },
            sourceSize: {
                w: 352,
                h: 352
            }
        },
        "map-bush-06.img": {
            frame: {
                x: 330,
                y: 678,
                w: 95,
                h: 94
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 1,
                w: 95,
                h: 94
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-bush-07sp.img": {
            frame: {
                x: 515,
                y: 358,
                w: 67,
                h: 71
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 3,
                y: 0,
                w: 67,
                h: 71
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-bush-res-06.img": {
            frame: {
                x: 974,
                y: 95,
                w: 25,
                h: 24
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 23,
                y: 24,
                w: 25,
                h: 24
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-crate-11h.img": {
            frame: {
                x: 438,
                y: 358,
                w: 73,
                h: 73
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 73,
                h: 73
            },
            sourceSize: {
                w: 74,
                h: 74
            }
        },
        "map-pumpkin-01.img": {
            frame: {
                x: 586,
                y: 358,
                w: 70,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 70,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-pumpkin-02.img": {
            frame: {
                x: 586,
                y: 432,
                w: 70,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 70,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-pumpkin-03.img": {
            frame: {
                x: 2,
                y: 974,
                w: 47,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 11,
                y: 12,
                w: 47,
                h: 48
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-pumpkin-res-01.img": {
            frame: {
                x: 438,
                y: 435,
                w: 67,
                h: 66
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 4,
                w: 67,
                h: 66
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-pumpkin-res-03.img": {
            frame: {
                x: 974,
                y: 50,
                w: 43,
                h: 41
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 4,
                w: 43,
                h: 41
            },
            sourceSize: {
                w: 48,
                h: 48
            }
        },
        "map-tree-04h.img": {
            frame: {
                x: 963,
                y: 261,
                w: 56,
                h: 56
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 56,
                h: 56
            },
            sourceSize: {
                w: 56,
                h: 56
            }
        },
        "map-tree-05.img": {
            frame: {
                x: 714,
                y: 261,
                w: 245,
                h: 240
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 5,
                y: 8,
                w: 245,
                h: 240
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-tree-07.img": {
            frame: {
                x: 266,
                y: 842,
                w: 128,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 128,
                h: 128
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-tree-08.img": {
            frame: {
                x: 714,
                y: 2,
                w: 256,
                h: 255
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 256,
                h: 255
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-web-01.img": {
            frame: {
                x: 358,
                y: 358,
                w: 76,
                h: 79
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 76,
                h: 79
            },
            sourceSize: {
                w: 76,
                h: 80
            }
        },
        "part-airdrop-01h.img": {
            frame: {
                x: 974,
                y: 2,
                w: 44,
                h: 44
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 44,
                h: 44
            },
            sourceSize: {
                w: 48,
                h: 48
            }
        },
        "part-airdrop-02h.img": {
            frame: {
                x: 53,
                y: 974,
                w: 40,
                h: 40
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 40,
                h: 40
            },
            sourceSize: {
                w: 40,
                h: 40
            }
        }
    }
}]
  , kl = JSON.parse('[{"meta":{"image":"loadout-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"acorn.img":{"frame":{"x":657,"y":1796,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-12gauge.img":{"frame":{"x":943,"y":1143,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-308sub.img":{"frame":{"x":989,"y":1082,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-45acp.img":{"frame":{"x":985,"y":1203,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-50AE.img":{"frame":{"x":1003,"y":1142,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-556mm.img":{"frame":{"x":991,"y":1263,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-762mm.img":{"frame":{"x":1045,"y":1202,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-9mm.img":{"frame":{"x":1037,"y":1323,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-box.img":{"frame":{"x":1051,"y":1262,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-flare.img":{"frame":{"x":952,"y":1764,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"audio-off.img":{"frame":{"x":966,"y":2004,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"audio-on.img":{"frame":{"x":1016,"y":2004,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"baguette.img":{"frame":{"x":1347,"y":1938,"w":49,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":49,"h":49},"sourceSize":{"w":64,"h":64}},"bugle-final-blue.img":{"frame":{"x":869,"y":1285,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-final-red.img":{"frame":{"x":887,"y":1191,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-blue.img":{"frame":{"x":657,"y":1858,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-red.img":{"frame":{"x":703,"y":1673,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bullets.img":{"frame":{"x":68,"y":1602,"w":43,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":62},"sourceSize":{"w":64,"h":64}},"campfire.img":{"frame":{"x":2,"y":1367,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"candy-corn.img":{"frame":{"x":133,"y":1668,"w":52,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":61},"sourceSize":{"w":64,"h":64}},"cattle.img":{"frame":{"x":534,"y":1626,"w":59,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":56},"sourceSize":{"w":64,"h":64}},"checked.img":{"frame":{"x":1041,"y":899,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"chick.img":{"frame":{"x":955,"y":1700,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"chicken-dinner.img":{"frame":{"x":529,"y":745,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"chicken.img":{"frame":{"x":258,"y":1403,"w":53,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":53,"h":41},"sourceSize":{"w":64,"h":64}},"close.img":{"frame":{"x":1001,"y":979,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"cobalt.img":{"frame":{"x":486,"y":1087,"w":21,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":21,"h":21},"sourceSize":{"w":24,"h":24}},"coconut.img":{"frame":{"x":136,"y":1214,"w":55,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":9,"w":55,"h":45},"sourceSize":{"w":64,"h":64}},"cog.img":{"frame":{"x":865,"y":1022,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"copy.img":{"frame":{"x":1376,"y":1886,"w":44,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":44,"h":48},"sourceSize":{"w":64,"h":64}},"crab.img":{"frame":{"x":1341,"y":1771,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":50},"sourceSize":{"w":64,"h":64}},"crosshair.img":{"frame":{"x":1383,"y":1991,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"crown.img":{"frame":{"x":490,"y":427,"w":27,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":23},"sourceSize":{"w":32,"h":32}},"cupcake.img":{"frame":{"x":181,"y":1602,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"danger.img":{"frame":{"x":593,"y":1556,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"dc.img":{"frame":{"x":133,"y":1733,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"donut.img":{"frame":{"x":329,"y":1274,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"dot.img":{"frame":{"x":457,"y":856,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":16,"h":16},"sourceSize":{"w":18,"h":18}},"down.img":{"frame":{"x":1076,"y":649,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"egg.img":{"frame":{"x":336,"y":1468,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"eggplant.img":{"frame":{"x":1131,"y":1871,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"emote-circle-outer.img":{"frame":{"x":2,"y":257,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"emote-medical-healthkit.img":{"frame":{"x":502,"y":1890,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"emote.img":{"frame":{"x":239,"y":1578,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"eye.img":{"frame":{"x":242,"y":1019,"w":64,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":64,"h":41},"sourceSize":{"w":64,"h":64}},"face-alien.img":{"frame":{"x":1159,"y":203,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-angel-treat.img":{"frame":{"x":668,"y":287,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-angry.img":{"frame":{"x":1173,"y":136,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-bandaged.img":{"frame":{"x":1186,"y":2,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-dab.img":{"frame":{"x":242,"y":966,"w":72,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":72,"h":49},"sourceSize":{"w":72,"h":72}},"face-disappoint.img":{"frame":{"x":1186,"y":68,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-happy.img":{"frame":{"x":2,"y":1433,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-headshot.img":{"frame":{"x":263,"y":324,"w":63,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":63,"h":44},"sourceSize":{"w":64,"h":64}},"face-heart.img":{"frame":{"x":2,"y":1499,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-imp-trick.img":{"frame":{"x":206,"y":1132,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-imp.img":{"frame":{"x":1101,"y":475,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"face-joy.img":{"frame":{"x":2,"y":1565,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-monocle.img":{"frame":{"x":2,"y":1631,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-picasso.img":{"frame":{"x":2,"y":1697,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"face-poo.img":{"frame":{"x":1110,"y":407,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"face-sad.img":{"frame":{"x":2,"y":1763,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sob.img":{"frame":{"x":67,"y":1697,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sunglass.img":{"frame":{"x":2,"y":1829,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-thinking.img":{"frame":{"x":129,"y":1147,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-upsidedown.img":{"frame":{"x":2,"y":1895,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"fish.img":{"frame":{"x":556,"y":810,"w":64,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":64,"h":46},"sourceSize":{"w":64,"h":64}},"flag-albania.img":{"frame":{"x":556,"y":860,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-algeria.img":{"frame":{"x":593,"y":928,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-argentina.img":{"frame":{"x":679,"y":73,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-australia.img":{"frame":{"x":683,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-austria.img":{"frame":{"x":679,"y":141,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-azerbaijan.img":{"frame":{"x":717,"y":209,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belarus.img":{"frame":{"x":747,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belgium.img":{"frame":{"x":751,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bolivia.img":{"frame":{"x":747,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":600,"y":634,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-brazil.img":{"frame":{"x":659,"y":565,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-canada.img":{"frame":{"x":693,"y":465,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-chile.img":{"frame":{"x":600,"y":702,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-china.img":{"frame":{"x":704,"y":355,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-colombia.img":{"frame":{"x":736,"y":277,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-croatia.img":{"frame":{"x":785,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-czech-republic.img":{"frame":{"x":815,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-denmark.img":{"frame":{"x":815,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-dominican-republic.img":{"frame":{"x":819,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ecuador.img":{"frame":{"x":887,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-egypt.img":{"frame":{"x":955,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-estonia.img":{"frame":{"x":883,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-finland.img":{"frame":{"x":951,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-france.img":{"frame":{"x":883,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-georgia.img":{"frame":{"x":951,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-germany.img":{"frame":{"x":624,"y":770,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-greece.img":{"frame":{"x":624,"y":838,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-guatemala.img":{"frame":{"x":661,"y":906,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-honduras.img":{"frame":{"x":668,"y":633,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hong-kong.img":{"frame":{"x":668,"y":701,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hungary.img":{"frame":{"x":727,"y":533,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-india.img":{"frame":{"x":761,"y":423,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-indonesia.img":{"frame":{"x":772,"y":345,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-israel.img":{"frame":{"x":804,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-italy.img":{"frame":{"x":853,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-japan.img":{"frame":{"x":921,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-kazakhstan.img":{"frame":{"x":692,"y":769,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-latvia.img":{"frame":{"x":692,"y":837,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lithuania.img":{"frame":{"x":729,"y":905,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-malaysia.img":{"frame":{"x":872,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-mexico.img":{"frame":{"x":940,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-moldova.img":{"frame":{"x":736,"y":601,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-morocco.img":{"frame":{"x":736,"y":669,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-netherlands.img":{"frame":{"x":795,"y":491,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-new-zealand.img":{"frame":{"x":829,"y":413,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-norway.img":{"frame":{"x":840,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-peru.img":{"frame":{"x":908,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-philippines.img":{"frame":{"x":897,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-portugal.img":{"frame":{"x":897,"y":478,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-republic-of-poland.img":{"frame":{"x":863,"y":546,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-romania.img":{"frame":{"x":931,"y":546,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-russia.img":{"frame":{"x":760,"y":737,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-serbia.img":{"frame":{"x":760,"y":805,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-singapore.img":{"frame":{"x":804,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-slovakia.img":{"frame":{"x":797,"y":873,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-south-korea.img":{"frame":{"x":797,"y":941,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-spain.img":{"frame":{"x":872,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-sweden.img":{"frame":{"x":940,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-switzerland.img":{"frame":{"x":865,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-taiwan.img":{"frame":{"x":933,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-thailand.img":{"frame":{"x":828,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-trinidad-and-tobago.img":{"frame":{"x":896,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-turkey.img":{"frame":{"x":865,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ukraine.img":{"frame":{"x":933,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-arab-emirates.img":{"frame":{"x":865,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-kingdom.img":{"frame":{"x":865,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-states-of-america.img":{"frame":{"x":933,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-uruguay.img":{"frame":{"x":933,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-venezuela.img":{"frame":{"x":989,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-vietnam.img":{"frame":{"x":729,"y":973,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flex.img":{"frame":{"x":723,"y":1556,"w":54,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":54,"h":58},"sourceSize":{"w":64,"h":64}},"forest.img":{"frame":{"x":370,"y":1402,"w":60,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":60,"h":49},"sourceSize":{"w":64,"h":64}},"gas.img":{"frame":{"x":662,"y":1920,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"gg.img":{"frame":{"x":869,"y":1346,"w":57,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":14,"w":57,"h":36},"sourceSize":{"w":64,"h":64}},"ghost-base.img":{"frame":{"x":728,"y":1493,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"globe.img":{"frame":{"x":478,"y":603,"w":31,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":31},"sourceSize":{"w":32,"h":32}},"gun-awc-01.img":{"frame":{"x":403,"y":25,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-awc-02.img":{"frame":{"x":429,"y":136,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-bugle-01.img":{"frame":{"x":430,"y":454,"w":32,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":44,"w":32,"h":71},"sourceSize":{"w":48,"h":116}},"gun-deagle-01.img":{"frame":{"x":317,"y":514,"w":20,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":54,"w":20,"h":62},"sourceSize":{"w":28,"h":116}},"gun-dp28-top-01.img":{"frame":{"x":500,"y":2011,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":35},"sourceSize":{"w":35,"h":35}},"gun-famas-01.img":{"frame":{"x":263,"y":496,"w":18,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":21,"w":18,"h":83},"sourceSize":{"w":24,"h":104}},"gun-garand-01.img":{"frame":{"x":380,"y":170,"w":16,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":16,"h":106},"sourceSize":{"w":24,"h":116}},"gun-groza-01.img":{"frame":{"x":167,"y":756,"w":18,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":31,"w":18,"h":73},"sourceSize":{"w":24,"h":104}},"gun-grozas-01.img":{"frame":{"x":365,"y":388,"w":18,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":18,"h":94},"sourceSize":{"w":24,"h":104}},"gun-long-01.img":{"frame":{"x":453,"y":258,"w":14,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":92},"sourceSize":{"w":14,"h":92}},"gun-m249-bot-01.img":{"frame":{"x":70,"y":1190,"w":36,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":20},"sourceSize":{"w":36,"h":20}},"gun-m249-top-01.img":{"frame":{"x":403,"y":142,"w":18,"h":107},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":18,"h":107},"sourceSize":{"w":28,"h":116}},"gun-m4a1-01.img":{"frame":{"x":387,"y":388,"w":21,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":21,"h":93},"sourceSize":{"w":24,"h":98}},"gun-med-01.img":{"frame":{"x":553,"y":1126,"w":14,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":62},"sourceSize":{"w":14,"h":62}},"gun-mp220-01.img":{"frame":{"x":965,"y":410,"w":19,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":64},"sourceSize":{"w":20,"h":64}},"gun-ots38-01.img":{"frame":{"x":369,"y":1587,"w":17,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":66,"w":17,"h":50},"sourceSize":{"w":28,"h":116}},"gun-p30l-01.img":{"frame":{"x":639,"y":1114,"w":15,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":56,"w":15,"h":60},"sourceSize":{"w":28,"h":116}},"gun-pkp-bot-01.img":{"frame":{"x":1032,"y":783,"w":38,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":22},"sourceSize":{"w":38,"h":22}},"gun-pkp-top-01.img":{"frame":{"x":309,"y":388,"w":17,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":20,"w":17,"h":96},"sourceSize":{"w":28,"h":116}},"gun-potato-cannon-01.img":{"frame":{"x":468,"y":2,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-potato-smg-01.img":{"frame":{"x":400,"y":253,"w":49,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":49,"h":105},"sourceSize":{"w":88,"h":124}},"gun-potato-smg-top-01.img":{"frame":{"x":1049,"y":1091,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":32,"h":32},"sourceSize":{"w":40,"h":40}},"gun-qbb97-bot-01.img":{"frame":{"x":381,"y":638,"w":30,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":14},"sourceSize":{"w":32,"h":16}},"gun-saiga-01.img":{"frame":{"x":330,"y":423,"w":20,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":20,"h":87},"sourceSize":{"w":24,"h":98}},"gun-scarssr-01.img":{"frame":{"x":468,"y":130,"w":30,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":124},"sourceSize":{"w":30,"h":124}},"gun-scorpion-01.img":{"frame":{"x":286,"y":388,"w":19,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":19,"h":99},"sourceSize":{"w":24,"h":104}},"gun-short-01.img":{"frame":{"x":586,"y":171,"w":14,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":48},"sourceSize":{"w":14,"h":48}},"gun-usas-01.img":{"frame":{"x":371,"y":280,"w":20,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":12,"w":20,"h":104},"sourceSize":{"w":28,"h":116}},"gun-vss-01.img":{"frame":{"x":263,"y":388,"w":19,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":19,"h":104},"sourceSize":{"w":24,"h":104}},"hamburger.img":{"frame":{"x":154,"y":1023,"w":64,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":52},"sourceSize":{"w":64,"h":64}},"hatchet.img":{"frame":{"x":182,"y":1579,"w":22,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":22,"h":19},"sourceSize":{"w":24,"h":24}},"heart.img":{"frame":{"x":2,"y":1961,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"hide.img":{"frame":{"x":70,"y":1065,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"ice-cream.img":{"frame":{"x":182,"y":1514,"w":33,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":33,"h":61},"sourceSize":{"w":64,"h":64}},"indicator.img":{"frame":{"x":394,"y":1004,"w":45,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":45,"h":64},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":784,"y":1520,"w":52,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":16,"w":52,"h":31},"sourceSize":{"w":64,"h":64}},"leek.img":{"frame":{"x":1122,"y":1986,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"link.img":{"frame":{"x":2,"y":1073,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loadout-boost.img":{"frame":{"x":555,"y":1686,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-crosshair.img":{"frame":{"x":443,"y":1019,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-emote.img":{"frame":{"x":115,"y":1602,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-heal.img":{"frame":{"x":705,"y":1858,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-kill-icon.img":{"frame":{"x":389,"y":1455,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-melee.img":{"frame":{"x":271,"y":1513,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loadout-outfit.img":{"frame":{"x":703,"y":1735,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loadout-player-icon.img":{"frame":{"x":1010,"y":1696,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"lock.img":{"frame":{"x":723,"y":1618,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"logo-caduceus.img":{"frame":{"x":661,"y":974,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-chrysanthemum.img":{"frame":{"x":797,"y":1009,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-cloud.img":{"frame":{"x":593,"y":996,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-conch.img":{"frame":{"x":661,"y":1033,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-crossing.img":{"frame":{"x":729,"y":1041,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-egg.img":{"frame":{"x":522,"y":999,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hatchet.img":{"frame":{"x":590,"y":1055,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hydra.img":{"frame":{"x":658,"y":1092,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-meteor.img":{"frame":{"x":964,"y":750,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-storm.img":{"frame":{"x":1001,"y":682,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-surviv.img":{"frame":{"x":86,"y":1006,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-swine.img":{"frame":{"x":2,"y":1014,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-twins.img":{"frame":{"x":318,"y":1010,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loot-ammo-box.img":{"frame":{"x":976,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-chest-01.img":{"frame":{"x":571,"y":1177,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-02.img":{"frame":{"x":433,"y":1518,"w":38,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":2,"w":38,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-03.img":{"frame":{"x":595,"y":1749,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-circle-outer-01.img":{"frame":{"x":229,"y":674,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-02.img":{"frame":{"x":231,"y":750,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-03.img":{"frame":{"x":188,"y":833,"w":73,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":73,"h":63},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-04.img":{"frame":{"x":383,"y":806,"w":70,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":66},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-05.img":{"frame":{"x":305,"y":580,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-06.img":{"frame":{"x":354,"y":486,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-helmet-01.img":{"frame":{"x":1059,"y":1551,"w":56,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":56,"h":51},"sourceSize":{"w":64,"h":64}},"loot-helmet-02.img":{"frame":{"x":795,"y":559,"w":59,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":38},"sourceSize":{"w":64,"h":64}},"loot-helmet-03.img":{"frame":{"x":396,"y":1221,"w":56,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":56,"h":43},"sourceSize":{"w":64,"h":64}},"loot-medical-bandage.img":{"frame":{"x":662,"y":1982,"w":53,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":53,"h":58},"sourceSize":{"w":64,"h":64}},"loot-medical-healthkit.img":{"frame":{"x":617,"y":1677,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-heart.img":{"frame":{"x":406,"y":1650,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-pill.img":{"frame":{"x":547,"y":1946,"w":59,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":9,"w":59,"h":45},"sourceSize":{"w":64,"h":64}},"loot-medical-soda.img":{"frame":{"x":775,"y":1798,"w":30,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":30,"h":55},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-rugged.img":{"frame":{"x":863,"y":481,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":561,"y":1377,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bonesaw-healer.img":{"frame":{"x":71,"y":763,"w":30,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":5,"w":30,"h":77},"sourceSize":{"w":84,"h":84}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":105,"y":763,"w":27,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":11,"w":27,"h":77},"sourceSize":{"w":96,"h":96}},"loot-melee-bowie-frontier.img":{"frame":{"x":561,"y":1440,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-vintage.img":{"frame":{"x":566,"y":1305,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-crowbar-recon.img":{"frame":{"x":265,"y":826,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-crowbar-scout.img":{"frame":{"x":541,"y":427,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-fireaxe.img":{"frame":{"x":109,"y":844,"w":75,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":75,"h":38},"sourceSize":{"w":76,"h":38}},"loot-melee-hook-silver.img":{"frame":{"x":473,"y":1193,"w":21,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":12,"w":21,"h":39},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-burnished.img":{"frame":{"x":287,"y":826,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-rugged.img":{"frame":{"x":719,"y":1982,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-drowned.img":{"frame":{"x":506,"y":327,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-prismatic.img":{"frame":{"x":580,"y":294,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-rugged.img":{"frame":{"x":374,"y":2023,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":457,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-orchid.img":{"frame":{"x":2,"y":480,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-rusted.img":{"frame":{"x":263,"y":170,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana.img":{"frame":{"x":257,"y":193,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-knuckles-heroic.img":{"frame":{"x":634,"y":465,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-rusted.img":{"frame":{"x":25,"y":892,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-kukri-sniper.img":{"frame":{"x":588,"y":2,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-trad.img":{"frame":{"x":86,"y":892,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-machete-taiga.img":{"frame":{"x":531,"y":2,"w":22,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":22,"h":82},"sourceSize":{"w":84,"h":84}},"loot-melee-naginata.img":{"frame":{"x":257,"y":2,"w":172,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":172,"h":19},"sourceSize":{"w":175,"h":27}},"loot-melee-pan-black-side.img":{"frame":{"x":455,"y":136,"w":9,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":9,"h":56},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black.img":{"frame":{"x":547,"y":1995,"w":59,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":59,"h":43},"sourceSize":{"w":64,"h":64}},"loot-melee-sledgehammer.img":{"frame":{"x":502,"y":223,"w":74,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":29},"sourceSize":{"w":74,"h":29}},"loot-melee-spade-assault.img":{"frame":{"x":136,"y":763,"w":27,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":27,"h":75},"sourceSize":{"w":80,"h":80}},"loot-melee-stonehammer.img":{"frame":{"x":86,"y":974,"w":74,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":28},"sourceSize":{"w":74,"h":30}},"loot-melee-warhammer-tank.img":{"frame":{"x":2,"y":388,"w":127,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":127,"h":65},"sourceSize":{"w":132,"h":76}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":164,"y":961,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-melee-woodaxe.img":{"frame":{"x":164,"y":992,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-pack-00.img":{"frame":{"x":583,"y":1368,"w":45,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":2,"w":45,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-01.img":{"frame":{"x":724,"y":1920,"w":47,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":47,"h":58},"sourceSize":{"w":64,"h":64}},"loot-pack-02.img":{"frame":{"x":591,"y":1305,"w":44,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":44,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-03.img":{"frame":{"x":908,"y":1447,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-aoe-heal.img":{"frame":{"x":2,"y":1196,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-45.img":{"frame":{"x":498,"y":1193,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-9mm.img":{"frame":{"x":453,"y":1450,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-assault.img":{"frame":{"x":310,"y":1923,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-broken-arrow.img":{"frame":{"x":952,"y":1824,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-chambered.img":{"frame":{"x":310,"y":1979,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-endless-ammo.img":{"frame":{"x":1321,"y":1886,"w":51,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":51,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-explosive.img":{"frame":{"x":1063,"y":1755,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-fabricate.img":{"frame":{"x":627,"y":1241,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-field-medic.img":{"frame":{"x":961,"y":1884,"w":49,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":49,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-final-bugle.img":{"frame":{"x":929,"y":1386,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-firepower.img":{"frame":{"x":69,"y":1214,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-flak-jacket.img":{"frame":{"x":1235,"y":1719,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-gotw.img":{"frame":{"x":965,"y":478,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-halloween-mystery.img":{"frame":{"x":356,"y":1832,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-hotw.img":{"frame":{"x":190,"y":1732,"w":53,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":53,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-hunted.img":{"frame":{"x":247,"y":1732,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-inspiration.img":{"frame":{"x":767,"y":1857,"w":57,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":57,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-leadership.img":{"frame":{"x":1008,"y":274,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-martyrdom.img":{"frame":{"x":1122,"y":1745,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"loot-perk-rare-potato.img":{"frame":{"x":249,"y":1643,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger.img":{"frame":{"x":1119,"y":1503,"w":54,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":54,"h":50},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger_adv.img":{"frame":{"x":195,"y":1338,"w":59,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":37},"sourceSize":{"w":64,"h":64}},"loot-perk-self-revive.img":{"frame":{"x":2,"y":1263,"w":63,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":15,"w":63,"h":33},"sourceSize":{"w":64,"h":64}},"loot-perk-small-arms.img":{"frame":{"x":1070,"y":1686,"w":53,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":53,"h":55},"sourceSize":{"w":64,"h":64}},"loot-perk-splinter.img":{"frame":{"x":134,"y":1448,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-steelskin.img":{"frame":{"x":735,"y":1982,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-takedown.img":{"frame":{"x":1179,"y":1980,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-targeting.img":{"frame":{"x":192,"y":1382,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-12g.img":{"frame":{"x":380,"y":1763,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-556.img":{"frame":{"x":442,"y":1706,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-762.img":{"frame":{"x":470,"y":1582,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-9mm.img":{"frame":{"x":470,"y":1638,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-super.img":{"frame":{"x":136,"y":1266,"w":63,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":63,"h":45},"sourceSize":{"w":64,"h":64}},"loot-perk-tree-climbing.img":{"frame":{"x":1400,"y":1938,"w":47,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-chatty.img":{"frame":{"x":1014,"y":1873,"w":55,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":55,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-drain.img":{"frame":{"x":565,"y":1885,"w":59,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":11,"w":59,"h":41},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-m9.img":{"frame":{"x":475,"y":1506,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-nothing.img":{"frame":{"x":1176,"y":1800,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-size.img":{"frame":{"x":1188,"y":1857,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-turkey_shoot.img":{"frame":{"x":1122,"y":1442,"w":51,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":51,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-windwalk.img":{"frame":{"x":635,"y":1178,"w":43,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":43,"h":59},"sourceSize":{"w":64,"h":64}},"loot-scope-00.img":{"frame":{"x":988,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-01.img":{"frame":{"x":999,"y":543,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-02.img":{"frame":{"x":1044,"y":339,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-03.img":{"frame":{"x":1008,"y":611,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-04.img":{"frame":{"x":222,"y":1064,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-shirt-01.img":{"frame":{"x":775,"y":1919,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitBase.img":{"frame":{"x":780,"y":1979,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCamo.img":{"frame":{"x":751,"y":1618,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":781,"y":1555,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":765,"y":1678,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":813,"y":1615,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":775,"y":1738,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":827,"y":1675,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDev.img":{"frame":{"x":828,"y":1798,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitHeaven.img":{"frame":{"x":828,"y":1858,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":837,"y":1918,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitLumber.img":{"frame":{"x":837,"y":1735,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitMod.img":{"frame":{"x":842,"y":1978,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParma.img":{"frame":{"x":890,"y":1795,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":890,"y":1855,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRed.img":{"frame":{"x":899,"y":1915,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":904,"y":1975,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":747,"y":1340,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitTurkey.img":{"frame":{"x":763,"y":1266,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWheat.img":{"frame":{"x":747,"y":1400,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWhite.img":{"frame":{"x":784,"y":1460,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWoodland.img":{"frame":{"x":843,"y":1520,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag-egg.img":{"frame":{"x":1235,"y":1914,"w":47,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":5,"w":47,"h":53},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag.img":{"frame":{"x":1333,"y":1831,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"loot-throwable-mirv.img":{"frame":{"x":966,"y":1944,"w":41,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":41,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-potato.img":{"frame":{"x":1245,"y":1834,"w":46,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":46,"h":52},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke-egg.img":{"frame":{"x":964,"y":1447,"w":41,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":41,"h":57},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke.img":{"frame":{"x":298,"y":1643,"w":42,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":42,"h":61},"sourceSize":{"w":64,"h":64}},"loot-throwable-snowball.img":{"frame":{"x":991,"y":1323,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"loot-throwable-strobe.img":{"frame":{"x":1176,"y":1557,"w":52,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":52,"h":44},"sourceSize":{"w":64,"h":64}},"loot-weapon-ak.img":{"frame":{"x":456,"y":1249,"w":51,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":51,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-an94.img":{"frame":{"x":68,"y":1763,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-awc.img":{"frame":{"x":304,"y":1577,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-bar.img":{"frame":{"x":69,"y":1279,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-blr.img":{"frame":{"x":875,"y":1580,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-bugle.img":{"frame":{"x":254,"y":1797,"w":61,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":61,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45-dual.img":{"frame":{"x":2,"y":1300,"w":60,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45.img":{"frame":{"x":456,"y":1313,"w":48,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle-dual.img":{"frame":{"x":138,"y":1079,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle.img":{"frame":{"x":967,"y":1508,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-dp28.img":{"frame":{"x":203,"y":1271,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-famas.img":{"frame":{"x":597,"y":1812,"w":56,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-fists.img":{"frame":{"x":943,"y":1203,"w":37,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":37,"h":39},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":70,"y":1122,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun.img":{"frame":{"x":889,"y":1640,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-garand.img":{"frame":{"x":925,"y":1252,"w":56,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock-dual.img":{"frame":{"x":312,"y":1708,"w":61,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":61,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock.img":{"frame":{"x":1071,"y":1813,"w":45,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":4,"w":45,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-groza.img":{"frame":{"x":1210,"y":1605,"w":52,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":52,"h":50},"sourceSize":{"w":64,"h":64}},"loot-weapon-grozas.img":{"frame":{"x":264,"y":1271,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-hk416.img":{"frame":{"x":586,"y":1431,"w":53,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":53,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-l86.img":{"frame":{"x":498,"y":1377,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1014.img":{"frame":{"x":136,"y":1315,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1100.img":{"frame":{"x":632,"y":1368,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911-dual.img":{"frame":{"x":2,"y":1132,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911.img":{"frame":{"x":508,"y":1313,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1a1.img":{"frame":{"x":68,"y":1829,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m249.img":{"frame":{"x":344,"y":1641,"w":58,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m39.img":{"frame":{"x":298,"y":1858,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m4a1.img":{"frame":{"x":66,"y":1344,"w":58,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m870.img":{"frame":{"x":602,"y":1494,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-cursed.img":{"frame":{"x":511,"y":1249,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-dual.img":{"frame":{"x":1033,"y":478,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9.img":{"frame":{"x":643,"y":1431,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r-dual.img":{"frame":{"x":1067,"y":541,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r.img":{"frame":{"x":1056,"y":407,"w":50,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":50,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-mac10.img":{"frame":{"x":1286,"y":1775,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-weapon-mk12.img":{"frame":{"x":319,"y":1767,"w":57,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-mkg45.img":{"frame":{"x":68,"y":1895,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-model94.img":{"frame":{"x":656,"y":1556,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"loot-weapon-mosin.img":{"frame":{"x":665,"y":1494,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp220.img":{"frame":{"x":930,"y":1313,"w":57,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":53},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp5.img":{"frame":{"x":985,"y":1370,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38-dual.img":{"frame":{"x":1019,"y":70,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38.img":{"frame":{"x":1009,"y":1431,"w":45,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38-dual.img":{"frame":{"x":290,"y":1069,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38.img":{"frame":{"x":517,"y":1441,"w":40,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":40,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l-dual.img":{"frame":{"x":68,"y":1961,"w":62,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":62,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l.img":{"frame":{"x":1011,"y":1944,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-pkp.img":{"frame":{"x":129,"y":1763,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-cannon.img":{"frame":{"x":258,"y":1338,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-smg.img":{"frame":{"x":129,"y":1829,"w":55,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":55,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-qbb97.img":{"frame":{"x":564,"y":1241,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-saiga.img":{"frame":{"x":130,"y":1895,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scar.img":{"frame":{"x":899,"y":1702,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scarssr.img":{"frame":{"x":188,"y":1829,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-scorpion.img":{"frame":{"x":134,"y":1961,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scout.img":{"frame":{"x":660,"y":1614,"w":59,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-spas12.img":{"frame":{"x":911,"y":1022,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-sv98.img":{"frame":{"x":374,"y":1896,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-svd.img":{"frame":{"x":1023,"y":2,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ump9.img":{"frame":{"x":639,"y":1304,"w":57,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":57,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-usas.img":{"frame":{"x":414,"y":1819,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector.img":{"frame":{"x":1058,"y":1383,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector45.img":{"frame":{"x":647,"y":1733,"w":52,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-vss.img":{"frame":{"x":1082,"y":2,"w":54,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":63},"sourceSize":{"w":64,"h":64}},"loot-xp-bone-01.img":{"frame":{"x":1097,"y":1322,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-xp-book-01.img":{"frame":{"x":682,"y":1151,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-02.img":{"frame":{"x":690,"y":1214,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-03.img":{"frame":{"x":734,"y":1100,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-04.img":{"frame":{"x":610,"y":1930,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-05.img":{"frame":{"x":695,"y":1367,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-06.img":{"frame":{"x":695,"y":1430,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-compass-01.img":{"frame":{"x":1435,"y":1990,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":48,"h":48},"sourceSize":{"w":64,"h":64}},"loot-xp-donut-01.img":{"frame":{"x":1094,"y":1606,"w":55,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":55},"sourceSize":{"w":64,"h":64}},"loot-xp-glasses-01.img":{"frame":{"x":1237,"y":1659,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"loot-xp-stump-01.img":{"frame":{"x":700,"y":1277,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"mag-glass.img":{"frame":{"x":597,"y":1614,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"minimize.img":{"frame":{"x":1451,"y":1929,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":47},"sourceSize":{"w":64,"h":64}},"mobile-gas.img":{"frame":{"x":354,"y":423,"w":7,"h":6},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":7,"h":6},"sourceSize":{"w":7,"h":6}},"movement.img":{"frame":{"x":1179,"y":1722,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"news.img":{"frame":{"x":1012,"y":1815,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"ok.img":{"frame":{"x":551,"y":1822,"w":42,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":42,"h":59},"sourceSize":{"w":64,"h":64}},"pad.img":{"frame":{"x":263,"y":216,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":104,"h":104},"sourceSize":{"w":104,"h":104}},"part-airdrop-01.img":{"frame":{"x":1387,"y":1825,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01x.img":{"frame":{"x":1424,"y":1877,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-02.img":{"frame":{"x":228,"y":514,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-02x.img":{"frame":{"x":2,"y":846,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-03.img":{"frame":{"x":2,"y":930,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"part-airdrop-04.img":{"frame":{"x":346,"y":1069,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"part-aura-circle-01.img":{"frame":{"x":257,"y":25,"w":142,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":141},"sourceSize":{"w":144,"h":144}},"part-blossom-01.img":{"frame":{"x":1066,"y":1987,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-02.img":{"frame":{"x":1120,"y":1813,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-03.img":{"frame":{"x":928,"y":1083,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-blossom-04.img":{"frame":{"x":963,"y":1022,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-book-01.img":{"frame":{"x":449,"y":876,"w":52,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":52,"h":69},"sourceSize":{"w":72,"h":72}},"part-boost-basic.img":{"frame":{"x":742,"y":1163,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"part-boost-naturalize.img":{"frame":{"x":194,"y":1960,"w":46,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":62},"sourceSize":{"w":64,"h":64}},"part-boost-shuriken.img":{"frame":{"x":934,"y":1640,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"part-boost-star.img":{"frame":{"x":786,"y":1100,"w":59,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":57},"sourceSize":{"w":64,"h":64}},"part-cloth-01.img":{"frame":{"x":1039,"y":859,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"part-feather-01.img":{"frame":{"x":374,"y":1959,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-feather-02.img":{"frame":{"x":438,"y":1883,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-flare-01.img":{"frame":{"x":1001,"y":809,"w":46,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":46,"h":46},"sourceSize":{"w":50,"h":50}},"part-frag-burst-01.img":{"frame":{"x":1078,"y":721,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-02.img":{"frame":{"x":1078,"y":758,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-03.img":{"frame":{"x":624,"y":906,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"part-frag-lever-01.img":{"frame":{"x":2,"y":2026,"w":24,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":22,"w":24,"h":20},"sourceSize":{"w":64,"h":64}},"part-frag-pin-01.img":{"frame":{"x":336,"y":1532,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"part-heal-basic.img":{"frame":{"x":804,"y":1161,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-heart.img":{"frame":{"x":849,"y":1068,"w":58,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":58,"h":57},"sourceSize":{"w":64,"h":64}},"part-heal-moon.img":{"frame":{"x":809,"y":1326,"w":56,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-tomoe.img":{"frame":{"x":315,"y":1403,"w":51,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":51,"h":61},"sourceSize":{"w":64,"h":64}},"part-leaf-01.img":{"frame":{"x":377,"y":1706,"w":61,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":61,"h":53},"sourceSize":{"w":64,"h":64}},"part-leaf-01sv.img":{"frame":{"x":1073,"y":1872,"w":54,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":52},"sourceSize":{"w":64,"h":64}},"part-leaf-02.img":{"frame":{"x":1120,"y":1928,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"part-leaf-03.img":{"frame":{"x":809,"y":1388,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-04.img":{"frame":{"x":846,"y":1450,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-05.img":{"frame":{"x":905,"y":1512,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-06.img":{"frame":{"x":937,"y":1574,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-log-01.img":{"frame":{"x":232,"y":1894,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-note-01.img":{"frame":{"x":1140,"y":2,"w":42,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":42,"h":63},"sourceSize":{"w":64,"h":64}},"part-note-02.img":{"frame":{"x":377,"y":1072,"w":44,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":64},"sourceSize":{"w":64,"h":64}},"part-panel-01.img":{"frame":{"x":466,"y":454,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plank-01.img":{"frame":{"x":490,"y":352,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plate-01.img":{"frame":{"x":449,"y":949,"w":69,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":69,"h":66},"sourceSize":{"w":72,"h":72}},"part-pot-01.img":{"frame":{"x":505,"y":856,"w":47,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":47,"h":68},"sourceSize":{"w":72,"h":72}},"part-potato-01.img":{"frame":{"x":1049,"y":1054,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-potato-02.img":{"frame":{"x":438,"y":1947,"w":47,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":47,"h":60},"sourceSize":{"w":64,"h":64}},"part-pulse-01.img":{"frame":{"x":1062,"y":1017,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-pumpkin-01.img":{"frame":{"x":1236,"y":1971,"w":53,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":53,"h":47},"sourceSize":{"w":64,"h":64}},"part-shell-01.img":{"frame":{"x":636,"y":294,"w":28,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":66},"sourceSize":{"w":28,"h":66}},"part-shell-02.img":{"frame":{"x":330,"y":324,"w":31,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":95},"sourceSize":{"w":31,"h":95}},"part-shell-03.img":{"frame":{"x":471,"y":258,"w":31,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":90},"sourceSize":{"w":31,"h":90}},"part-shell-04.img":{"frame":{"x":557,"y":2,"w":27,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":82},"sourceSize":{"w":27,"h":82}},"part-shell-05.img":{"frame":{"x":433,"y":2,"w":31,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":130},"sourceSize":{"w":31,"h":130}},"part-smoke-01.img":{"frame":{"x":1024,"y":1017,"w":34,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":33},"sourceSize":{"w":36,"h":36}},"part-smoke-02.img":{"frame":{"x":132,"y":257,"w":127,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":127,"h":124},"sourceSize":{"w":128,"h":128}},"part-smoke-03.img":{"frame":{"x":133,"y":385,"w":126,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":125},"sourceSize":{"w":128,"h":128}},"part-snow-01.img":{"frame":{"x":1039,"y":979,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-spark-01.img":{"frame":{"x":825,"y":1223,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-spark-02.img":{"frame":{"x":866,"y":1129,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-splat-01.img":{"frame":{"x":1112,"y":338,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":62},"sourceSize":{"w":72,"h":72}},"part-splat-02.img":{"frame":{"x":651,"y":218,"w":62,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":62,"h":65},"sourceSize":{"w":72,"h":72}},"part-splat-03.img":{"frame":{"x":323,"y":1338,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":61,"h":60},"sourceSize":{"w":72,"h":72}},"part-strobe-01.img":{"frame":{"x":1077,"y":973,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-takedown-01.img":{"frame":{"x":1127,"y":271,"w":63,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":63,"h":51},"sourceSize":{"w":64,"h":64}},"part-wedge-01.img":{"frame":{"x":286,"y":491,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"part-woodchip-01.img":{"frame":{"x":443,"y":638,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"pass.img":{"frame":{"x":486,"y":1126,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"pilgrim-hat.img":{"frame":{"x":388,"y":1338,"w":60,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":60,"h":44},"sourceSize":{"w":64,"h":64}},"pineapple.img":{"frame":{"x":996,"y":1636,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":0,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"ping-border.img":{"frame":{"x":229,"y":598,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"ping-indicator.img":{"frame":{"x":704,"y":423,"w":44,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":30,"w":44,"h":34},"sourceSize":{"w":64,"h":64}},"ping-map-airdrop.img":{"frame":{"x":610,"y":1993,"w":37,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":5,"w":37,"h":53},"sourceSize":{"w":64,"h":64}},"ping-map-airstrike.img":{"frame":{"x":828,"y":818,"w":22,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":22,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-coming.img":{"frame":{"x":511,"y":1058,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":64},"sourceSize":{"w":64,"h":128}},"ping-map-danger.img":{"frame":{"x":828,"y":682,"w":20,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":20,"h":64},"sourceSize":{"w":64,"h":64}},"ping-map-help.img":{"frame":{"x":1293,"y":1946,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":251,"h":251},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":251,"h":251},"sourceSize":{"w":256,"h":256}},"ping-map-unlock.img":{"frame":{"x":444,"y":1762,"w":30,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":12,"w":30,"h":39},"sourceSize":{"w":64,"h":64}},"ping-map-woods-king.img":{"frame":{"x":1293,"y":2001,"w":46,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":11,"w":46,"h":42},"sourceSize":{"w":64,"h":64}},"ping-part-circle-auto-highlight.img":{"frame":{"x":285,"y":580,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto-outer.img":{"frame":{"x":412,"y":454,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto.img":{"frame":{"x":341,"y":562,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-highlight.img":{"frame":{"x":356,"y":1896,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-circle.img":{"frame":{"x":1023,"y":1551,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":319,"y":1832,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-eighth.img":{"frame":{"x":700,"y":1340,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-quarter-highlight.img":{"frame":{"x":430,"y":529,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":565,"y":398,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-team-airdrop.img":{"frame":{"x":272,"y":1137,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-airstrike.img":{"frame":{"x":195,"y":1199,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-coming.img":{"frame":{"x":339,"y":1140,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-danger.img":{"frame":{"x":262,"y":1204,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-help.img":{"frame":{"x":406,"y":1154,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-unlock.img":{"frame":{"x":329,"y":1207,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"player-armor-base-01.img":{"frame":{"x":307,"y":732,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-base-01.img":{"frame":{"x":522,"y":928,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-02.img":{"frame":{"x":517,"y":603,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitDC.img":{"frame":{"x":552,"y":500,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitHeaven.img":{"frame":{"x":563,"y":427,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitLumber.img":{"frame":{"x":565,"y":327,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitParmaPrestige.img":{"frame":{"x":580,"y":223,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitSpetsnaz.img":{"frame":{"x":608,"y":84,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitTurkey.img":{"frame":{"x":612,"y":2,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitWheat.img":{"frame":{"x":529,"y":674,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-bullet-trail-02.img":{"frame":{"x":134,"y":1514,"w":17,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":18},"sourceSize":{"w":18,"h":18}},"player-bullet-trail-03.img":{"frame":{"x":315,"y":1468,"w":17,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":27},"sourceSize":{"w":18,"h":28}},"player-circle-base-01.img":{"frame":{"x":367,"y":656,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-circle-base-02.img":{"frame":{"x":307,"y":808,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-emote.img":{"frame":{"x":1034,"y":1627,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-feet-01.img":{"frame":{"x":70,"y":1014,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-feet-02.img":{"frame":{"x":206,"y":1079,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-gui.img":{"frame":{"x":1023,"y":1492,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-hands-01.img":{"frame":{"x":1051,"y":809,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-hands-02.img":{"frame":{"x":1001,"y":939,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-helmet-bugler.img":{"frame":{"x":1019,"y":137,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-forest.img":{"frame":{"x":412,"y":362,"w":74,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":88},"sourceSize":{"w":88,"h":88}},"player-helmet-grenadier.img":{"frame":{"x":1057,"y":204,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-01.img":{"frame":{"x":457,"y":712,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-02.img":{"frame":{"x":457,"y":784,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-leader.img":{"frame":{"x":1070,"y":137,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-lieutenant.img":{"frame":{"x":1076,"y":271,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-marksman.img":{"frame":{"x":1108,"y":204,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-medic.img":{"frame":{"x":1084,"y":69,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-moon.img":{"frame":{"x":305,"y":656,"w":58,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":58,"h":72},"sourceSize":{"w":88,"h":88}},"player-helmet-potato.img":{"frame":{"x":1121,"y":136,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-recon.img":{"frame":{"x":1135,"y":69,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-king-woods.img":{"frame":{"x":506,"y":256,"w":70,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":70,"h":67},"sourceSize":{"w":74,"h":74}},"player-map-downed.img":{"frame":{"x":254,"y":1858,"w":36,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":36,"h":31},"sourceSize":{"w":36,"h":36}},"player-map-inner.img":{"frame":{"x":825,"y":1285,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-map-outer.img":{"frame":{"x":1076,"y":609,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-mash-01.img":{"frame":{"x":502,"y":177,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-mash-02.img":{"frame":{"x":318,"y":966,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-mash-03.img":{"frame":{"x":151,"y":674,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-medic.img":{"frame":{"x":434,"y":1386,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":60,"h":60},"sourceSize":{"w":74,"h":74}},"player-patch-01.img":{"frame":{"x":438,"y":2011,"w":58,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":35},"sourceSize":{"w":80,"h":80}},"player-patch-02.img":{"frame":{"x":319,"y":928,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-blue.img":{"frame":{"x":636,"y":364,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":25,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-red.img":{"frame":{"x":742,"y":1226,"w":58,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":22,"w":58,"h":36},"sourceSize":{"w":80,"h":80}},"player-ripple-01.img":{"frame":{"x":478,"y":529,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":71,"h":71}},"player-snow-01.img":{"frame":{"x":25,"y":846,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-snow-02.img":{"frame":{"x":319,"y":884,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-snow-03.img":{"frame":{"x":151,"y":715,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-star.img":{"frame":{"x":110,"y":886,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"player-the-hunted.img":{"frame":{"x":383,"y":732,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"player-visor-assault.img":{"frame":{"x":1290,"y":1715,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":18,"w":51,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-demo.img":{"frame":{"x":1347,"y":1991,"w":32,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":19,"w":32,"h":49},"sourceSize":{"w":88,"h":88}},"player-visor-healer.img":{"frame":{"x":1286,"y":1890,"w":31,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":18,"w":31,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-scout.img":{"frame":{"x":190,"y":1894,"w":38,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":38,"y":13,"w":38,"h":62},"sourceSize":{"w":88,"h":88}},"player-visor-sniper.img":{"frame":{"x":1066,"y":1929,"w":50,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":17,"w":50,"h":54},"sourceSize":{"w":88,"h":88}},"player-visor-tank.img":{"frame":{"x":1083,"y":1443,"w":35,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":16,"w":35,"h":56},"sourceSize":{"w":88,"h":88}},"player-wading-01.img":{"frame":{"x":2,"y":503,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":84,"h":84},"sourceSize":{"w":86,"h":86}},"police.img":{"frame":{"x":196,"y":1448,"w":50,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":61},"sourceSize":{"w":64,"h":64}},"potato.img":{"frame":{"x":395,"y":876,"w":50,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":50,"h":48},"sourceSize":{"w":64,"h":64}},"proj-bomb-iron-01.img":{"frame":{"x":571,"y":88,"w":33,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":0,"w":33,"h":79},"sourceSize":{"w":80,"h":80}},"proj-frag-nopin-01.img":{"frame":{"x":489,"y":1947,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-02.img":{"frame":{"x":478,"y":1762,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":506,"y":1694,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":502,"y":1826,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-01.img":{"frame":{"x":536,"y":1758,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-02.img":{"frame":{"x":534,"y":1562,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-part.img":{"frame":{"x":747,"y":1460,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"proj-martyrdom-01.img":{"frame":{"x":244,"y":1960,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"proj-mirv-mini-01.img":{"frame":{"x":1032,"y":741,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-mini-02.img":{"frame":{"x":1069,"y":679,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-nopin-nolever.img":{"frame":{"x":381,"y":562,"w":38,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":38,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-nopin.img":{"frame":{"x":423,"y":562,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-pin.img":{"frame":{"x":394,"y":928,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-potato-01.img":{"frame":{"x":1117,"y":1382,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-potato-02.img":{"frame":{"x":1012,"y":1755,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-smoke-nopin-nolever.img":{"frame":{"x":189,"y":756,"w":38,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":38,"h":73},"sourceSize":{"w":80,"h":80}},"proj-smoke-nopin.img":{"frame":{"x":71,"y":599,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-smoke-pin.img":{"frame":{"x":71,"y":681,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-snowball-01.img":{"frame":{"x":1127,"y":1665,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-snowball-02.img":{"frame":{"x":1153,"y":1606,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-strobe-armed.img":{"frame":{"x":608,"y":155,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-arming.img":{"frame":{"x":588,"y":571,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-unarmed.img":{"frame":{"x":242,"y":900,"w":73,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":12,"w":73,"h":62},"sourceSize":{"w":80,"h":80}},"proj-wedge-01.img":{"frame":{"x":500,"y":2,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"pumpkin-play.img":{"frame":{"x":736,"y":737,"w":20,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":20,"h":21},"sourceSize":{"w":24,"h":24}},"pumpkin.img":{"frame":{"x":871,"y":1386,"w":54,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":54,"h":57},"sourceSize":{"w":64,"h":64}},"question.img":{"frame":{"x":1295,"y":1831,"w":34,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":6,"w":34,"h":51},"sourceSize":{"w":64,"h":64}},"quit.img":{"frame":{"x":1001,"y":859,"w":34,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":34,"h":36},"sourceSize":{"w":64,"h":64}},"rainbow.img":{"frame":{"x":393,"y":1274,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"reload.img":{"frame":{"x":124,"y":1536,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"resume.img":{"frame":{"x":1083,"y":1503,"w":32,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":15,"w":32,"h":33},"sourceSize":{"w":64,"h":64}},"ribbon-blue.img":{"frame":{"x":1184,"y":1663,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"ribbon-red.img":{"frame":{"x":1233,"y":1778,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"role-assault.img":{"frame":{"x":502,"y":91,"w":65,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":82},"sourceSize":{"w":88,"h":88}},"role-demo.img":{"frame":{"x":90,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-healer.img":{"frame":{"x":2,"y":591,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-scout.img":{"frame":{"x":159,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-sniper.img":{"frame":{"x":2,"y":676,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-tank.img":{"frame":{"x":2,"y":761,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"salt.img":{"frame":{"x":68,"y":1411,"w":62,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":59},"sourceSize":{"w":64,"h":64}},"santa-hat.img":{"frame":{"x":999,"y":1569,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"skull-leader.img":{"frame":{"x":1487,"y":1980,"w":45,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":45,"h":47},"sourceSize":{"w":48,"h":48}},"skull-outlined.img":{"frame":{"x":843,"y":1580,"w":26,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":26,"h":30},"sourceSize":{"w":32,"h":32}},"skull-team.img":{"frame":{"x":552,"y":571,"w":24,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":28},"sourceSize":{"w":32,"h":32}},"skull.img":{"frame":{"x":406,"y":1587,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"sleepy.img":{"frame":{"x":68,"y":1474,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"snowflake.img":{"frame":{"x":425,"y":1087,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"snowman.img":{"frame":{"x":219,"y":1513,"w":48,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":61},"sourceSize":{"w":64,"h":64}},"star-blue.img":{"frame":{"x":623,"y":498,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star-red.img":{"frame":{"x":634,"y":398,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star.img":{"frame":{"x":151,"y":599,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"submit.img":{"frame":{"x":1041,"y":936,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"surviv.img":{"frame":{"x":250,"y":1448,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"tap.img":{"frame":{"x":188,"y":900,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"target.img":{"frame":{"x":713,"y":1795,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"teabag.img":{"frame":{"x":1119,"y":1557,"w":53,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":53,"h":45},"sourceSize":{"w":64,"h":64}},"thumbs-up.img":{"frame":{"x":68,"y":1536,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"timer-background.img":{"frame":{"x":1001,"y":899,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"timer.img":{"frame":{"x":571,"y":1114,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"tombstone.img":{"frame":{"x":189,"y":1667,"w":56,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":61},"sourceSize":{"w":64,"h":64}},"trash.img":{"frame":{"x":134,"y":1382,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"trunk.img":{"frame":{"x":1178,"y":1926,"w":53,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":53,"h":50},"sourceSize":{"w":64,"h":64}},"turkey-animal.img":{"frame":{"x":369,"y":1532,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"unlock.img":{"frame":{"x":628,"y":1875,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"whale.img":{"frame":{"x":539,"y":1505,"w":59,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":59,"h":47},"sourceSize":{"w":64,"h":64}}}}]')
  , vl = JSON.parse('[{"meta":{"image":"main-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":968,"y":1362,"w":200,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":157},"sourceSize":{"w":202,"h":158}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":910,"w":416,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":320},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2,"y":1905,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1586,"y":1095,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1425,"y":470,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":853,"y":182,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1241,"y":594,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":306,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":789,"y":1707,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":422,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":789,"y":1840,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1894,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":422,"y":910,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1234,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1676,"y":376,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":853,"y":594,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1894,"y":602,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":853,"y":470,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2,"y":1804,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":606,"y":1933,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1230,"y":1095,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1586,"y":1190,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1942,"y":1369,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1552,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":366,"y":1674,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":969,"y":1883,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1280,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1364,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":748,"y":1362,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":969,"y":1707,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1942,"y":1190,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":748,"y":1523,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1133,"y":1689,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":1301,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1676,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1677,"y":787,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":952,"y":1523,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":826,"y":1030,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1116,"y":1550,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1230,"y":1226,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1586,"y":1320,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1241,"y":787,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1448,"y":1550,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-complex-warehouse-floor-01.img":{"frame":{"x":538,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":2012,"y":2,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":572,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-planter-01.img":{"frame":{"x":230,"y":1905,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1942,"y":1525,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-03.img":{"frame":{"x":1938,"y":311,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-04.img":{"frame":{"x":311,"y":1804,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":311,"y":1858,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-01.img":{"frame":{"x":1852,"y":2,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-tree-07sp.img":{"frame":{"x":1894,"y":470,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08sp.img":{"frame":{"x":529,"y":1674,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}}}}]')
  , _l = [{
    meta: {
        image: "potato-0-50.png",
        size: {
            w: 1024,
            h: 1024
        },
        scale: .5
    },
    frames: {
        "map-building-shilo-ceiling-01.img": {
            frame: {
                x: 2,
                y: 2,
                w: 480,
                h: 384
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 480,
                h: 384
            },
            sourceSize: {
                w: 480,
                h: 384
            }
        },
        "map-building-shilo-floor-01.img": {
            frame: {
                x: 486,
                y: 2,
                w: 480,
                h: 384
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 480,
                h: 384
            },
            sourceSize: {
                w: 480,
                h: 384
            }
        },
        "map-egg-01.img": {
            frame: {
                x: 970,
                y: 2,
                w: 47,
                h: 61
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 0,
                w: 47,
                h: 61
            },
            sourceSize: {
                w: 62,
                h: 62
            }
        },
        "map-egg-02.img": {
            frame: {
                x: 970,
                y: 67,
                w: 47,
                h: 61
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 0,
                w: 47,
                h: 61
            },
            sourceSize: {
                w: 62,
                h: 62
            }
        },
        "map-egg-03.img": {
            frame: {
                x: 970,
                y: 132,
                w: 47,
                h: 61
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 0,
                w: 47,
                h: 61
            },
            sourceSize: {
                w: 62,
                h: 62
            }
        },
        "map-egg-04.img": {
            frame: {
                x: 970,
                y: 197,
                w: 47,
                h: 61
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 0,
                w: 47,
                h: 61
            },
            sourceSize: {
                w: 62,
                h: 62
            }
        },
        "map-egg-res-01.img": {
            frame: {
                x: 970,
                y: 262,
                w: 46,
                h: 44
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 3,
                w: 46,
                h: 44
            },
            sourceSize: {
                w: 50,
                h: 50
            }
        },
        "map-potato-01.img": {
            frame: {
                x: 970,
                y: 355,
                w: 36,
                h: 35
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 36,
                h: 35
            },
            sourceSize: {
                w: 36,
                h: 36
            }
        },
        "map-potato-02.img": {
            frame: {
                x: 2,
                y: 394,
                w: 36,
                h: 35
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 36,
                h: 35
            },
            sourceSize: {
                w: 36,
                h: 36
            }
        },
        "map-potato-03.img": {
            frame: {
                x: 2,
                y: 433,
                w: 36,
                h: 35
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 36,
                h: 35
            },
            sourceSize: {
                w: 36,
                h: 36
            }
        },
        "map-potato-res-01.img": {
            frame: {
                x: 970,
                y: 310,
                w: 42,
                h: 41
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 14,
                y: 18,
                w: 42,
                h: 41
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        }
    }
}]
  , Il = [{
    meta: {
        image: "savannah-0-50.png",
        size: {
            w: 1024,
            h: 1024
        },
        scale: .5
    },
    frames: {
        "map-brush-01sv.img": {
            frame: {
                x: 36,
                y: 260,
                w: 93,
                h: 92
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 2,
                w: 93,
                h: 92
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-brush-02sv.img": {
            frame: {
                x: 133,
                y: 260,
                w: 91,
                h: 92
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 91,
                h: 92
            },
            sourceSize: {
                w: 96,
                h: 96
            }
        },
        "map-brush-res-02sv.img": {
            frame: {
                x: 228,
                y: 312,
                w: 31,
                h: 31
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 8,
                y: 8,
                w: 31,
                h: 31
            },
            sourceSize: {
                w: 48,
                h: 48
            }
        },
        "map-building-perch-ceiling.img": {
            frame: {
                x: 759,
                y: 166,
                w: 181,
                h: 172
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 11,
                w: 181,
                h: 172
            },
            sourceSize: {
                w: 200,
                h: 192
            }
        },
        "map-building-perch-floor.img": {
            frame: {
                x: 759,
                y: 2,
                w: 200,
                h: 160
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 200,
                h: 160
            },
            sourceSize: {
                w: 200,
                h: 160
            }
        },
        "map-bunker-generic-ceiling-02.img": {
            frame: {
                x: 294,
                y: 259,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-bunker-generic-floor-03.img": {
            frame: {
                x: 378,
                y: 259,
                w: 80,
                h: 115
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 80,
                h: 115
            },
            sourceSize: {
                w: 80,
                h: 115
            }
        },
        "map-bush-01sv.img": {
            frame: {
                x: 682,
                y: 288,
                w: 70,
                h: 70
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 70,
                h: 70
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-bush-res-01sv.img": {
            frame: {
                x: 963,
                y: 134,
                w: 22,
                h: 17
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 25,
                y: 27,
                w: 22,
                h: 17
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-complex-warehouse-floor-01.img": {
            frame: {
                x: 989,
                y: 132,
                w: 30,
                h: 112
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 112
            },
            sourceSize: {
                w: 30,
                h: 112
            }
        },
        "map-complex-warehouse-floor-02.img": {
            frame: {
                x: 2,
                y: 2,
                w: 30,
                h: 264
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 264
            },
            sourceSize: {
                w: 30,
                h: 264
            }
        },
        "map-complex-warehouse-floor-03.img": {
            frame: {
                x: 944,
                y: 166,
                w: 30,
                h: 112
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 30,
                h: 112
            },
            sourceSize: {
                w: 30,
                h: 112
            }
        },
        "map-crate-21.img": {
            frame: {
                x: 682,
                y: 212,
                w: 72,
                h: 72
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 72,
                h: 72
            },
            sourceSize: {
                w: 72,
                h: 72
            }
        },
        "map-perch-res-01.img": {
            frame: {
                x: 2,
                y: 356,
                w: 88,
                h: 79
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 20,
                y: 24,
                w: 88,
                h: 79
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-propane-01.img": {
            frame: {
                x: 228,
                y: 260,
                w: 48,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 48,
                h: 48
            },
            sourceSize: {
                w: 48,
                h: 48
            }
        },
        "map-stone-07.img": {
            frame: {
                x: 294,
                y: 2,
                w: 252,
                h: 253
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 1,
                w: 252,
                h: 253
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-stone-res-07.img": {
            frame: {
                x: 550,
                y: 2,
                w: 205,
                h: 206
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 2,
                y: 2,
                w: 205,
                h: 206
            },
            sourceSize: {
                w: 210,
                h: 210
            }
        },
        "map-tree-03sv.img": {
            frame: {
                x: 550,
                y: 212,
                w: 128,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 0,
                y: 0,
                w: 128,
                h: 128
            },
            sourceSize: {
                w: 128,
                h: 128
            }
        },
        "map-tree-12.img": {
            frame: {
                x: 36,
                y: 2,
                w: 254,
                h: 254
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 1,
                w: 254,
                h: 254
            },
            sourceSize: {
                w: 256,
                h: 256
            }
        },
        "map-tree-res-12.img": {
            frame: {
                x: 978,
                y: 248,
                w: 39,
                h: 35
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 4,
                y: 6,
                w: 39,
                h: 35
            },
            sourceSize: {
                w: 48,
                h: 48
            }
        },
        "map-wall-03-grassy-res.img": {
            frame: {
                x: 280,
                y: 260,
                w: 10,
                h: 46
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 11,
                y: 1,
                w: 10,
                h: 46
            },
            sourceSize: {
                w: 32,
                h: 48
            }
        },
        "map-wall-03-grassy.img": {
            frame: {
                x: 1003,
                y: 2,
                w: 17,
                h: 48
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 7,
                y: 0,
                w: 17,
                h: 48
            },
            sourceSize: {
                w: 32,
                h: 48
            }
        },
        "map-wall-08-grassy-res.img": {
            frame: {
                x: 989,
                y: 2,
                w: 10,
                h: 126
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 11,
                y: 1,
                w: 10,
                h: 126
            },
            sourceSize: {
                w: 32,
                h: 128
            }
        },
        "map-wall-08-grassy.img": {
            frame: {
                x: 963,
                y: 2,
                w: 22,
                h: 128
            },
            rotated: !1,
            trimmed: !0,
            spriteSourceSize: {
                x: 1,
                y: 0,
                w: 22,
                h: 128
            },
            sourceSize: {
                w: 32,
                h: 128
            }
        }
    }
}]
  , Tl = JSON.parse('[{"meta":{"image":"shared-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-03.img":{"frame":{"x":701,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-barrel-04.img":{"frame":{"x":749,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-bookshelf-01.img":{"frame":{"x":930,"y":978,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bookshelf-02.img":{"frame":{"x":2,"y":1775,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bottle-01.img":{"frame":{"x":835,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-02.img":{"frame":{"x":855,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-03.img":{"frame":{"x":875,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-04.img":{"frame":{"x":895,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-05.img":{"frame":{"x":915,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-building-bank-floor-01.img":{"frame":{"x":1062,"y":615,"w":848,"h":401},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":848,"h":401},"sourceSize":{"w":848,"h":401}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":790,"w":800,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":544},"sourceSize":{"w":800,"h":544}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":806,"y":1020,"w":716,"h":796},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":716,"h":796},"sourceSize":{"w":716,"h":796}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":302,"y":1775,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":37},"sourceSize":{"w":74,"h":38}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":1338,"w":721,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":721,"h":433},"sourceSize":{"w":721,"h":433}},"map-building-container-floor-01.img":{"frame":{"x":1794,"y":1020,"w":90,"h":265},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":265},"sourceSize":{"w":90,"h":268}},"map-building-container-open-floor.img":{"frame":{"x":1914,"y":615,"w":90,"h":342},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":90,"h":342},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01b.img":{"frame":{"x":1914,"y":961,"w":81,"h":331},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":81,"h":331},"sourceSize":{"w":81,"h":332}},"map-building-hut-floor-02.img":{"frame":{"x":1978,"y":2,"w":65,"h":383},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":65,"h":383},"sourceSize":{"w":68,"h":384}},"map-building-mansion-floor-01b.img":{"frame":{"x":1062,"y":2,"w":912,"h":609},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":609},"sourceSize":{"w":913,"h":609}},"map-building-mansion-floor-01d.img":{"frame":{"x":1325,"y":1820,"w":544,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":544,"h":93},"sourceSize":{"w":545,"h":97}},"map-building-police-ceiling-01.img":{"frame":{"x":1526,"y":1564,"w":504,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":240},"sourceSize":{"w":504,"h":240}},"map-building-police-ceiling-02.img":{"frame":{"x":1526,"y":1020,"w":264,"h":540},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":264,"h":540},"sourceSize":{"w":264,"h":540}},"map-building-police-ceiling-03.img":{"frame":{"x":1794,"y":1296,"w":252,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":252,"h":240},"sourceSize":{"w":252,"h":240}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":1056,"h":784},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":784},"sourceSize":{"w":1056,"h":784}},"map-building-porch-01.img":{"frame":{"x":380,"y":1775,"w":64,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":32},"sourceSize":{"w":64,"h":32}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":806,"y":790,"w":248,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":248,"h":96},"sourceSize":{"w":248,"h":96}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":1820,"w":697,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":697,"h":192},"sourceSize":{"w":760,"h":216}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":703,"y":1820,"w":618,"h":205},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":13,"w":618,"h":205},"sourceSize":{"w":652,"h":232}},"map-bunker-conch-floor-01.img":{"frame":{"x":1671,"y":1917,"w":290,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":290,"h":126},"sourceSize":{"w":300,"h":128}},"map-club-bar-01.img":{"frame":{"x":2008,"y":681,"w":27,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":240},"sourceSize":{"w":27,"h":240}},"map-decal-club-02.img":{"frame":{"x":727,"y":1338,"w":50,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":50,"h":179},"sourceSize":{"w":52,"h":180}},"map-deposit-box-01.img":{"frame":{"x":1965,"y":2004,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-deposit-box-02.img":{"frame":{"x":218,"y":1775,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-door-02.img":{"frame":{"x":727,"y":1701,"w":40,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":112},"sourceSize":{"w":40,"h":112}},"map-door-03.img":{"frame":{"x":2028,"y":617,"w":16,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":56},"sourceSize":{"w":16,"h":56}},"map-gun-mount-01.img":{"frame":{"x":549,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-gun-mount-02.img":{"frame":{"x":448,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-03.img":{"frame":{"x":516,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-04.img":{"frame":{"x":584,"y":1775,"w":64,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":28},"sourceSize":{"w":64,"h":28}},"map-gun-mount-05.img":{"frame":{"x":625,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-piano-01.img":{"frame":{"x":806,"y":978,"w":120,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":37},"sourceSize":{"w":120,"h":37}},"map-pipes-03.img":{"frame":{"x":1325,"y":1917,"w":342,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":342,"h":118},"sourceSize":{"w":342,"h":118}},"map-pipes-04.img":{"frame":{"x":727,"y":1521,"w":44,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":176},"sourceSize":{"w":44,"h":176}},"map-pipes-05.img":{"frame":{"x":1889,"y":1808,"w":45,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":96},"sourceSize":{"w":45,"h":96}},"map-screen-01.img":{"frame":{"x":186,"y":2016,"w":128,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":24},"sourceSize":{"w":128,"h":24}},"map-screen-res-01.img":{"frame":{"x":652,"y":1775,"w":58,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":58,"h":29},"sourceSize":{"w":62,"h":29}},"map-snow-07.img":{"frame":{"x":806,"y":890,"w":248,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":248,"h":84},"sourceSize":{"w":256,"h":96}},"map-switch-01.img":{"frame":{"x":797,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-02.img":{"frame":{"x":935,"y":2029,"w":15,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":16},"sourceSize":{"w":15,"h":17}},"map-switch-03.img":{"frame":{"x":816,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-towelrack-01.img":{"frame":{"x":118,"y":1775,"w":96,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":96,"h":38},"sourceSize":{"w":96,"h":48}},"map-wall-01-rounded.img":{"frame":{"x":954,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-wall-02-5-rounded.img":{"frame":{"x":1888,"y":1248,"w":16,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":40},"sourceSize":{"w":16,"h":40}},"map-wall-06-rounded.img":{"frame":{"x":1938,"y":1808,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07-rounded.img":{"frame":{"x":771,"y":1701,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-09-rounded.img":{"frame":{"x":1999,"y":1137,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10-rounded.img":{"frame":{"x":2028,"y":1121,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-11-rounded.img":{"frame":{"x":781,"y":1338,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-11.img":{"frame":{"x":781,"y":1518,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-12-rounded.img":{"frame":{"x":2028,"y":925,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12.img":{"frame":{"x":1965,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-13-rounded.img":{"frame":{"x":1978,"y":389,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-13.img":{"frame":{"x":2008,"y":925,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-14-rounded.img":{"frame":{"x":2028,"y":389,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-14.img":{"frame":{"x":1888,"y":1020,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-18.img":{"frame":{"x":2008,"y":389,"w":16,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":288},"sourceSize":{"w":16,"h":288}},"map-wall-glass-12-2.img":{"frame":{"x":1985,"y":1808,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-glass-12.img":{"frame":{"x":2021,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-outhouse-bot.img":{"frame":{"x":448,"y":1801,"w":36,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":12},"sourceSize":{"w":36,"h":12}},"map-wall-outhouse-side.img":{"frame":{"x":1873,"y":1808,"w":12,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":99},"sourceSize":{"w":12,"h":99}},"map-wall-outhouse-top.img":{"frame":{"x":443,"y":2029,"w":102,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":102,"h":12},"sourceSize":{"w":102,"h":12}},"map-wall-shack-bot.img":{"frame":{"x":318,"y":2029,"w":121,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":121,"h":12},"sourceSize":{"w":121,"h":12}},"map-wall-shack-left.img":{"frame":{"x":2034,"y":1665,"w":12,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":111},"sourceSize":{"w":12,"h":111}},"map-wall-shack-right.img":{"frame":{"x":2034,"y":1540,"w":12,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":121},"sourceSize":{"w":12,"h":121}},"map-wall-shack-top.img":{"frame":{"x":2,"y":2029,"w":180,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":12},"sourceSize":{"w":180,"h":12}}}},{"meta":{"image":"shared-1-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-res-03.img":{"frame":{"x":1726,"y":2019,"w":38,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":43,"w":38,"h":26},"sourceSize":{"w":72,"h":72}},"map-bathhouse-pool-01.img":{"frame":{"x":536,"y":2001,"w":19,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":31},"sourceSize":{"w":19,"h":31}},"map-bed-res-01.img":{"frame":{"x":1974,"y":1874,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-bed-res-02.img":{"frame":{"x":1974,"y":1957,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-building-bank-ceiling-02.img":{"frame":{"x":1619,"y":2,"w":278,"h":444},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":25,"w":278,"h":444},"sourceSize":{"w":278,"h":470}},"map-building-bank-floor-02.img":{"frame":{"x":1594,"y":1498,"w":432,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":224},"sourceSize":{"w":544,"h":224}},"map-building-bank-window-res-01.img":{"frame":{"x":833,"y":2017,"w":22,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":27,"w":22,"h":21},"sourceSize":{"w":72,"h":72}},"map-building-barn-basement-stairs.img":{"frame":{"x":1901,"y":2,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-barn-ceiling-01.img":{"frame":{"x":2,"y":1317,"w":600,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":600,"h":312},"sourceSize":{"w":600,"h":312}},"map-building-barn-ceiling-02.img":{"frame":{"x":862,"y":1221,"w":208,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":72},"sourceSize":{"w":208,"h":72}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":652,"h":459},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":652,"h":459},"sourceSize":{"w":652,"h":460}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":1633,"w":556,"h":364},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":556,"h":364},"sourceSize":{"w":556,"h":364}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":562,"y":1633,"w":544,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":544,"h":272},"sourceSize":{"w":544,"h":288}},"map-building-bridge-lg-floor.img":{"frame":{"x":1110,"y":2,"w":505,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":505,"h":352},"sourceSize":{"w":506,"h":354}},"map-building-bridge-md-floor.img":{"frame":{"x":658,"y":2,"w":448,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":184},"sourceSize":{"w":448,"h":184}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":1110,"y":1657,"w":456,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":456,"h":288},"sourceSize":{"w":456,"h":288}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":817,"w":608,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":496},"sourceSize":{"w":608,"h":496}},"map-building-club-floor-01d.img":{"frame":{"x":937,"y":1949,"w":161,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":96},"sourceSize":{"w":161,"h":97}},"map-building-club-floor-01g.img":{"frame":{"x":1570,"y":1726,"w":400,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":289},"sourceSize":{"w":401,"h":289}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1422,"y":1949,"w":144,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-building-house-floor-01.img":{"frame":{"x":658,"y":358,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-house-floor-02.img":{"frame":{"x":1110,"y":1221,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-mansion-ceiling.img":{"frame":{"x":1118,"y":802,"w":456,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":456,"h":400},"sourceSize":{"w":512,"h":432}},"map-building-mansion-cellar-01c.img":{"frame":{"x":756,"y":1949,"w":177,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":64},"sourceSize":{"w":177,"h":65}},"map-building-mansion-floor-01a.img":{"frame":{"x":658,"y":190,"w":401,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":401,"h":158},"sourceSize":{"w":401,"h":161}},"map-building-panicroom-ceiling.img":{"frame":{"x":1901,"y":198,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-saferoom-ceiling.img":{"frame":{"x":1617,"y":670,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-saferoom-floor.img":{"frame":{"x":1797,"y":670,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":606,"y":1317,"w":467,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":467,"h":304},"sourceSize":{"w":480,"h":320}},"map-building-teahouse-floor-01.img":{"frame":{"x":1594,"y":802,"w":448,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":288},"sourceSize":{"w":448,"h":288}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":1617,"y":450,"w":416,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":216},"sourceSize":{"w":416,"h":216}},"map-building-warehouse-floor-01.img":{"frame":{"x":614,"y":817,"w":500,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":500,"h":400},"sourceSize":{"w":500,"h":400}},"map-building-warehouse-floor-02.img":{"frame":{"x":1594,"y":1094,"w":440,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":440,"h":400},"sourceSize":{"w":440,"h":400}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":562,"y":1949,"w":190,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":190,"h":90},"sourceSize":{"w":190,"h":90}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":614,"y":1221,"w":244,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":88},"sourceSize":{"w":244,"h":88}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":1142,"y":358,"w":471,"h":440},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":0,"w":471,"h":440},"sourceSize":{"w":496,"h":440}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":465,"w":635,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":635,"h":348},"sourceSize":{"w":640,"h":352}},"map-bush-res-01.img":{"frame":{"x":1839,"y":2019,"w":26,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":24,"w":26,"h":24},"sourceSize":{"w":72,"h":72}},"map-bush-res-02.img":{"frame":{"x":756,"y":1909,"w":29,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":22,"w":29,"h":30},"sourceSize":{"w":72,"h":72}},"map-bush-res-04.img":{"frame":{"x":1898,"y":2019,"w":24,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":24,"h":23},"sourceSize":{"w":27,"h":27}},"map-candle-01.img":{"frame":{"x":1869,"y":2019,"w":25,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":25,"h":25},"sourceSize":{"w":26,"h":26}},"map-column-01.img":{"frame":{"x":680,"y":1909,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-couch-01.img":{"frame":{"x":1901,"y":394,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":48}},"map-crate-mil-01.img":{"frame":{"x":2,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-02.img":{"frame":{"x":92,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-03.img":{"frame":{"x":182,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-04.img":{"frame":{"x":272,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-05.img":{"frame":{"x":362,"y":2001,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-decal-flyer-01.img":{"frame":{"x":859,"y":2017,"w":18,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":18,"h":22},"sourceSize":{"w":24,"h":24}},"map-decal-oil-04.img":{"frame":{"x":1808,"y":2019,"w":27,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":24},"sourceSize":{"w":32,"h":32}},"map-decal-oil-05.img":{"frame":{"x":2017,"y":770,"w":17,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":17,"h":28},"sourceSize":{"w":32,"h":32}},"map-door-01.img":{"frame":{"x":1578,"y":802,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-05.img":{"frame":{"x":1578,"y":870,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-slot-01.img":{"frame":{"x":2022,"y":1974,"w":19,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":67},"sourceSize":{"w":19,"h":67}},"map-door-slot-02.img":{"frame":{"x":1087,"y":190,"w":19,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":68},"sourceSize":{"w":19,"h":68}},"map-drawers-01.img":{"frame":{"x":452,"y":2001,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-drawers-res.img":{"frame":{"x":756,"y":2017,"w":46,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":46,"h":28},"sourceSize":{"w":48,"h":32}},"map-fire-ext-01.img":{"frame":{"x":562,"y":1909,"w":41,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":32},"sourceSize":{"w":42,"h":35}},"map-fire-ext-res.img":{"frame":{"x":806,"y":2017,"w":23,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":4,"w":23,"h":28},"sourceSize":{"w":42,"h":35}},"map-locker-01.img":{"frame":{"x":1570,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-02.img":{"frame":{"x":1622,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-03.img":{"frame":{"x":1674,"y":2019,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-pipes-01.img":{"frame":{"x":1974,"y":1726,"w":45,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":144},"sourceSize":{"w":45,"h":144}},"map-potato-res.img":{"frame":{"x":647,"y":1909,"w":29,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":29,"h":34},"sourceSize":{"w":48,"h":48}},"map-power-box-01.img":{"frame":{"x":607,"y":1909,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-saloon-bar-01.img":{"frame":{"x":1077,"y":1221,"w":27,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":162},"sourceSize":{"w":27,"h":162}},"map-tree-res-01.img":{"frame":{"x":1926,"y":2019,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"map-wall-02-rounded.img":{"frame":{"x":716,"y":1909,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-02.img":{"frame":{"x":736,"y":1909,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-04-cobalt.img":{"frame":{"x":1077,"y":1535,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-04-rounded.img":{"frame":{"x":1570,"y":1657,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wall-04-stone.img":{"frame":{"x":1063,"y":190,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-05-rounded.img":{"frame":{"x":1063,"y":274,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-05.img":{"frame":{"x":1083,"y":274,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-06.img":{"frame":{"x":2017,"y":670,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07.img":{"frame":{"x":1997,"y":670,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-08-rounded.img":{"frame":{"x":1977,"y":670,"w":16,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":128},"sourceSize":{"w":16,"h":128}},"map-wall-09.img":{"frame":{"x":2023,"y":1826,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10.img":{"frame":{"x":2030,"y":1498,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-10.img":{"frame":{"x":2030,"y":1662,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-9.img":{"frame":{"x":1077,"y":1387,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wheel-01.img":{"frame":{"x":1102,"y":1949,"w":156,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":78},"sourceSize":{"w":156,"h":78}},"map-wheel-03.img":{"frame":{"x":1262,"y":1949,"w":156,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":74},"sourceSize":{"w":156,"h":78}},"map-woodpile-res-01.img":{"frame":{"x":1768,"y":2019,"w":36,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":36,"h":26},"sourceSize":{"w":48,"h":48}}}},{"meta":{"image":"shared-2-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01.img":{"frame":{"x":1486,"y":622,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02.img":{"frame":{"x":1725,"y":1563,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-barrel-01.img":{"frame":{"x":1975,"y":1655,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-02.img":{"frame":{"x":78,"y":1191,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-res-02.img":{"frame":{"x":152,"y":1266,"w":65,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":65,"h":63},"sourceSize":{"w":72,"h":72}},"map-bathhouse-column-01.img":{"frame":{"x":145,"y":1333,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-bathrocks-01.img":{"frame":{"x":548,"y":1383,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-bed-01.img":{"frame":{"x":1382,"y":1188,"w":48,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":108},"sourceSize":{"w":48,"h":108}},"map-bed-02.img":{"frame":{"x":763,"y":1143,"w":88,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":108},"sourceSize":{"w":88,"h":108}},"map-bollard-01.img":{"frame":{"x":550,"y":1325,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":56,"h":54},"sourceSize":{"w":72,"h":72}},"map-building-bank-ceiling-01.img":{"frame":{"x":1058,"y":2,"w":252,"h":276},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":24,"w":252,"h":276},"sourceSize":{"w":253,"h":300}},"map-building-bank-ceiling-03.img":{"frame":{"x":1197,"y":926,"w":108,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":96,"w":108,"h":180},"sourceSize":{"w":108,"h":276}},"map-building-bank-window-01.img":{"frame":{"x":1009,"y":649,"w":28,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":52},"sourceSize":{"w":28,"h":52}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":451,"y":1050,"w":152,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":152,"h":96},"sourceSize":{"w":152,"h":104}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1064,"y":1255,"w":82,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":82,"h":96},"sourceSize":{"w":82,"h":104}},"map-building-barn-basement-floor-01.img":{"frame":{"x":366,"y":655,"w":331,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":331,"h":235},"sourceSize":{"w":332,"h":236}},"map-building-barn-basement-floor-02.img":{"frame":{"x":1846,"y":247,"w":187,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":187,"h":235},"sourceSize":{"w":188,"h":236}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":1608,"y":1091,"w":112,"h":145},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":145},"sourceSize":{"w":113,"h":145}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":805,"y":302,"w":283,"h":171},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":283,"h":171},"sourceSize":{"w":284,"h":172}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":1309,"y":1088,"w":129,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":129,"h":96},"sourceSize":{"w":129,"h":97}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":1314,"y":2,"w":268,"h":268},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":268,"h":268},"sourceSize":{"w":268,"h":268}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":1158,"y":1110,"w":128,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":112},"sourceSize":{"w":128,"h":112}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":805,"y":477,"w":256,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":168},"sourceSize":{"w":256,"h":168}},"map-building-boarded-window-01.img":{"frame":{"x":967,"y":1143,"w":22,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":22,"h":56},"sourceSize":{"w":24,"h":64}},"map-building-club-ceiling-01a.img":{"frame":{"x":438,"y":2,"w":368,"h":296},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":368,"h":296},"sourceSize":{"w":369,"h":297}},"map-building-club-ceiling-01b.img":{"frame":{"x":1290,"y":1188,"w":88,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":121},"sourceSize":{"w":89,"h":121}},"map-building-club-ceiling-01c.img":{"frame":{"x":1846,"y":486,"w":200,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":216},"sourceSize":{"w":201,"h":217}},"map-building-club-floor-01a.img":{"frame":{"x":1928,"y":1470,"w":112,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":113},"sourceSize":{"w":113,"h":113}},"map-building-club-floor-01b.img":{"frame":{"x":963,"y":1255,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-building-club-floor-01e.img":{"frame":{"x":1846,"y":2,"w":176,"h":241},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":241},"sourceSize":{"w":177,"h":241}},"map-building-club-floor-01f.img":{"frame":{"x":810,"y":1309,"w":97,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":65},"sourceSize":{"w":97,"h":65}},"map-building-club-floor-01h.img":{"frame":{"x":666,"y":979,"w":160,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":144},"sourceSize":{"w":161,"h":145}},"map-building-club-vault-ceiling.img":{"frame":{"x":1486,"y":530,"w":80,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":88},"sourceSize":{"w":80,"h":88}},"map-building-container-ceiling-01.img":{"frame":{"x":1009,"y":905,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-02.img":{"frame":{"x":1103,"y":905,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-03.img":{"frame":{"x":1545,"y":739,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-05.img":{"frame":{"x":1639,"y":739,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-open-ceiling-01.img":{"frame":{"x":1350,"y":894,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":78,"w":90,"h":190},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01a.img":{"frame":{"x":1636,"y":1624,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":80,"h":80},"sourceSize":{"w":80,"h":81}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":655,"w":360,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":324},"sourceSize":{"w":360,"h":324}},"map-building-house-window-01.img":{"frame":{"x":1041,"y":649,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-house-window-res-01.img":{"frame":{"x":1524,"y":1314,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-hut-ceiling-01.img":{"frame":{"x":1774,"y":706,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-02.img":{"frame":{"x":1293,"y":530,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-03.img":{"frame":{"x":1009,"y":705,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-floor-01.img":{"frame":{"x":1065,"y":477,"w":224,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":224,"h":224},"sourceSize":{"w":256,"h":256}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":432,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":400},"sourceSize":{"w":433,"h":401}},"map-building-mansion-cellar-01b.img":{"frame":{"x":1524,"y":1372,"w":112,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":115},"sourceSize":{"w":113,"h":115}},"map-building-mansion-floor-01c.img":{"frame":{"x":1928,"y":1352,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":114},"sourceSize":{"w":113,"h":114}},"map-building-outhouse-ceiling.img":{"frame":{"x":1865,"y":1236,"w":136,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":136,"h":112},"sourceSize":{"w":200,"h":158}},"map-building-outhouse-floor.img":{"frame":{"x":1608,"y":933,"w":120,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":2,"w":120,"h":154},"sourceSize":{"w":200,"h":158}},"map-building-panicroom-floor.img":{"frame":{"x":1202,"y":730,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-police-floor-02.img":{"frame":{"x":701,"y":655,"w":304,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":304,"h":320},"sourceSize":{"w":305,"h":785}},"map-building-shack-ceiling-01.img":{"frame":{"x":290,"y":1050,"w":157,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":157,"h":103},"sourceSize":{"w":157,"h":127}},"map-building-shack-ceiling-02.img":{"frame":{"x":1158,"y":1226,"w":120,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":96},"sourceSize":{"w":120,"h":120}},"map-building-shack-ceiling-03.img":{"frame":{"x":1092,"y":282,"w":204,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":204,"h":144},"sourceSize":{"w":216,"h":168}},"map-building-shack-floor-01.img":{"frame":{"x":1350,"y":730,"w":191,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":191,"h":160},"sourceSize":{"w":210,"h":170}},"map-building-shack-floor-02.img":{"frame":{"x":830,"y":979,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-shack-floor-03.img":{"frame":{"x":2,"y":983,"w":284,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":284,"h":204},"sourceSize":{"w":288,"h":224}},"map-building-teahouse-floor-02.img":{"frame":{"x":288,"y":1280,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":44},"sourceSize":{"w":64,"h":44}},"map-building-teahouse-res-01.img":{"frame":{"x":1872,"y":1128,"w":141,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":57,"y":76,"w":141,"h":104},"sourceSize":{"w":256,"h":256}},"map-building-vault-ceiling.img":{"frame":{"x":1444,"y":933,"w":160,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":168},"sourceSize":{"w":216,"h":168}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2,"y":406,"w":360,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":216},"sourceSize":{"w":360,"h":216}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":810,"y":2,"w":244,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":280},"sourceSize":{"w":244,"h":280}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":1570,"y":520,"w":200,"h":215},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":215},"sourceSize":{"w":200,"h":224}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":994,"y":1099,"w":160,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":72,"w":160,"h":152},"sourceSize":{"w":160,"h":224}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":438,"y":302,"w":363,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":363,"h":349},"sourceSize":{"w":369,"h":353}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":1150,"y":1326,"w":96,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":89},"sourceSize":{"w":97,"h":90}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":1828,"y":1352,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-01.img":{"frame":{"x":1897,"y":984,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-02.img":{"frame":{"x":451,"y":1150,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":366,"y":894,"w":296,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":56,"w":296,"h":152},"sourceSize":{"w":296,"h":208}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":1250,"y":1403,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-storm-floor-02.img":{"frame":{"x":1733,"y":906,"w":160,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":190},"sourceSize":{"w":160,"h":192}},"map-bunker-vent-01.img":{"frame":{"x":1187,"y":430,"w":41,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":42},"sourceSize":{"w":42,"h":42}},"map-bunker-vent-02.img":{"frame":{"x":366,"y":483,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bunker-vent-03.img":{"frame":{"x":1774,"y":595,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bush-01f.img":{"frame":{"x":78,"y":1321,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-07.img":{"frame":{"x":1774,"y":520,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-bush-07x.img":{"frame":{"x":221,"y":1280,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-case-basement-01.img":{"frame":{"x":1886,"y":1731,"w":74,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":56},"sourceSize":{"w":74,"h":56}},"map-case-chrys-01.img":{"frame":{"x":1967,"y":706,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-deagle-01.img":{"frame":{"x":290,"y":983,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-deagle-02.img":{"frame":{"x":989,"y":1355,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-flare-01.img":{"frame":{"x":1450,"y":1434,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-flare-res-01.img":{"frame":{"x":356,"y":1280,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-hatchet-01.img":{"frame":{"x":228,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-hatchet-res-01.img":{"frame":{"x":288,"y":1328,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-ring-01.img":{"frame":{"x":1967,"y":770,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-chest-01.img":{"frame":{"x":302,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-02.img":{"frame":{"x":376,"y":1225,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03.img":{"frame":{"x":78,"y":1266,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chimney-01.img":{"frame":{"x":78,"y":1452,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":59},"sourceSize":{"w":60,"h":60}},"map-chute-01.img":{"frame":{"x":1404,"y":1314,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-control-panel-01.img":{"frame":{"x":1065,"y":1355,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-02.img":{"frame":{"x":989,"y":1413,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-03.img":{"frame":{"x":480,"y":1416,"w":48,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":47},"sourceSize":{"w":48,"h":47}},"map-control-panel-04.img":{"frame":{"x":1065,"y":1414,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-05.img":{"frame":{"x":1141,"y":1419,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-06.img":{"frame":{"x":1350,"y":1434,"w":96,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":47},"sourceSize":{"w":96,"h":47}},"map-couch-02.img":{"frame":{"x":1350,"y":1485,"w":96,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":48},"sourceSize":{"w":96,"h":48}},"map-couch-03.img":{"frame":{"x":397,"y":1418,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-couch-res-01.img":{"frame":{"x":1143,"y":430,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"map-crate-01.img":{"frame":{"x":2,"y":1809,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02.img":{"frame":{"x":2,"y":1731,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02sv.img":{"frame":{"x":2,"y":1638,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03.img":{"frame":{"x":2,"y":1537,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-04.img":{"frame":{"x":1639,"y":1538,"w":82,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":82},"sourceSize":{"w":82,"h":82}},"map-crate-05.img":{"frame":{"x":1640,"y":1372,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":62,"h":62},"sourceSize":{"w":62,"h":62}},"map-crate-06.img":{"frame":{"x":1550,"y":1584,"w":82,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":50},"sourceSize":{"w":82,"h":50}},"map-crate-07.img":{"frame":{"x":2,"y":1433,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-08.img":{"frame":{"x":2,"y":1325,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-09.img":{"frame":{"x":2,"y":1225,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-10.img":{"frame":{"x":1964,"y":1731,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-11.img":{"frame":{"x":911,"y":1355,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-14.img":{"frame":{"x":1893,"y":1655,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-14a.img":{"frame":{"x":1804,"y":1680,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-20.img":{"frame":{"x":339,"y":1396,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":54},"sourceSize":{"w":54,"h":54}},"map-crate-res-01.img":{"frame":{"x":1977,"y":1587,"w":69,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":69,"h":64},"sourceSize":{"w":72,"h":72}},"map-crate-res-03.img":{"frame":{"x":855,"y":1143,"w":108,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":77},"sourceSize":{"w":108,"h":78}},"map-decal-club-01.img":{"frame":{"x":78,"y":1515,"w":50,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":57,"w":50,"h":53},"sourceSize":{"w":52,"h":180}},"map-decal-initiative.img":{"frame":{"x":424,"y":1294,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-decal-oil-01.img":{"frame":{"x":144,"y":1401,"w":43,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":61},"sourceSize":{"w":64,"h":64}},"map-decal-oil-02.img":{"frame":{"x":610,"y":1376,"w":45,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":45,"h":50},"sourceSize":{"w":64,"h":64}},"map-decal-oil-03.img":{"frame":{"x":721,"y":1410,"w":44,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":44,"h":46},"sourceSize":{"w":64,"h":64}},"map-decal-oil-06.img":{"frame":{"x":1092,"y":430,"w":47,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":47,"h":43},"sourceSize":{"w":64,"h":64}},"map-door-04.img":{"frame":{"x":1250,"y":1326,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"map-drawers-02.img":{"frame":{"x":1809,"y":1563,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-grill-01.img":{"frame":{"x":356,"y":1341,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"map-hedgehog-01.img":{"frame":{"x":1450,"y":1491,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-hut-res-01.img":{"frame":{"x":1706,"y":1324,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":68,"w":118,"h":118},"sourceSize":{"w":256,"h":256}},"map-outhouse-res.img":{"frame":{"x":1967,"y":834,"w":75,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":62,"y":21,"w":75,"h":66},"sourceSize":{"w":200,"h":156}},"map-oven-01.img":{"frame":{"x":254,"y":1453,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-pipes-02.img":{"frame":{"x":1282,"y":1313,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":118,"h":86},"sourceSize":{"w":119,"h":86}},"map-pot-01.img":{"frame":{"x":195,"y":1531,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-02.img":{"frame":{"x":132,"y":1538,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-03.img":{"frame":{"x":78,"y":1572,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-04.img":{"frame":{"x":721,"y":1359,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-05.img":{"frame":{"x":772,"y":1378,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-res-01.img":{"frame":{"x":659,"y":1415,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":40,"h":40},"sourceSize":{"w":72,"h":72}},"map-recorder-01.img":{"frame":{"x":1309,"y":926,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-02.img":{"frame":{"x":1733,"y":792,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-03.img":{"frame":{"x":1544,"y":1314,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-recorder-04.img":{"frame":{"x":449,"y":1418,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-refrigerator-01.img":{"frame":{"x":610,"y":1325,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-saloon-bar-02.img":{"frame":{"x":1893,"y":1537,"w":27,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":46},"sourceSize":{"w":27,"h":46}},"map-sandbags-01.img":{"frame":{"x":1442,"y":1105,"w":128,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":73},"sourceSize":{"w":128,"h":74}},"map-sandbags-02.img":{"frame":{"x":366,"y":406,"w":57,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":57,"h":73},"sourceSize":{"w":74,"h":74}},"map-shack-res-01.img":{"frame":{"x":607,"y":1127,"w":152,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":24,"w":152,"h":90},"sourceSize":{"w":210,"h":170}},"map-shack-res-02.img":{"frame":{"x":1640,"y":1446,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-shack-res-03.img":{"frame":{"x":1754,"y":1471,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-silo-01.img":{"frame":{"x":1314,"y":274,"w":252,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":252,"h":252},"sourceSize":{"w":256,"h":256}},"map-smoke-res.img":{"frame":{"x":1550,"y":1491,"w":85,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":19,"w":85,"h":89},"sourceSize":{"w":128,"h":128}},"map-squash-01.img":{"frame":{"x":78,"y":1390,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":62,"h":58},"sourceSize":{"w":72,"h":72}},"map-squash-res-01.img":{"frame":{"x":1232,"y":430,"w":42,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":42,"h":41},"sourceSize":{"w":48,"h":48}},"map-stairs-broken-01.img":{"frame":{"x":1893,"y":1587,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-stand-01.img":{"frame":{"x":2005,"y":1287,"w":40,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":45},"sourceSize":{"w":40,"h":45}},"map-stone-01.img":{"frame":{"x":153,"y":1191,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-stone-03.img":{"frame":{"x":1724,"y":1184,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":137,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-04.img":{"frame":{"x":2,"y":1885,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-05.img":{"frame":{"x":2,"y":1961,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-res-01.img":{"frame":{"x":191,"y":1417,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02.img":{"frame":{"x":602,"y":1221,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-04.img":{"frame":{"x":488,"y":1294,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"map-stone-res-06.img":{"frame":{"x":290,"y":1157,"w":144,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-stove-01.img":{"frame":{"x":855,"y":1224,"w":104,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":104,"h":81},"sourceSize":{"w":112,"h":88}},"map-stove-02.img":{"frame":{"x":668,"y":1359,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":49,"h":52},"sourceSize":{"w":56,"h":56}},"map-table-01.img":{"frame":{"x":1809,"y":1612,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02.img":{"frame":{"x":1724,"y":1100,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03.img":{"frame":{"x":1720,"y":1647,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-table-res.img":{"frame":{"x":366,"y":554,"w":65,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":65,"h":66},"sourceSize":{"w":72,"h":72}},"map-toilet-01.img":{"frame":{"x":607,"y":1050,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-02.img":{"frame":{"x":1868,"y":1471,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-03.img":{"frame":{"x":810,"y":1255,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-04.img":{"frame":{"x":1733,"y":739,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-res-01.img":{"frame":{"x":142,"y":1480,"w":49,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":49,"h":54},"sourceSize":{"w":64,"h":64}},"map-toilet-res-02.img":{"frame":{"x":2005,"y":1236,"w":40,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":40,"h":47},"sourceSize":{"w":64,"h":64}},"map-tree-03.img":{"frame":{"x":1442,"y":1182,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-04.img":{"frame":{"x":488,"y":1356,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-07su.img":{"frame":{"x":1574,"y":1240,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08f.img":{"frame":{"x":1586,"y":2,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08su.img":{"frame":{"x":1586,"y":261,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-09.img":{"frame":{"x":420,"y":1358,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-res-02.img":{"frame":{"x":312,"y":1454,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vat-01.img":{"frame":{"x":213,"y":1349,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":64,"h":64},"sourceSize":{"w":72,"h":72}},"map-vat-02.img":{"frame":{"x":706,"y":1255,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-vat-res.img":{"frame":{"x":281,"y":1389,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":5,"w":54,"h":60},"sourceSize":{"w":72,"h":72}},"map-vending-res.img":{"frame":{"x":911,"y":1309,"w":46,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":46,"h":41},"sourceSize":{"w":54,"h":47}},"map-vending-soda-01.img":{"frame":{"x":195,"y":1480,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-wall-03-rounded.img":{"frame":{"x":967,"y":1203,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-03.img":{"frame":{"x":2026,"y":2,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-04.img":{"frame":{"x":1293,"y":430,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wheel-02.img":{"frame":{"x":1897,"y":906,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":148,"h":74},"sourceSize":{"w":156,"h":78}},"map-woodpile-01.img":{"frame":{"x":253,"y":1504,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}}}}]')
  , Ml = JSON.parse('[{"meta":{"image":"snow-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01x.img":{"frame":{"x":1805,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02x.img":{"frame":{"x":1889,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1709,"y":438,"w":200,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-building-greenhouse-floor-02.img":{"frame":{"x":1289,"y":438,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":358,"y":1197,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":840,"y":1276,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":853,"y":2,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1989,"y":395,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1528,"y":1166,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1710,"y":376,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1104,"y":1251,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1889,"y":1259,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1709,"y":1166,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1913,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":853,"y":627,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":730,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":358,"y":1103,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1322,"y":2,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1617,"y":1354,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1617,"y":1473,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1104,"y":1095,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1709,"y":1323,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":620,"y":1103,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1324,"y":1095,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":462,"y":1337,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":730,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1710,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1661,"y":763,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1324,"y":1235,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1257,"y":763,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1873,"y":1323,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":1048,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":748,"y":1018,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":853,"y":319,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1701,"y":1499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bush-01x.img":{"frame":{"x":1805,"y":1499,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":1973,"y":1678,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chute-01x.img":{"frame":{"x":720,"y":1276,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-complex-warehouse-floor-01.img":{"frame":{"x":586,"y":1197,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":748,"y":730,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2015,"y":1462,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-crate-01x.img":{"frame":{"x":840,"y":1354,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1973,"y":1602,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1008,"y":1354,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-planter-06.img":{"frame":{"x":1913,"y":395,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":782,"y":793,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1188,"y":1018,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":2005,"y":1259,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snow-01.img":{"frame":{"x":1913,"y":666,"w":106,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":20,"w":106,"h":87},"sourceSize":{"w":128,"h":128}},"map-snow-02.img":{"frame":{"x":586,"y":1313,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-03.img":{"frame":{"x":1889,"y":1166,"w":156,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":156,"h":89},"sourceSize":{"w":180,"h":96}},"map-snow-04.img":{"frame":{"x":782,"y":847,"w":50,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":49},"sourceSize":{"w":64,"h":64}},"map-snow-05.img":{"frame":{"x":1826,"y":376,"w":45,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":45,"h":52},"sourceSize":{"w":64,"h":64}},"map-snow-06.img":{"frame":{"x":1528,"y":1095,"w":89,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":89,"h":56},"sourceSize":{"w":96,"h":64}},"map-snowball-res.img":{"frame":{"x":1284,"y":1251,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1008,"y":1276,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":1873,"y":1462,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":782,"y":730,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":358,"y":1337,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":1104,"y":1018,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":1886,"y":311,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":924,"y":1276,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-10.img":{"frame":{"x":1913,"y":535,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1488,"y":1354,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}}}}]')
  , Pl = JSON.parse('[{"meta":{"image":"woods-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":358,"y":1329,"w":311,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":311,"h":304},"sourceSize":{"w":320,"h":320}},"map-building-pavilion-floor-01.img":{"frame":{"x":370,"y":977,"w":288,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":288},"sourceSize":{"w":288,"h":288}},"map-building-pavilion-res-01.img":{"frame":{"x":1039,"y":1618,"w":89,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":83,"y":81,"w":89,"h":94},"sourceSize":{"w":256,"h":256}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":473,"y":1637,"w":160,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":352,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":672},"sourceSize":{"w":352,"h":688}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":960,"y":1769,"w":96,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":922,"y":970,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":1329,"w":352,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":673,"y":1441,"w":208,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":152},"sourceSize":{"w":208,"h":152}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":977,"w":364,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":364,"h":348},"sourceSize":{"w":369,"h":353}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1002,"y":1526,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":885,"y":1441,"w":113,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":113,"h":184},"sourceSize":{"w":113,"h":192}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":455,"y":726,"w":256,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":200},"sourceSize":{"w":256,"h":200}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":662,"y":930,"w":256,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":248},"sourceSize":{"w":256,"h":248}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":1850,"w":304,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":304,"h":152},"sourceSize":{"w":304,"h":152}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":358,"y":2,"w":592,"h":462},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":592,"h":462},"sourceSize":{"w":592,"h":464}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":678,"w":449,"h":295},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":449,"h":295},"sourceSize":{"w":449,"h":297}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":1685,"w":336,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":336,"h":161},"sourceSize":{"w":345,"h":161}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":342,"y":1685,"w":127,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":127,"h":328},"sourceSize":{"w":129,"h":337}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":473,"y":1913,"w":191,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":191,"h":105},"sourceSize":{"w":200,"h":105}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":668,"y":1896,"w":187,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":187,"h":113},"sourceSize":{"w":193,"h":113}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":455,"y":468,"w":366,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":366,"h":254},"sourceSize":{"w":369,"h":257}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":859,"y":1896,"w":97,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":97,"h":140},"sourceSize":{"w":97,"h":153}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":825,"y":468,"w":190,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":190,"h":254},"sourceSize":{"w":193,"h":265}},"map-bush-01x.img":{"frame":{"x":1207,"y":1450,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-06.img":{"frame":{"x":1065,"y":1134,"w":95,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":95,"h":94},"sourceSize":{"w":96,"h":96}},"map-bush-07sp.img":{"frame":{"x":1132,"y":1610,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":370,"y":1269,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-crate-01x.img":{"frame":{"x":1131,"y":1370,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1131,"y":1450,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1086,"y":1048,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-19.img":{"frame":{"x":1060,"y":1716,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-planter-06.img":{"frame":{"x":358,"y":468,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":863,"y":826,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1186,"y":1526,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":933,"y":1397,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snowball-res.img":{"frame":{"x":673,"y":1597,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1086,"y":970,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":897,"y":1629,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":897,"y":1769,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":1064,"y":1266,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":358,"y":608,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":715,"y":826,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":1102,"y":1526,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-05.img":{"frame":{"x":922,"y":726,"w":245,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":245,"h":240},"sourceSize":{"w":256,"h":256}},"map-tree-07.img":{"frame":{"x":960,"y":1901,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-07sp.img":{"frame":{"x":933,"y":1134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08.img":{"frame":{"x":637,"y":1637,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":673,"y":1182,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-10.img":{"frame":{"x":933,"y":1266,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1002,"y":1397,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}},"map-tree-switch-01.img":{"frame":{"x":444,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-02.img":{"frame":{"x":504,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-03.img":{"frame":{"x":564,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-04.img":{"frame":{"x":897,"y":1832,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-woodpile-02.img":{"frame":{"x":715,"y":726,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-woodpile-res-02.img":{"frame":{"x":2,"y":2017,"w":60,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":28},"sourceSize":{"w":64,"h":32}}}}]')
  , Cl = {
    cobalt: gl,
    desert: yl,
    faction: xl,
    gradient: zl,
    halloween: bl,
    loadout: kl,
    main: vl,
    potato: _l,
    savannah: Il,
    shared: Tl,
    snow: Ml,
    woods: Pl
}
  , wr = {
    low: Cl,
    high: Sl
};
function Dl(l, e) {
    const i = J.from(e).baseTexture;
    let r = 0;
    return i.valid || (i.on("loaded", s => {
        console.log("Loaded texture", e),
        l.prepare.upload(s)
    }
    ),
    i.on("error", s => {
        console.log("BaseTex load error, retrying", e),
        r++ <= 3 && setTimeout( () => {
            s.source && (s.updateSourceImage(""),
            s.updateSourceImage(e.substring(5, e.length)))
        }
        , (r - 1) * 1e3)
    }
    )),
    i
}
const Bl = Object.assign({
    "../atlas-builder/out/cobalt-0-100.png": Do,
    "../atlas-builder/out/cobalt-0-50.png": Bo,
    "../atlas-builder/out/desert-0-100.png": Lo,
    "../atlas-builder/out/desert-0-50.png": Ao,
    "../atlas-builder/out/faction-0-100.png": Eo,
    "../atlas-builder/out/faction-0-50.png": Ro,
    "../atlas-builder/out/gradient-0-100.png": Oo,
    "../atlas-builder/out/gradient-0-50.png": Fo,
    "../atlas-builder/out/halloween-0-100.png": No,
    "../atlas-builder/out/halloween-0-50.png": jo,
    "../atlas-builder/out/loadout-0-100.png": Vo,
    "../atlas-builder/out/loadout-0-50.png": Uo,
    "../atlas-builder/out/main-0-100.png": Wo,
    "../atlas-builder/out/main-0-50.png": qo,
    "../atlas-builder/out/potato-0-100.png": Ho,
    "../atlas-builder/out/potato-0-50.png": Go,
    "../atlas-builder/out/savannah-0-100.png": Qo,
    "../atlas-builder/out/savannah-0-50.png": $o,
    "../atlas-builder/out/shared-0-100.png": Jo,
    "../atlas-builder/out/shared-0-50.png": Xo,
    "../atlas-builder/out/shared-1-100.png": Ko,
    "../atlas-builder/out/shared-1-50.png": Yo,
    "../atlas-builder/out/shared-2-100.png": Zo,
    "../atlas-builder/out/shared-2-50.png": el,
    "../atlas-builder/out/snow-0-100.png": tl,
    "../atlas-builder/out/snow-0-50.png": il,
    "../atlas-builder/out/woods-0-100.png": rl,
    "../atlas-builder/out/woods-0-50.png": sl
})
  , $r = {};
for (const [l,e] of Object.entries(Bl)) {
    const t = l.split("/").at(-1);
    $r[t] = e
}
function Ll(l, e) {
    const t = Dl(l, $r[e.meta.image])
      , i = new ns(t,e);
    return i.resolution = t.resolution,
    i.parse(),
    i
}
function Al(l, e) {
    let t = Math.min(window.screen.width, window.screen.height)
      , i = Math.max(window.screen.width, window.screen.height);
    t *= window.devicePixelRatio,
    i *= window.devicePixelRatio;
    const r = i < 1366 && t < 768;
    let s = e.get("highResTex") ? "high" : "low";
    if ((r || B.mobile && !B.tablet || l.type == jt.CANVAS) && (s = "low"),
    l.type == jt.WEBGL) {
        const a = l.gl;
        a.getParameter(a.MAX_TEXTURE_SIZE) < 4096 && (s = "low")
    }
    return console.log("TextureRes", s, "screenDims", window.screen.width, window.screen.height),
    s
}
class El {
    constructor(e, t, i) {
        this.renderer = e,
        this.audioManager = t,
        this.config = i,
        this.textureRes = Al(this.renderer, this.config),
        ls.uploadsPerFrame = 1
    }
    atlases = {};
    loadTicker = 0;
    loaded = !1;
    textureRes;
    mapName;
    preloadMap;
    isAtlasLoaded(e) {
        return this.atlases[e]?.loaded
    }
    atlasTexturesLoaded(e) {
        if (!this.isAtlasLoaded(e))
            return !1;
        const t = this.atlases[e];
        for (let i = 0; i < t.spritesheets.length; i++)
            if (!t.spritesheets[i].baseTexture.valid)
                return !1;
        return !0
    }
    loadAtlas(e) {
        if (this.isAtlasLoaded(e))
            return;
        console.log("Load atlas", e),
        this.atlases[e] = this.atlases[e] || {
            loaded: !1,
            spritesheets: []
        };
        const i = (wr[this.textureRes] || wr.low)[e];
        for (let r = 0; r < i.length; r++) {
            const s = Ll(this.renderer, i[r]);
            this.atlases[e].spritesheets.push(s)
        }
        this.atlases[e].loaded = !0
    }
    unloadAtlas(e) {
        if (!this.isAtlasLoaded(e))
            return;
        console.log("Unload atlas", e);
        const t = this.atlases[e];
        for (let i = 0; i < t.spritesheets.length; i++)
            t.spritesheets[i].destroy(!0);
        t.loaded = !1,
        t.spritesheets = []
    }
    loadMapAssets(e) {
        console.log("Load map", e);
        const t = Nt[e];
        if (!t)
            throw new Error(`Failed loading mapDef ${this.mapName}`);
        const i = t.assets.atlases
          , r = Object.keys(this.atlases);
        for (let s = 0; s < r.length; s++) {
            const a = r[s];
            i.includes(a) || this.unloadAtlas(a)
        }
        for (let s = 0; s < i.length; s++) {
            const a = i[s];
            this.isAtlasLoaded(a) || this.loadAtlas(a)
        }
        setTimeout( () => {
            this.audioManager.preloadSounds();
            const s = t.assets.audio;
            for (let a = 0; a < s.length; a++) {
                const o = s[a];
                let h = De.Sounds[o.channel];
                if (!h) {
                    const d = De.Channels[o.channel];
                    h = De.Sounds[d.list]
                }
                const f = h[o.name]
                  , u = {
                    canCoalesce: f.canCoalesce,
                    channels: f.maxInstances,
                    volume: f.volume
                };
                this.audioManager.loadSound({
                    name: o.name,
                    channel: o.channel,
                    path: f.path,
                    options: u
                })
            }
        }
        , 0)
    }
    update(e) {
        if (!this.loaded) {
            this.loadTicker += e;
            let t = !this.preloadMap;
            const i = Object.keys(this.atlases);
            for (let r = 0; r < i.length; r++) {
                const s = i[r];
                this.atlasTexturesLoaded(s) || (t = !1)
            }
            this.audioManager.allLoaded() || (t = !1),
            t && (console.log("Resource load complete", this.loadTicker.toFixed(2)),
            this.loaded = !0)
        }
    }
}
var Sr = {
    na: {
        https: !0,
        address: "usr.mathsiscoolfun.com:8001",
        l10n: "index-north-america"
    },
    eu: {
        https: !0,
        address: "eur.mathsiscoolfun.com:8001",
        l10n: "index-europe"
    },
    asia: {
        https: !0,
        address: "asr.mathsiscoolfun.com:8001",
        l10n: "index-asia"
    },
    sa: {
        https: !0,
        address: "sa.mathsiscoolfun.com:8001",
        l10n: "index-south-america"
    }
};
class Rl {
    constructor(e, t) {
        this.config = e,
        this.localization = t,
        this.config = e,
        this.localization = t
    }
    info = {};
    loaded = !1;
    load() {
        const e = this.localization.getLocale()
          , t = He.resolveUrl(`/api/site_info?language=${e}`)
          , i = c("#server-opts")
          , r = c("#team-server-opts");
        for (const s in Sr) {
            const a = Sr[s]
              , o = this.localization.translate(a.l10n)
              , h = `<option value='${s}' data-l10n='${a.l10n}' data-label='${o}'>${o}</option>`;
            i.append(h),
            r.append(h)
        }
        c.ajax(t).done(s => {
            this.info = s || {},
            this.loaded = !0,
            this.updatePageFromInfo()
        }
        )
    }
    getGameModeStyles() {
        const e = []
          , t = this.info.modes || [];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = (Nt[r.mapName] || Nt.main).desc
              , a = s.buttonText ? s.buttonText : ms[r.teamMode];
            e.push({
                icon: s.icon,
                buttonCss: s.buttonCss,
                buttonText: a,
                enabled: r.enabled
            })
        }
        return e
    }
    updatePageFromInfo() {
        if (this.loaded) {
            const e = this.getGameModeStyles();
            for (let f = 0; f < e.length; f++) {
                const u = e[f]
                  , d = `index-play-${u.buttonText}`
                  , p = c(`#btn-start-mode-${f}`);
                p.data("l10n", d),
                p.html(this.localization.translate(d)),
                (u.icon || u.buttonCss) && (f == 0 ? p.addClass("btn-custom-mode-no-indent") : p.addClass("btn-custom-mode-main"),
                p.addClass(u.buttonCss),
                p.css({
                    "background-image": `url(${u.icon})`
                }));
                const w = c(`#btn-team-queue-mode-${f}`);
                if (w.length) {
                    const S = `index-${u.buttonText}`;
                    w.data("l10n", S),
                    w.html(this.localization.translate(S)),
                    u.icon && (w.addClass("btn-custom-mode-select"),
                    w.css({
                        "background-image": `url(${u.icon})`
                    }))
                }
                p.toggle(u.enabled)
            }
            const t = this.info.modes.some(f => f.enabled && f.teamMode > 1);
            c("#btn-join-team, #btn-create-team").toggle(t);
            const i = this.info.pops;
            if (i) {
                const f = Object.keys(i);
                for (let u = 0; u < f.length; u++) {
                    const d = f[u]
                      , p = i[d]
                      , w = c("#server-opts").children(`option[value="${d}"]`)
                      , S = this.localization.translate("index-players");
                    w.text(`${w.data("label")} [${p.playerCount} ${S}]`)
                }
            }
            let r = !1;
            const s = c("#featured-streamers")
              , a = c(".streamer-list");
            if (!B.mobile && this.info.twitch) {
                a.empty();
                for (let f = 0; f < this.info.twitch.length; f++) {
                    const u = this.info.twitch[f]
                      , d = c("#featured-streamer-template").clone();
                    d.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
                    const p = d.find("a")
                      , w = this.localization.translate(u.viewers == 1 ? "index-viewer" : "index-viewers");
                    p.html(`${u.name} <span>${u.viewers} ${w}</span>`),
                    p.css("background-image", `url(${u.img})`),
                    p.attr("href", u.url),
                    a.append(d),
                    r = !0
                }
            }
            s.css("visibility", r ? "visible" : "hidden");
            const o = c("#featured-youtuber")
              , h = this.info.youtube;
            h && c(".btn-youtuber").attr("href", this.info.youtube.link).html(this.info.youtube.name),
            o.css("display", h ? "block" : "none")
        }
    }
}
var gr = {};
/*!
 * ==========================================================
 *  COLOR PICKER PLUGIN 1.4.2
 * ==========================================================
 * Author: Taufik Nurrohman <https://github.com/tovic>
 * License: MIT
 * ----------------------------------------------------------
 */
var yr;
function Ol() {
    return yr || (yr = 1,
    function(l, e, t) {
        var i = "__instance__"
          , r = "firstChild"
          , s = setTimeout;
        function a(z) {
            return typeof z < "u"
        }
        function o(z) {
            return typeof z == "string"
        }
        function h(z) {
            return typeof z == "object"
        }
        function f(z) {
            return Object.keys(z).length
        }
        function u(z, P, T) {
            return z < P ? P : z > T ? T : z
        }
        function d(z, P) {
            return parseInt(z, P)
        }
        function p(z) {
            return Math.round(z)
        }
        function w(z) {
            var P = +z[0], T = +z[1], C = +z[2], N, L, j, V, E, R, G, K;
            switch (V = Math.floor(P * 6),
            E = P * 6 - V,
            R = C * (1 - T),
            G = C * (1 - E * T),
            K = C * (1 - (1 - E) * T),
            V = V || 0,
            G = G || 0,
            K = K || 0,
            V % 6) {
            case 0:
                N = C,
                L = K,
                j = R;
                break;
            case 1:
                N = G,
                L = C,
                j = R;
                break;
            case 2:
                N = R,
                L = C,
                j = K;
                break;
            case 3:
                N = R,
                L = G,
                j = C;
                break;
            case 4:
                N = K,
                L = R,
                j = C;
                break;
            case 5:
                N = C,
                L = R,
                j = G;
                break
            }
            return [p(N * 255), p(L * 255), p(j * 255)]
        }
        function S(z) {
            return y(w(z))
        }
        function g(z) {
            var P = +z[0], T = +z[1], C = +z[2], N = Math.max(P, T, C), L = Math.min(P, T, C), j = N - L, V, E = N === 0 ? 0 : j / N, R = N / 255;
            switch (N) {
            case L:
                V = 0;
                break;
            case P:
                V = T - C + j * (T < C ? 6 : 0),
                V /= 6 * j;
                break;
            case T:
                V = C - P + j * 2,
                V /= 6 * j;
                break;
            case C:
                V = P - T + j * 4,
                V /= 6 * j;
                break
            }
            return [V, E, R]
        }
        function y(z) {
            var P = +z[2] | +z[1] << 8 | +z[0] << 16;
            return P = "000000" + P.toString(16),
            P.slice(-6)
        }
        function M(z) {
            return g(I(z))
        }
        function I(z) {
            return z.length === 3 && (z = z.replace(/./g, "$&$&")),
            [d(z[0] + z[1], 16), d(z[2] + z[3], 16), d(z[4] + z[5], 16)]
        }
        function v(z) {
            return [+z[0] / 360, +z[1] / 100, +z[2] / 100]
        }
        function k(z) {
            return [p(+z[0] * 360), p(+z[1] * 100), p(+z[2] * 100)]
        }
        function _(z) {
            return [+z[0] / 255, +z[1] / 255, +z[2] / 255]
        }
        function A(z) {
            if (h(z))
                return z;
            var P = /\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i.exec(z)
              , T = /\s*hsv\s*\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)\s*$/i.exec(z)
              , C = z[0] === "#" && z.match(/^#([\da-f]{3}|[\da-f]{6})$/i);
            return C ? M(z.slice(1)) : T ? v([+T[1], +T[2], +T[3]]) : P ? g([+P[1], +P[2], +P[3]]) : [0, 1, 1]
        }
        (function(z) {
            z.version = "1.4.2",
            z[i] = {},
            z.each = function(P, T) {
                return s(function() {
                    var C = z[i], N;
                    for (N in C)
                        P.call(C[N], N, C)
                }, T === 0 ? 0 : T || 1),
                z
            }
            ,
            z.parse = A,
            z._HSV2RGB = w,
            z._HSV2HEX = S,
            z._RGB2HSV = g,
            z._HEX2HSV = M,
            z._HEX2RGB = function(P) {
                return _(I(P))
            }
            ,
            z.HSV2RGB = function(P) {
                return w(v(P))
            }
            ,
            z.HSV2HEX = function(P) {
                return S(v(P))
            }
            ,
            z.RGB2HSV = function(P) {
                return k(g(P))
            }
            ,
            z.RGB2HEX = y,
            z.HEX2HSV = function(P) {
                return k(M(P))
            }
            ,
            z.HEX2RGB = I
        }
        )(l[t] = function(z, P, T) {
            var C = e.body
              , N = e.documentElement
              , L = this
              , j = l[t]
              , V = !1
              , E = {}
              , R = e.createElement("div")
              , G = "touchstart mousedown"
              , K = "touchmove mousemove"
              , oe = "touchend mouseup"
              , ke = "orientationchange resize";
            if (!(L instanceof j))
                return new j(z,P);
            j[i][z.id || z.name || f(j[i])] = L,
            (!a(P) || P === !0) && (P = G);
            function Re(W, Y, ne) {
                W = W.split(/\s+/);
                for (var pe = 0, Ce = W.length; pe < Ce; ++pe)
                    Y.addEventListener(W[pe], ne, !1)
            }
            function je(W, Y, ne) {
                W = W.split(/\s+/);
                for (var pe = 0, Ce = W.length; pe < Ce; ++pe)
                    Y.removeEventListener(W[pe], ne)
            }
            function $e(W, Y) {
                var ne = "touches"
                  , pe = "clientX"
                  , Ce = "clientY"
                  , Te = Y[ne] ? Y[ne][0][pe] : Y[pe]
                  , Oe = Y[ne] ? Y[ne][0][Ce] : Y[Ce]
                  , Ke = rt(W);
                return {
                    x: Te - Ke.l,
                    y: Oe - Ke.t
                }
            }
            function rt(W) {
                var Y, ne, pe;
                return W === l ? (Y = l.pageXOffset || N.scrollLeft,
                ne = l.pageYOffset || N.scrollTop) : (pe = W.getBoundingClientRect(),
                Y = pe.left,
                ne = pe.top),
                {
                    l: Y,
                    t: ne
                }
            }
            function st(W, Y) {
                for (; (W = W.parentElement) && W !== Y; )
                    ;
                return W
            }
            function at(W) {
                W && W.preventDefault()
            }
            function Le(W) {
                return W === l ? {
                    w: l.innerWidth,
                    h: l.innerHeight
                } : {
                    w: W.offsetWidth,
                    h: W.offsetHeight
                }
            }
            function Ue(W) {
                return V || (a(W) ? W : !1)
            }
            function Je(W) {
                V = W
            }
            function ot(W, Y, ne) {
                return a(W) ? a(Y) ? (a(E[W]) || (E[W] = {}),
                a(ne) || (ne = f(E[W])),
                E[W][ne] = Y,
                L) : E[W] : E
            }
            function Zr(W, Y) {
                return a(W) ? a(Y) ? (delete E[W][Y],
                L) : (E[W] = {},
                L) : (E = {},
                L)
            }
            function de(W, Y, ne) {
                if (!a(E[W]))
                    return L;
                if (a(ne))
                    a(E[W][ne]) && E[W][ne].apply(L, Y);
                else
                    for (var pe in E[W])
                        E[W][pe].apply(L, Y);
                return L
            }
            Je(j.parse(z.getAttribute("data-color") || z.value || [0, 1, 1])),
            R.className = "color-picker",
            R.innerHTML = '<div class="color-picker-container"><span class="color-picker-h"><i></i></span><span class="color-picker-sv"><i></i></span></div>';
            var vi = R[r].children, ve = Ue([0, 1, 1]), pt = vi[0], lt = vi[1], Ht = pt[r], ft = lt[r], Gt = 0, Qt = 0, Ct = 0, $t = 0, wt = 0, St = 0, _i = 0, Ii = 0, Pe = [S(ve)], Jt;
            function Xe(W, Y) {
                (!W || W === "h") && de("change:h", Y),
                (!W || W === "sv") && de("change:sv", Y),
                de("change", Y)
            }
            function Xt() {
                return R.parentNode
            }
            function Dt(W, Y) {
                W || ((T || Y || C).appendChild(R),
                L.visible = !0),
                _i = Le(R).w,
                Ii = Le(R).h;
                var ne = Le(lt)
                  , pe = Le(ft)
                  , Ce = Le(pt).h
                  , Te = ne.w
                  , Oe = ne.h
                  , Ke = Le(Ht).h
                  , Bt = pe.w
                  , Lt = pe.h;
                if (W) {
                    let ce = function(ze) {
                        var We = ze.target
                          , Ve = We === z || st(We, z) === z;
                        Ve ? !Xt() && (Dt(),
                        de("enter")) : L.exit()
                    };
                    R.style.left = R.style.top = "-9999px",
                    P !== !1 && Re(P, z, ce),
                    L.create = function() {
                        return Dt(1),
                        de("create"),
                        L
                    }
                    ,
                    L.destroy = function() {
                        return P !== !1 && je(P, z, ce),
                        L.exit(),
                        Je(!1),
                        de("destroy"),
                        L
                    }
                } else
                    Kt();
                Jt = function() {
                    ve = Ue(ve),
                    gt(),
                    Ht.style.top = Ce - Ke / 2 - Ce * +ve[0] + "px",
                    ft.style.right = Te - Bt / 2 - Te * +ve[1] + "px",
                    ft.style.top = Oe - Lt / 2 - Oe * +ve[2] + "px"
                }
                ,
                L.exit = function(ce) {
                    var ze = Xt();
                    return ze && (ze.removeChild(R),
                    L.visible = !1),
                    je(G, pt, Mi),
                    je(G, lt, Pi),
                    je(K, e, At),
                    je(oe, e, Ti),
                    je(ke, l, Kt),
                    de("exit"),
                    L
                }
                ;
                function gt(ce) {
                    w(ve);
                    var ze = w([ve[0], 1, 1]);
                    lt.style.backgroundColor = "rgb(" + ze.join(",") + ")",
                    Je(ve),
                    at(ce)
                }
                Jt();
                function es(ce) {
                    var ze = u($e(pt, ce).y, 0, Ce);
                    ve[0] = (Ce - ze) / Ce,
                    Ht.style.top = ze - Ke / 2 + "px",
                    gt(ce)
                }
                function ts(ce) {
                    var ze = $e(lt, ce)
                      , We = u(ze.x, 0, Te)
                      , Ve = u(ze.y, 0, Oe);
                    ve[1] = 1 - (Te - We) / Te,
                    ve[2] = (Oe - Ve) / Oe,
                    ft.style.right = Te - We - Bt / 2 + "px",
                    ft.style.top = Ve - Lt / 2 + "px",
                    gt(ce)
                }
                function At(ce) {
                    Ct && (es(ce),
                    Pe = [S(ve)],
                    Gt || (de("drag:h", Pe),
                    de("drag", Pe),
                    Xe("h", Pe))),
                    $t && (ts(ce),
                    Pe = [S(ve)],
                    Qt || (de("drag:sv", Pe),
                    de("drag", Pe),
                    Xe("sv", Pe))),
                    Gt = 0,
                    Qt = 0
                }
                function Ti(ce) {
                    var ze = ce.target
                      , We = Ct ? "h" : "sv"
                      , Ve = [S(ve), L]
                      , is = ze === z || st(ze, z) === z
                      , Ci = ze === R || st(ze, R) === R;
                    !is && !Ci ? Xt() && P !== !1 && (L.exit(),
                    Xe(0, Ve)) : Ci && (de("stop:" + We, Ve),
                    de("stop", Ve),
                    Xe(We, Ve)),
                    Ct = 0,
                    $t = 0
                }
                function Mi(ce) {
                    Gt = 1,
                    Ct = 1,
                    At(ce),
                    at(ce),
                    de("start:h", Pe),
                    de("start", Pe),
                    Xe("h", Pe)
                }
                function Pi(ce) {
                    Qt = 1,
                    $t = 1,
                    At(ce),
                    at(ce),
                    de("start:sv", Pe),
                    de("start", Pe),
                    Xe("sv", Pe)
                }
                W || (Re(G, pt, Mi),
                Re(G, lt, Pi),
                Re(K, e, At),
                Re(oe, e, Ti),
                Re(ke, l, Kt))
            }
            Dt(1),
            s(function() {
                var W = [S(ve)];
                de("create", W),
                Xe(0, W)
            }, 0),
            L.fit = function(W) {
                var Y = Le(l)
                  , ne = Le(N)
                  , pe = Y.w - ne.w
                  , Ce = Y.h - N.clientHeight
                  , Te = rt(l)
                  , Oe = rt(z);
                if (wt = Oe.l + Te.l,
                St = Oe.t + Te.t + Le(z).h,
                h(W))
                    a(W[0]) && (wt = W[0]),
                    a(W[1]) && (St = W[1]);
                else {
                    var Ke = Te.l
                      , Bt = Te.t
                      , Lt = Te.l + Y.w - _i - pe
                      , gt = Te.t + Y.h - Ii - Ce;
                    wt = u(wt, Ke, Lt) >> 0,
                    St = u(St, Bt, gt) >> 0
                }
                return R.style.left = wt + "px",
                R.style.top = St + "px",
                de("fit"),
                L
            }
            ;
            function Kt() {
                return L.fit()
            }
            return L.set = function(W) {
                return a(W) ? (o(W) && (W = j.parse(W)),
                Je(W),
                Jt(),
                L) : Ue()
            }
            ,
            L.get = function(W) {
                return Ue(W)
            }
            ,
            L.source = z,
            L.self = R,
            L.visible = !1,
            L.on = ot,
            L.off = Zr,
            L.fire = de,
            L.hooks = E,
            L.enter = function(W) {
                return Dt(0, W),
                de("enter"),
                L
            }
            ,
            L
        }
        )
    }(window, document, "CP")),
    gr
}
Ol();
function Jr(l) {
    const e = {
        width: 64,
        height: 64
    };
    return {
        width: Math.round(e.width * Number(l.size) / 4) * 4,
        height: Math.round(e.height * Number(l.size) / 4) * 4
    }
}
function Xr(l) {
    const e = ci[l.type]
      , t = Jr(l)
      , i = x.rgbToHex(x.intToRgb(l.color))
      , r = l.stroke;
    let s = e.code.replace(/white/g, i);
    return s = s.replace(/stroke-width=".5"/g, `stroke-width="${r}"`),
    s = s.replace(/width="64"/g, `width="${t.width}"`),
    s = s.replace(/height="64"/g, `height="${t.height}"`),
    `url('data:image/svg+xml;utf8,${s = s.replace(/#/g, "%23")}')`
}
function Fl(l) {
    const e = Jr(l);
    return `${Xr(l)} ${e.width / 2} ${e.height / 2}, crosshair`
}
const _t = {
    getCursorURL: function(l) {
        return Xr(l)
    },
    setElemCrosshair: function(l, e) {
        let t = "crosshair";
        const i = ci[e.type];
        i && (t = i.cursor ? i.cursor : Fl(e)),
        l.css({
            cursor: t
        })
    },
    setGameCrosshair: function(l) {
        _t.setElemCrosshair(c("#game-area-wrapper"), l);
        const e = ci[l.type]
          , t = !e || e.cursor ? "pointer" : "inherit";
        c(".ui-zoom, .ui-medical, .ui-settings-button, .ui-weapon-switch").css({
            cursor: t
        })
    }
};
class Ie {
    constructor(e) {
        this.selector = e,
        e.find(".close").click(t => {
            this.hide()
        }
        ),
        this.modalCloseListener = t => {
            c(t.target).closest(".modal-close").length == 0 && (c(t.target).is(this.selector) || !this.checkSelector) && (t.stopPropagation(),
            this.hide())
        }
    }
    checkSelector = !0;
    skipFade = !1;
    visible = !1;
    onShowFn = function() {}
    ;
    onHideFn = function() {}
    ;
    modalCloseListener;
    onShow(e) {
        this.onShowFn = e
    }
    onHide(e) {
        this.onHideFn = e
    }
    isVisible() {
        return this.visible
    }
    show(e) {
        this.visible || (this.visible = !0,
        this.selector.finish(),
        this.selector.css("display", "block"),
        this.onShowFn(),
        e || c(document).on("click touchend", this.modalCloseListener))
    }
    hide() {
        this.visible && (this.visible = !1,
        this.skipFade ? this.selector.css("display", "none") : this.selector.fadeOut(200),
        this.onHideFn(),
        c(document).off("click touchend", this.modalCloseListener))
    }
}
function xr(l) {
    const e = {
        [_e.Top]: "customize-emote-top",
        [_e.Right]: "customize-emote-right",
        [_e.Bottom]: "customize-emote-bottom",
        [_e.Left]: "customize-emote-left",
        [_e.Win]: "customize-emote-win",
        [_e.Death]: "customize-emote-death"
    }
      , t = e[l] || e[_e.Top];
    return c(`#${t}`)
}
function Ft(l) {
    return function(e, t) {
        const i = U[e.type].rarity || 0
          , r = U[t.type].rarity || 0;
        return i == 0 && r == 0 ? qt(e, t) : i == 0 ? -1 : r == 0 ? 1 : l(e, t)
    }
}
function Nl(l, e) {
    return e.timeAcquired == l.timeAcquired ? Kr(l, e) : e.timeAcquired - l.timeAcquired
}
function qt(l, e) {
    const t = U[l.type]
      , i = U[e.type];
    return t.name < i.name ? -1 : t.name > i.name ? 1 : 0
}
function jl(l, e) {
    const t = U[l.type].rarity || 0
      , i = U[e.type].rarity || 0;
    return t == i ? qt(l, e) : i - t
}
function Kr(l, e) {
    const t = U[l.type]
      , i = U[e.type];
    return !t.category || !i.category || t.category == i.category ? qt(l, e) : t.category - i.category
}
const zr = {
    newest: Ft(Nl),
    alpha: Ft(qt),
    rarity: Ft(jl),
    subcat: Ft(Kr)
};
class Vl {
    constructor(e, t) {
        this.account = e,
        this.localization = t,
        B.touch || this.categories.push({
            loadoutType: "crosshair",
            gameType: "crosshair",
            categoryImage: "img/gui/loadout-crosshair.svg"
        }),
        this.categories.push({
            loadoutType: "player_icon",
            gameType: "emote",
            categoryImage: "img/gui/loadout-emote.svg"
        }),
        this.modalCustomize = c("#modal-customize"),
        this.modalCustomizeList = c("#modal-customize-list"),
        this.modalCustomizeItemRarity = c("#modal-customize-item-rarity"),
        this.modalCustomizeItemName = c("#modal-customize-item-name"),
        this.modalCustomizeItemLore = c("#modal-customize-item-lore"),
        this.modalCustomizeItemSource = c("#modal-customize-item-source"),
        this.modal = new Ie(this.modalCustomize),
        this.modal.onShow( () => {
            this.onShow()
        }
        ),
        this.modal.onHide( () => {
            this.onHide()
        }
        );
        const i = function() {
            c("#modal-screen-block").fadeIn(200)
        }
          , r = () => {
            this.confirmNextItem()
        }
        ;
        this.confirmItemModal = new Ie(c("#modal-item-confirm")),
        this.confirmItemModal.onShow(i),
        this.confirmItemModal.onHide(r),
        e.addEventListener("request", this.onRequest.bind(this)),
        e.addEventListener("loadout", this.onLoadout.bind(this)),
        e.addEventListener("items", this.onItems.bind(this)),
        e.addEventListener("pass", this.onPass.bind(this))
    }
    initialized = !1;
    active = !1;
    items = [];
    loadoutDisplay = null;
    loadout = fe.defaultLoadout();
    localPendingConfirm = [];
    localConfirmed = [];
    confirmingItems = !1;
    localAckItems = [];
    categories = [{
        loadoutType: "outfit",
        gameType: "outfit",
        categoryImage: "img/gui/loadout-outfit.svg"
    }, {
        loadoutType: "melee",
        gameType: "melee",
        categoryImage: "img/gui/loadout-melee.svg"
    }, {
        loadoutType: "emote",
        gameType: "emote",
        categoryImage: "img/gui/loadout-emote.svg"
    }, {
        loadoutType: "heal",
        gameType: "heal_effect",
        categoryImage: "img/gui/loadout-heal.svg"
    }, {
        loadoutType: "boost",
        gameType: "boost_effect",
        categoryImage: "img/gui/loadout-boost.svg"
    }];
    selectedItem = {
        prevSlot: null,
        img: "",
        type: ""
    };
    emotesLoaded = !1;
    selectedCatIdx = 0;
    selectedCatItems = [];
    equippedItems = [];
    modalCustomize;
    modalCustomizeList;
    modalCustomizeItemRarity;
    modalCustomizeItemName;
    modalCustomizeItemLore;
    modalCustomizeItemSource;
    picker;
    modal;
    confirmItemModal;
    itemSort;
    selectableCats;
    selectableCatConnects;
    selectableCatImages;
    selectableSlots;
    droppableSlots;
    highlightedSlots;
    itemSelected;
    highlightOpacityMin;
    init() {
        if (!this.initialized) {
            for (let r = 0; r < this.categories.length; r++) {
                const s = c("<div/>", {
                    class: "modal-customize-cat",
                    "data-idx": r
                });
                r == this.categories.length - 1 && s.attr("id", "modal-customize-cat-standalone"),
                s.append(c("<div/>", {
                    class: "modal-customize-cat-image",
                    css: {
                        "background-image": `url(${this.categories[r].categoryImage})`
                    }
                })),
                s.append(c("<div/>", {
                    class: "modal-customize-cat-connect"
                })),
                s.append(c("<div/>", {
                    class: "account-alert account-alert-cat"
                })),
                c("#modal-customize-header").append(s)
            }
            this.selectableCats = c(".modal-customize-cat"),
            this.selectableCatConnects = c(".modal-customize-cat-connect"),
            this.selectableCatImages = c(".modal-customize-cat-image"),
            this.selectableCats.on("mouseup", r => {
                const a = c(r.currentTarget).data("idx");
                this.selectedCatIdx != a && this.selectCat(a)
            }
            ),
            this.itemSort = c("#modal-customize-sort"),
            this.itemSort.on("change", r => {
                this.sortItems(r.target.value)
            }
            ),
            this.modalCustomizeItemName.on("click", () => {
                const r = document.getElementsByClassName("customize-list-item-selected");
                r.length > 0 && window.self === window.top && r[0].scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                    inline: "nearest"
                })
            }
            ),
            c("#crosshair-size").on("input", () => {
                this.updateLoadoutFromDOM()
            }
            ),
            c("#crosshair-stroke").on("input", () => {
                this.updateLoadoutFromDOM()
            }
            );
            const e = document.getElementById("color-picker");
            this.picker = new window.CP(e,!1,e),
            this.picker.self.classList.add("static"),
            this.picker.on("change", r => {
                c("#color-picker-hex").val(r),
                this.loadout?.crosshair && this.updateLoadoutFromDOM()
            }
            );
            const t = document.querySelector("#color-picker-hex")
              , i = () => {
                const r = t.value;
                if (r.length)
                    if (r.length == 6)
                        this.picker.set(`#${r}`),
                        this.picker.fire("change", [r]);
                    else if (r.length == 7 && r[0] == "#")
                        this.picker.set(r),
                        this.picker.fire("change", [r.slice(1)]);
                    else
                        return
            }
            ;
            t.oncut = i,
            t.onpaste = i,
            t.onkeyup = i,
            t.oninput = i,
            this.initialized = !0
        }
    }
    show() {
        this.init(),
        this.modal.show()
    }
    hide() {
        this.modal.hide()
    }
    onShow() {
        this.active = !0,
        this.localAckItems = [];
        for (let e = 0; e < this.items.length; e++) {
            const t = this.items[e];
            t.status < fe.ItemStatus.Ackd && this.localAckItems.push(t)
        }
        this.selectCat(0),
        this.tryBeginConfirmingItems(),
        c("#start-bottom-right, #start-main").fadeOut(200),
        c("#background").hide()
    }
    onHide() {
        this.active = !1,
        fe.modified(this.loadout, this.account.loadout) && this.account.setLoadout(this.loadout),
        this.clearConfirmItemModal(),
        this.modalCustomize.css({
            cursor: "initial"
        }),
        c("#start-bottom-right, #start-main").fadeIn(200),
        c("#background").show()
    }
    onResize() {
        B.mobile && (this.categories[this.selectedCatIdx].loadoutType == "emote" ? c("#modal-customize-list").attr("style", "") : c("#modal-customize-list").attr("style", B.isLandscape ? "" : "height: 380px"))
    }
    onRequest() {
        c("#modal-customize-loading").css("opacity", this.account.requestsInFlight > 0 ? 1 : 0)
    }
    onLoadout(e) {
        this.loadout = fe.validate(e),
        _t.setGameCrosshair(e.crosshair),
        this.active && this.selectCat(this.selectedCatIdx)
    }
    onItems(e) {
        this.items = fe.getUserAvailableItems(e);
        for (let t = 0; t < this.items.length; t++) {
            const i = this.items[t];
            i.status < fe.ItemStatus.Confirmed && !this.localPendingConfirm.find(r => r.type == i.type) && !this.localConfirmed.find(r => r.type == i.type) && this.localPendingConfirm.push(i),
            i.status < fe.ItemStatus.Ackd && !this.localAckItems.find(r => r.type == i.type) && this.localAckItems.push(i)
        }
        this.active && (this.tryBeginConfirmingItems(),
        this.selectCat(this.selectedCatIdx))
    }
    onPass(e) {
        const t = ["facebook", "instagram", "youtube", "twitter"];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = !!e.unlocks[r]
              , a = c(`.customize-social-unlock[data-lock-reason='${r}']`);
            a.css({
                display: s ? "none" : "inline-block"
            }),
            a.off("click").on("click", () => {
                this.account.setPassUnlock(r)
            }
            )
        }
    }
    getCategory(e) {
        for (let t = 0; t < this.categories.length; t++) {
            const i = this.categories[t];
            if (i.gameType == e)
                return i
        }
        return null
    }
    clearConfirmItemModal() {
        this.localPendingConfirm = [],
        this.localConfirmed = [],
        this.confirmingItems = !1,
        this.confirmItemModal.hide()
    }
    setItemsConfirmed() {
        const e = [];
        for (let t = 0; t < this.items.length; t++) {
            const i = this.items[t];
            i.status < fe.ItemStatus.Confirmed && e.push(i.type)
        }
        e.length > 0 && this.account.setItemStatus(fe.ItemStatus.Confirmed, e)
    }
    setItemsAckd(e) {
        const t = this.categories[e]
          , i = [];
        for (let r = 0; r < this.items.length; r++) {
            const s = this.items[r]
              , a = U[s.type];
            a && a.type == t.gameType && s?.status < fe.ItemStatus.Ackd && i.push(s.type)
        }
        i.length > 0 && this.account.setItemStatus(fe.ItemStatus.Ackd, i)
    }
    tryBeginConfirmingItems() {
        this.active && !this.confirmingItems && (this.confirmingItems = !0,
        this.confirmNextItem())
    }
    confirmNextItem() {
        this.setItemsConfirmed();
        const e = this.localPendingConfirm.shift();
        if (e) {
            this.localConfirmed.push(e);
            const t = U[e.type]
              , i = {
                type: e.type,
                rarity: t.rarity || 0,
                displayName: t.name,
                category: t.type
            }
              , s = `url(${X.getSvgFromGameType(e.type)})`
              , a = X.getCssTransformFromGameType(e.type);
            setTimeout( () => {
                c("#modal-item-confirm-name").html(i.displayName),
                c("#modal-item-confirm-image-inner").css({
                    "background-image": s,
                    transform: a
                }),
                this.confirmItemModal.show()
            }
            , 200)
        } else
            this.confirmingItems = !1,
            c("#modal-screen-block").fadeOut(300)
    }
    sortItems(e) {
        this.selectedCatItems.sort(zr[e]);
        const t = this.categories[this.selectedCatIdx]
          , i = c("<div/>");
        for (let r = 0; r < this.selectedCatItems.length; r++) {
            const s = this.selectedCatItems[r];
            s.outerDiv?.data("idx", r),
            i.append(s.outerDiv)
        }
        this.modalCustomizeList.html(""),
        this.modalCustomizeList.append(i),
        this.selectableSlots.off("mouseup"),
        this.setItemListeners(t.loadoutType)
    }
    setItemListeners(e) {
        if (this.selectableSlots.on("mouseup", t => {
            const i = t.currentTarget;
            if (!c(i).hasClass("customize-list-item-locked")) {
                if (this.itemSelected && !c(i).hasClass("customize-list-item")) {
                    this.itemSelected = !1;
                    return
                }
                this.selectItem(c(i)),
                this.updateLoadoutFromDOM()
            }
        }
        ),
        e == "emote")
            this.setEmoteDraggable(this.selectableSlots, this),
            this.emotesLoaded || (this.setEmoteDraggable(this.droppableSlots, this),
            this.droppableSlots.on("mouseup", t => {
                const i = t.currentTarget;
                if (!c(i).hasClass("customize-list-item-locked")) {
                    if (this.itemSelected && !c(i).hasClass("customize-list-item")) {
                        this.deselectItem();
                        return
                    }
                    this.selectItem(c(i)),
                    this.updateLoadoutFromDOM()
                }
            }
            ),
            this.droppableSlots.on("drop", t => {
                t.originalEvent?.preventDefault();
                const i = t.currentTarget
                  , r = c(i).parent();
                this.updateSlot(r, this.selectedItem.img, this.selectedItem.type),
                this.updateLoadoutFromDOM(),
                this.deselectItem()
            }
            ),
            this.droppableSlots.on("mousedown", t => {
                if (this.itemSelected) {
                    t.stopPropagation();
                    const i = c(t.currentTarget).parent();
                    this.updateSlot(i, this.selectedItem.img, this.selectedItem.type),
                    this.updateLoadoutFromDOM()
                }
            }
            ),
            this.droppableSlots.on("dragover", function(t) {
                t.originalEvent?.preventDefault(),
                c(this).parent().find(".ui-emote-hl").css("opacity", 1)
            }),
            this.droppableSlots.on("dragleave", t => {
                t.originalEvent?.preventDefault(),
                c(t.currentTarget).parent().find(".ui-emote-hl").css("opacity", this.highlightOpacityMin)
            }
            ),
            this.droppableSlots.on("dragend", t => {
                t.originalEvent?.preventDefault(),
                this.deselectItem()
            }
            ),
            c(".ui-emote-auto-trash").click(t => {
                const i = c(t.currentTarget).parent();
                this.updateSlot(i, "", ""),
                this.updateLoadoutFromDOM()
            }
            ),
            this.emotesLoaded = !0);
        else if (e == "crosshair") {
            const t = x.intToHex(this.loadout.crosshair.color)
              , i = [t.slice(1)];
            this.picker.set(t),
            c("#color-picker-hex").val(i),
            c("#crosshair-size").val(this.loadout.crosshair.size),
            c("#crosshair-stroke").val(this.loadout.crosshair.stroke)
        }
    }
    updateLoadoutFromDOM() {
        const e = this.categories[this.selectedCatIdx].loadoutType;
        if (e == "emote")
            for (let t = 0; t < _e.Count; t++) {
                const r = xr(t).data("idx")
                  , s = this.equippedItems[r];
                s?.type ? this.loadout.emotes[t] = s.type : this.loadout.emotes[t] = ""
            }
        else if (e == "crosshair") {
            const t = parseFloat(c("#crosshair-size").val())
              , i = c("#color-picker-hex").val()
              , r = parseFloat(c("#crosshair-stroke").val());
            this.loadout.crosshair = {
                type: this.selectedItem.type,
                color: x.hexToInt(i),
                size: Number(t.toFixed(2)),
                stroke: Number(r.toFixed(2))
            }
        } else
            this.loadout[e] = this.selectedItem.type;
        this.loadout = fe.validate(this.loadout),
        this.loadoutDisplay?.initialized && this.loadoutDisplay.setLoadout(this.loadout),
        this.selectedItem.loadoutType == "crosshair" && this.setSelectedCrosshair()
    }
    selectItem(e, t=!0) {
        const i = e.hasClass("customize-list-item")
          , r = i ? e : e.parent()
          , s = r.find(".customize-item-image")
          , a = r.data("idx")
          , o = r.data("slot") ? this.equippedItems[a] : this.selectedCatItems[a];
        if (!o) {
            this.itemSelected = !1,
            this.selectedItem = {
                prevSlot: null,
                img: "",
                type: ""
            };
            return
        }
        if (o.type == this.selectedItem.type && o.loadoutType == "emote" && this.selectedItem.loadoutType == "emote" && t) {
            this.deselectItem();
            return
        }
        this.itemSelected = !0,
        this.selectedItem = {
            prevSlot: i ? null : r,
            img: s.data("img"),
            type: o.type,
            rarity: o.rarity,
            displayName: o.displayName || "",
            displaySource: o.displaySource || "Unknown",
            displayLore: o.displayLore || "",
            loadoutType: o.loadoutType,
            subcat: o.subcat
        },
        this.modalCustomizeItemName.html(this.selectedItem.displayName);
        const h = this.localization.translate(`loadout-${o.displaySource}`) || this.localization.translate(`${o.displaySource}`) || this.selectedItem.displaySource
          , f = `${this.localization.translate("loadout-acquired")}: ${h}`;
        this.modalCustomizeItemSource.html(f);
        const u = {
            [qe.Locked]: "Locked",
            [qe.Faces]: "Faces",
            [qe.Food]: "Food",
            [qe.Animals]: "Animals",
            [qe.Logos]: "Logos",
            [qe.Other]: "Other",
            [qe.Flags]: "Flags",
            [qe.Default]: "Default"
        }
          , d = o.loadoutType == "emote" ? `${this.localization.translate("loadout-category")}: ${u[o.subcat]}` : this.selectedItem.displayLore;
        this.modalCustomizeItemLore.html(d);
        const p = ["stock", "common", "uncommon", "rare", "epic", "mythic"]
          , w = ["#c5c5c5", "#c5c5c5", "#12ff00", "#00deff", "#f600ff", "#d96100"]
          , S = this.localization.translate(`loadout-${p[this.selectedItem.rarity]}`);
        if (this.modalCustomizeItemRarity.html(S),
        this.modalCustomizeItemRarity.css({
            color: w[this.selectedItem.rarity]
        }),
        this.selectedItem.loadoutType == "emote" && this.highlightedSlots.css({
            display: "block",
            opacity: this.highlightOpacityMin
        }),
        this.selectableSlots.removeClass("customize-list-item-selected"),
        i ? e.addClass("customize-list-item-selected") : r.find(".ui-emote-hl").css("opacity", 1),
        this.selectedItem.loadoutType == "crosshair") {
            const y = U[this.selectedItem.type];
            y && y.type == "crosshair" && y.cursor ? c("#modal-content-right-crosshair").css("display", "none") : (c("#modal-content-right-crosshair").css("display", "block"),
            this.picker.exit(),
            this.picker.enter())
        }
        const g = this.localAckItems.findIndex(y => y.type == this.selectedItem.type);
        g !== -1 && (e.find(".account-alert").removeClass("account-alert account-alert-cat"),
        this.localAckItems.splice(g, 1),
        this.setCategoryAlerts())
    }
    updateSlot(e, t, i) {
        const r = this.selectedItem.prevSlot;
        if (this.selectedItem = {},
        r) {
            const s = e.find(".customize-item-image")
              , a = e.data("idx")
              , o = this.equippedItems[a];
            let h = "";
            o.type && (h = o.type),
            this.updateSlot(r, s.data("img"), h)
        }
        this.updateSlotData(e, t, i)
    }
    deselectItem() {
        this.itemSelected = !1,
        this.selectedItem = {},
        this.selectableSlots.removeClass("customize-list-item-selected"),
        this.highlightedSlots.css({
            display: "none",
            opacity: 0
        }),
        this.modalCustomizeItemName.html(""),
        this.modalCustomizeItemSource.html(""),
        this.modalCustomizeItemLore.html(""),
        this.modalCustomizeItemRarity.html("")
    }
    updateSlotData(e, t, i) {
        const r = e.find(".customize-emote-slot");
        r.css("background-image", t || "none"),
        r.data("img", t || "none");
        const s = U[i]
          , a = e.data("idx");
        if (s) {
            const o = {
                loadoutType: "emote",
                type: i,
                rarity: s.rarity || 0,
                displayName: s.name,
                displayLore: s.lore,
                subcat: s.category
            };
            this.equippedItems[a] = o
        } else
            this.equippedItems[a] = {}
    }
    selectCat(e) {
        const t = this.selectedCatIdx;
        if (this.selectedCatIdx = e,
        this.setItemsAckd(this.selectedCatIdx),
        t != this.selectedCatIdx) {
            const g = this.categories[t];
            for (let y = this.localAckItems.length - 1; y >= 0; y--) {
                const M = this.localAckItems[y];
                U[M.type].type == g.gameType && this.localAckItems.splice(y, 1)
            }
        }
        const i = this.categories[this.selectedCatIdx]
          , r = this.items.filter(g => {
            const y = U[g.type];
            return y && y.type == i.gameType
        }
        )
          , s = i.loadoutType == "emote" || i.loadoutType == "player_icon";
        c("#customize-sort-subcat").css("display", s ? "block" : "none");
        let a = this.itemSort.val();
        !s && a == "subcat" && (a = "newest",
        this.itemSort.val(a)),
        r.sort(zr[a]);
        const o = i.loadoutType == "emote"
          , h = i.loadoutType == "crosshair"
          , f = i.loadoutType == "emote";
        this.loadoutDisplay?.setView(i.loadoutType);
        const u = c(`.modal-customize-cat[data-idx='${this.selectedCatIdx}']`);
        this.selectableCats.removeClass("modal-customize-cat-selected"),
        this.selectableCatConnects.removeClass("modal-customize-cat-connect-selected"),
        this.selectableCatImages.removeClass("modal-customize-cat-image-selected"),
        u.addClass("modal-customize-cat-selected"),
        u.find(".modal-customize-cat-connect").addClass("modal-customize-cat-connect-selected"),
        u.find(".modal-customize-cat-image").addClass("modal-customize-cat-image-selected");
        const d = this.localization.translate(`loadout-title-${i.loadoutType}`).toUpperCase();
        c("#modal-customize-cat-title").html(d),
        c("#modal-content-right-crosshair").css("display", i.loadoutType == "crosshair" ? "block" : "none"),
        c("#modal-content-right-emote").css("display", i.loadoutType == "emote" ? "block" : "none"),
        c("#customize-emote-parent").css("display", o ? "block" : "none"),
        c("#customize-crosshair-parent").css("display", h ? "block" : "none"),
        this.modalCustomizeItemName.html(""),
        this.modalCustomizeItemSource.html(""),
        this.modalCustomizeItemLore.html(""),
        this.modalCustomizeItemRarity.html("");
        const p = function(g) {
            const y = U[g];
            return y?.name ? y.name : g
        };
        this.selectedCatItems = [];
        let w = "";
        const S = c("<div/>");
        for (let g = 0; g < r.length; g++) {
            const y = r[g]
              , M = U[y.type]
              , I = {
                loadoutType: i.loadoutType,
                type: y.type,
                rarity: M.rarity || 0,
                displayName: M.name,
                displaySource: p(y.source),
                displayLore: M.lore,
                timeAcquired: y.timeAcquired,
                idx: g,
                subcat: M.category,
                outerDiv: null
            }
              , v = c("<div/>", {
                class: "customize-list-item customize-list-item-unlocked",
                "data-idx": g
            })
              , k = X.getSvgFromGameType(y.type)
              , _ = X.getCssTransformFromGameType(y.type)
              , A = c("<div/>", {
                class: "customize-item-image",
                css: {
                    "background-image": `url(${k})`,
                    transform: _
                },
                "data-img": `url(${k})`,
                draggable: f
            });
            if (v.append(A),
            this.localAckItems.findIndex(z => z.type == y.type) !== -1) {
                const z = c("<div/>", {
                    class: "account-alert account-alert-cat",
                    css: {
                        display: "block"
                    }
                });
                v.append(z)
            }
            if (i.gameType == "crosshair") {
                const z = {
                    type: I.type,
                    color: 16777215,
                    size: 1,
                    stroke: 0
                };
                _t.setElemCrosshair(v, z)
            }
            S.append(v),
            I.outerDiv = v,
            this.selectedCatItems.push(I),
            w || (i.loadoutType == "crosshair" && I.type == this.loadout.crosshair.type || i.loadoutType != "emote" && I.type == this.loadout[i.loadoutType]) && (w = I.outerDiv)
        }
        if (this.modalCustomizeList.html(""),
        this.modalCustomizeList.append(S),
        window.self === window.top && this.modalCustomizeList.scrollTop(0),
        i.loadoutType == "emote") {
            this.equippedItems = [];
            for (let g = 0; g < this.loadout.emotes.length; g++) {
                this.equippedItems.push({});
                const y = this.loadout.emotes[g];
                if (U[y]) {
                    const I = `url(${X.getSvgFromGameType(y)})`
                      , v = xr(g);
                    this.updateSlotData(v, I, y)
                }
            }
        }
        if (this.selectableSlots = c(".customize-list-item"),
        this.droppableSlots = c(".customize-col"),
        this.highlightedSlots = this.droppableSlots.siblings(".ui-emote-hl"),
        this.highlightOpacityMin = .4,
        this.itemSelected = !1,
        this.setItemListeners(i.loadoutType),
        this.setCategoryAlerts(),
        this.deselectItem(),
        w != "" && (this.selectItem(w),
        i.loadoutType == "crosshair" && this.setSelectedCrosshair(),
        this.modalCustomizeItemName.click()),
        B.browser == "edge")
            if (i.loadoutType == "crosshair") {
                const g = function(y, M) {
                    const I = y.height() + parseInt(y.css("padding-top")) + parseInt(y.css("padding-bottom"));
                    M.css("height", I)
                };
                g(c("#modal-customize-body"), c("#modal-content-left").find(".modal-disabled")),
                g(c("#modal-content-right-crosshair"), c("#modal-content-right-crosshair").find(".modal-disabled")),
                c(".modal-disabled").css("display", "block")
            } else
                c(".modal-disabled").css("display", "none");
        this.onResize()
    }
    setCategoryAlerts() {
        for (let e = 0; e < this.categories.length; e++) {
            const t = this.categories[e]
              , i = this.localAckItems.filter(r => {
                const s = U[r.type];
                return s && s.type == t.gameType
            }
            );
            c(`.modal-customize-cat[data-idx='${e}']`).find(".account-alert-cat").css("display", i.length > 0 ? "block" : "none")
        }
    }
    setEmoteDraggable(e, t) {
        e.on("dragstart", function(i) {
            if (!c(this).hasClass("customize-list-item-locked") && (t.selectItem(c(this), !1),
            B.browser != "edge")) {
                const r = document.createElement("img");
                r.src = t.selectedItem.img ? t.selectedItem.img.replace("url(", "").replace(")", "").replace(/\'/gi, "") : "",
                i.originalEvent?.dataTransfer?.setDragImage(r, 64, 64)
            }
        })
    }
    setSelectedCrosshair() {
        const e = this.loadout.crosshair;
        c("#customize-crosshair-selected").find(".customize-item-image").css({
            "background-image": _t.getCursorURL(e)
        }),
        _t.setElemCrosshair(c("#customize-crosshair-selected"), e)
    }
}
function br(l, e, t, i) {
    const r = c("<div/>", {
        class: "copy-toast",
        html: l
    });
    e.append(r),
    r.css({
        left: i.pageX - parseInt(r.css("width")) / 2,
        top: t.offset().top
    }),
    r.animate({
        top: "-=25",
        opacity: 1
    }, {
        queue: !1,
        duration: 300,
        complete: function() {
            c(this).fadeOut(250, function() {
                c(this).remove()
            })
        }
    })
}
function Ul(l, e) {
    const t = c("#start-menu");
    c("#btn-help").click( () => {
        const g = c("#start-help");
        t.addClass("display-help");
        const y = t.css("height");
        return g.css("display", "block"),
        t.animate({
            scrollTop: y
        }, 1e3),
        !1
    }
    );
    const i = c("#team-mobile-link")
      , r = c("#team-mobile-link-desc")
      , s = c("#team-mobile-link-warning")
      , a = c("#team-link-input")
      , o = c("#social-share-block")
      , h = c("#news-block");
    c("#btn-join-team").click( () => (c("#server-warning").css("display", "none"),
    a.val(""),
    i.css("display", "block"),
    r.css("display", "block"),
    s.css("display", "none"),
    t.css("display", "none"),
    h.css("display", "none"),
    o.css("display", "none"),
    c("#right-column").css("display", "none"),
    !1)),
    c("#btn-team-mobile-link-leave").click( () => (i.css("display", "none"),
    a.val(""),
    t.css("display", "block"),
    h.css("display", "block"),
    o.css("display", "block"),
    c("#right-column").css("display", "block"),
    !1)),
    c("#team-link-input").on("keypress", function(g) {
        (g.which || g.keyCode) === 13 && (c("#btn-team-mobile-link-join").trigger("click"),
        c(this).blur())
    }),
    c("#player-name-input-solo").on("keypress", function(g) {
        (g.which || g.keyCode) === 13 && c(this).blur()
    }),
    B.mobile && B.os != "ios" && (c("#player-name-input-solo").on("focus", function() {
        if (B.isLandscape) {
            const y = B.screenHeight <= 282 ? 18 : 36;
            document.body.scrollTop = c(this).offset().top - y
        }
    }),
    c("#player-name-input-solo").on("blur", () => {
        document.body.scrollTop = 0
    }
    ));
    const f = c("#start-bottom-right")
      , u = c("#start-top-left")
      , d = c("#start-top-right")
      , p = new Ie(c("#ui-modal-keybind"));
    p.onShow( () => {
        f.fadeOut(200),
        d.fadeOut(200),
        c("#ui-modal-keybind-share").css("display", "none"),
        c("#keybind-warning").css("display", "none"),
        c("#ui-modal-keybind-list").css("height", "420px"),
        c("#keybind-code-input").html(""),
        e.refresh()
    }
    ),
    p.onHide( () => {
        f.fadeIn(200),
        d.fadeIn(200),
        e.cancelBind()
    }
    ),
    c(".btn-keybind").click( () => (p.show(),
    !1)),
    c(".js-btn-keybind-share").click( () => {
        c("#ui-modal-keybind-share").css("display") == "block" ? (c("#ui-modal-keybind-share").css("display", "none"),
        c("#ui-modal-keybind-list").css("height", "420px")) : (c("#ui-modal-keybind-share").css("display", "block"),
        c("#ui-modal-keybind-list").css("height", "275px"))
    }
    ),
    c("#keybind-link, #keybind-copy").click(g => {
        br("Copied!", p.selector, c("#keybind-link"), g);
        const y = c("#keybind-link").html();
        X.copyTextToClipboard(y)
    }
    ),
    c("#btn-keybind-code-load").on("click", g => {
        const y = c("#keybind-code-input").val();
        c("#keybind-code-input").val("");
        const M = l.fromBase64(String(y));
        c("#keybind-warning").css("display", M ? "none" : "block"),
        M && (br("Loaded!", p.selector, c("#btn-keybind-code-load"), g),
        l.saveBinds()),
        e.refresh()
    }
    );
    const w = new Ie(c("#modal-settings"));
    w.onShow( () => {
        f.fadeOut(200),
        d.fadeOut(200)
    }
    ),
    w.onHide( () => {
        f.fadeIn(200),
        d.fadeIn(200)
    }
    ),
    c(".btn-settings").click( () => (w.show(),
    !1)),
    c(".modal-settings-text").click(function(g) {
        const y = c(this).siblings("input:checkbox");
        y.prop("checked", !y.is(":checked")),
        y.trigger("change")
    });
    const S = new Ie(c("#modal-hamburger"));
    S.onShow( () => {
        u.fadeOut(200)
    }
    ),
    S.onHide( () => {
        u.fadeIn(200)
    }
    ),
    c("#btn-hamburger").click( () => (S.show(),
    !1)),
    c(".modal-body-text").click(function() {
        const g = c(this).siblings("input:checkbox");
        g.prop("checked", !g.is(":checked")),
        g.trigger("change")
    }),
    c("#force-refresh").click( () => {
        window.location.href = `/?t=${Date.now()}`
    }
    )
}
function Wl() {
    B.os == "ios" && (B.model == "iphonex" ? B.isLandscape ? c(".main-volume-slider").css("width", "90%") : c(".main-volume-slider").css("width", "") : window.navigator.standalone || (B.isLandscape ? (c("#start-main-center").attr("style", ""),
    c("#modal-customize .modal-content").attr("style", "")) : c("#modal-customize .modal-content").css({
        transform: "translate(-50%, -50%) scale(0.45)",
        top: "38%"
    }))),
    B.tablet && (c("#featured-youtuber").remove(),
    c(".btn-youtube").remove()),
    B.touch ? c(".btn-start-fullscreen").css("display", "none") : c(".btn-start-fullscreen").css("display", "block"),
    c(".btn-keybind").css("display", B.mobile ? "none" : "inline-block")
}
function ql(l) {
    c("#team-hide-url").css("display", "none"),
    l && c("#start-bottom-middle").addClass("start-bottom-middle-tablet")
}
const ni = {
    setupModals: Ul,
    onResize: Wl,
    applyMobileBrowserStyling: ql
};
class Hl {
    constructor(e, t, i, r, s) {
        this.pixi = e,
        this.audioManager = t,
        this.config = i,
        this.inputBinds = r,
        this.account = s
    }
    active = !1;
    initialized = !1;
    canvasMode;
    camera;
    renderer;
    particleBarn;
    decalBarn;
    map;
    playerBarn;
    smokeBarn;
    objectCreator;
    debugDisplay;
    loadout;
    view;
    viewOld;
    cameraOffset = m.create(0, 0);
    q = 1;
    debugZoom = 1;
    useDebugZoom = !1;
    outfitOld;
    animIdleTicker;
    animSeq;
    actionSeq;
    activeId = 98;
    activePlayer;
    init() {
        this.canvasMode = this.pixi.renderer.type == jt.CANVAS,
        this.camera = new Dr,
        this.renderer = new qr(this,this.canvasMode),
        this.particleBarn = new Or(this.renderer),
        this.decalBarn = new Rr,
        this.map = new Er(this.decalBarn),
        this.playerBarn = new Ur,
        this.smokeBarn = new Wr;
        const e = {
            [ye.Player]: this.playerBarn.playerPool,
            [ye.Obstacle]: this.map.oymOX,
            [ye.Building]: this.map.qbU,
            [ye.Structure]: this.map.SopFaJ,
            [ye.Decal]: this.decalBarn.decalPool,
            [ye.Smoke]: this.smokeBarn.EFi
        };
        this.objectCreator = new Ar;
        for (const i in e)
            e.hasOwnProperty(i) && this.objectCreator.WUYR(i, e[i]);
        this.debugDisplay = new Me;
        const t = [this.map.display.ground, this.renderer.layers[0], this.renderer.ground, this.renderer.layers[1], this.renderer.layers[2], this.renderer.layers[3], this.debugDisplay];
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            r && (r.interactiveChildren = !1,
            this.pixi.stage.addChild(r))
        }
        this.loadout = fe.defaultLoadout(),
        this.setLoadout(this.loadout),
        this.view = "outfit",
        this.viewOld = this.view,
        this.outfitOld = this.loadout.outfit,
        this.map.loadMap({
            grassInset: 18,
            groundPatches: [],
            height: 720,
            mapName: "main",
            objects: [],
            places: [],
            rivers: [],
            seed: 218051654,
            shoreInset: 48,
            width: 720
        }, this.camera, this.canvasMode, this.particleBarn),
        this.activePlayer = this.playerBarn.getPlayerById(this.activeId),
        this.activePlayer.SHTvb({
            boost: 100,
            boostDirty: !0,
            hasAction: !1,
            health: 100,
            inventoryDirty: !1,
            scopedIn: !1,
            spectatorCountDirty: !1,
            weapsDirty: !0,
            curWeapIdx: 2,
            weapons: [{
                name: "",
                ammo: 0
            }, {
                name: "",
                ammo: 0
            }, {
                name: "bayonet_rugged",
                ammo: 0
            }, {
                name: "",
                ammo: 0
            }]
        }, this.playerBarn),
        this.activePlayer.layer = this.activePlayer.pjeWp.ySWeiH,
        this.activePlayer.isLoadoutAvatar = !0,
        this.renderer.setActiveLayer(this.activePlayer.layer),
        this.audioManager.activeLayer = this.activePlayer.layer,
        this.animIdleTicker = 3,
        this.animSeq = 0,
        this.actionSeq = 0,
        this.hide(),
        this.account.addEventListener("loadout", i => {
            this.setLoadout(i, !0)
        }
        ),
        this.setLoadout(this.account.loadout, !0),
        this.initialized = !0,
        this.resize()
    }
    free() {
        if (this.initialized)
            for (this.map.Obb(),
            this.particleBarn.Obb(),
            this.renderer.Obb(); this.pixi.stage.children.length > 0; ) {
                const e = this.pixi.stage.children[0];
                this.pixi.stage.removeChild(e),
                e.destroy({
                    children: !0
                })
            }
        this.initialized = !1
    }
    setLoadout(e, t) {
        this.loadout = fe.validate(e),
        this.updateCharDisplay(),
        t && (this.outfitOld = this.loadout.outfit),
        this.activePlayer && (this.activePlayer.playActionStartSfx = !0),
        this.animIdleTicker = 0
    }
    setView(e) {
        this.viewOld = this.view,
        this.view = e
    }
    updateCharDisplay(e={}) {
        const t = {
            audioManager: this.audioManager,
            renderer: this.renderer,
            particleBarn: this.particleBarn,
            map: this.map,
            smokeBarn: this.smokeBarn,
            decalBarn: this.decalBarn
        };
        this.activePlayer?.useItemEmitter && (this.activePlayer.useItemEmitter.stop(),
        this.activePlayer.useItemEmitter = null,
        this.animIdleTicker = 0);
        const i = {
            outfit: this.loadout.outfit,
            backpack: "backpack02",
            helmet: "helmet01",
            chest: "chest03",
            activeWeapon: this.loadout.melee,
            layer: 0,
            dead: !1,
            downed: !1,
            animType: e.animType || 0,
            animSeq: e.animSeq || 0,
            actionSeq: e.actionSeq || 0,
            actionType: e.actionType || 0,
            actionItem: e.actionItem || "",
            wearingPan: !1,
            healEffect: !1,
            frozen: !1,
            frozenOri: 0,
            hasteType: 0,
            hasteSeq: 0,
            scale: 1,
            role: "",
            perks: [],
            $r: !1,
            pos: m.create(50, 50),
            dir: m.create(0, -1)
        };
        this.objectCreator.BsiUaJ(ye.Player, 98, i, t),
        this.playerBarn.setPlayerInfo({
            playerId: 98,
            teamId: 0,
            groupId: 0,
            name: "",
            loadout: {
                heal: this.loadout.heal,
                boost: this.loadout.boost
            }
        })
    }
    getCameraTargetZoom() {
        return document.getElementById("modal-content-left").getBoundingClientRect().height / this.camera.XbB * .2 * this.camera.XbB * .5 / this.camera.hPMoEE
    }
    getCameraLoadoutOffset() {
        const e = this.camera.uha
          , t = this.getCameraTargetZoom();
        this.camera.uha = t;
        const r = document.getElementById("modal-content-left").getBoundingClientRect()
          , s = H.createAabb(this.camera.YMmm(m.create(r.left, r.top + r.height)), this.camera.YMmm(m.create(r.left + r.width, r.top)))
          , a = m.mul(m.sub(s.max, s.min), .5)
          , o = m.add(s.min, a)
          , h = H.createAabb(this.camera.YMmm(m.create(0, this.camera.XbB)), this.camera.YMmm(m.create(this.camera.zaTP, 0)))
          , f = m.mul(m.sub(h.max, h.min), .5)
          , u = m.add(h.min, f)
          , d = m.sub(o, u)
          , p = f.x - d.x - a.x
          , w = b.clamp(p * .5, 2.5, 6)
          , g = m.create(d.x + a.x + w, d.y + .33);
        return this.camera.uha = e,
        g
    }
    show() {
        this.active || (this.active = !0,
        this.resize())
    }
    hide() {
        this.active && (this.active = !1,
        this.camera.uha = 2)
    }
    update(e, t) {
        const i = {
            render: {}
        };
        if (this.camera.HiVuim = m.sub(this.activePlayer.HiVuim, this.cameraOffset),
        this.camera.uha = b.lerp(e * 5, this.camera.uha, this.camera.RncwCq),
        this.audioManager.cameraPos = m.copy(this.camera.HiVuim),
        t && (this.view == this.viewOld || this.view != "heal" && this.view != "boost" || (this.animIdleTicker = 0),
        this.viewOld = this.view,
        this.animIdleTicker -= e,
        this.animIdleTicker < 0)) {
            if (this.view == "heal") {
                this.actionSeq = (this.actionSeq + 1) % 8;
                const s = {
                    actionType: O.Action.UseItem,
                    actionItem: "bandage",
                    actionSeq: this.actionSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 2 + Math.random()
            } else if (this.view == "boost") {
                this.actionSeq = (this.actionSeq + 1) % 8;
                const s = {
                    actionType: O.Action.UseItem,
                    actionItem: "soda",
                    actionSeq: this.actionSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 2 + Math.random()
            } else if (this.view != "emote" && this.view != "crosshair") {
                this.animSeq = (this.animSeq + 1) % 8;
                const s = {
                    animType: O.Anim.Melee,
                    animSeq: this.animSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 1.5 + Math.random()
            }
        }
        const r = this.loadout.outfit != this.outfitOld;
        if (this.outfitOld = this.loadout.outfit,
        t && r) {
            const s = U[this.loadout.outfit];
            s && this.audioManager.playSound(s.sound.pickup, {
                channel: "ui"
            })
        }
        this.playerBarn.nYcwKO(e, this.activeId, this.teamMode, this.renderer, this.particleBarn, this.camera, this.map, this.inputBinds, this.audioManager, !1, !1, !1),
        this.smokeBarn.nYcwKO(e, this.camera, this.activePlayer, this.map, this.renderer),
        this.particleBarn.nYcwKO(e, this.camera, i),
        this.decalBarn.nYcwKO(e, this.camera, this.renderer, i),
        this.renderer.nYcwKO(e, this.camera, this.map, i),
        this.activePlayer.playActionStartSfx = !1,
        this.render(e, i)
    }
    render(e, t) {
        const i = this.map.mapLoaded ? this.map.getMapDef().biome.colors.grass : 8433481;
        this.pixi.renderer.background.color = i,
        this.playerBarn.FQpmn(this.camera, t),
        this.map.FQpmn(this.camera),
        pi.FQpmn(this.camera, this.debugDisplay),
        pi.flush()
    }
    resize() {
        this.initialized && (this.camera.zaTP = B.screenWidth,
        this.camera.XbB = B.screenHeight,
        this.map.resize(this.pixi.renderer, this.canvasMode),
        this.renderer.resize(this.map, this.camera),
        this.camera.RncwCq = this.getCameraTargetZoom(),
        this.cameraOffset = this.getCameraLoadoutOffset())
    }
}
const kr = 99
  , ut = {
    getPassMaxLevel: function() {
        return kr
    },
    getPassLevelXp: function(l, e) {
        const t = bi[l]
          , i = e - 1;
        return i < t.xp.length ? t.xp[i] : t.xp[t.xp.length - 1]
    },
    getPassLevelAndXp: function(l, e) {
        let t = e
          , i = 1;
        for (; i < kr; ) {
            const r = ut.getPassLevelXp(l, i);
            if (t < r)
                break;
            t -= r,
            i++
        }
        return {
            level: i,
            xp: t,
            nextLevelXp: ut.getPassLevelXp(l, i)
        }
    },
    timeUntilQuestRefresh: function(l) {
        return Math.floor((l - 252e5 + 864e5 - 1) / 864e5) * 864e5 + 252e5 - Date.now()
    }
};
function vr(l, e) {
    for (let t = bi[l], i = 0; i < t.items.length; i++)
        if (t.items[i].level == e + 1)
            return t.items[i].item;
    return ""
}
function mi(l, e=!1) {
    const t = Math.floor(Math.ceil(l / 60) / 60)
      , i = e ? Math.floor(l / 60) % 60 : Math.ceil(l / 60) % 60;
    let r = "";
    return t > 0 && (r += `${t}h `),
    r += `${i}m`
}
class Gl {
    constructor(e, t, i) {
        this.account = e,
        this.loadoutMenu = t,
        this.localization = i,
        this.account = e,
        this.loadoutMenu = t,
        this.localization = i,
        this.account.addEventListener("request", this.onRequest.bind(this)),
        this.account.addEventListener("pass", this.onPass.bind(this)),
        this.loadPlaceholders(),
        c("#pass-progress-unlock-wrapper").hover( () => {
            c("#pass-unlock-tooltip").fadeIn(50)
        }
        , () => {
            c("#pass-unlock-tooltip").fadeOut(50)
        }
        )
    }
    pass = {
        data: {
            type: "pass_survivr1"
        },
        currentXp: 0,
        currentLevel: 1,
        levelXp: 0,
        ticker: 0,
        animSteps: [],
        elems: {}
    };
    quests = [];
    loaded = !1;
    lockDisplayed = !1;
    updatePass = !1;
    updatePassTicker = 0;
    onPass(e, t, i) {
        const s = [];
        let a = 0;
        for (let w = 0; w < t.length; w++)
            (S => {
                const g = t[S]
                  , y = {
                    data: g,
                    start: 0,
                    current: 0,
                    ticker: 0,
                    delay: a * .5,
                    playCompleteAnim: !1,
                    progressAnimFinished: !1,
                    completeAnimFinished: !1,
                    shouldRequestRefresh: i,
                    refreshTime: Date.now() + g.timeToRefresh + 5e3,
                    refreshSet: !1,
                    refreshEnabled: !1,
                    timer: {
                        enabled: !1,
                        str: ""
                    }
                }
                  , M = this.quests.find(z => z.data.idx == y.data.idx && z.data.type == y.data.type);
                M && (y.start = M.current,
                y.current = M.current,
                !M.data.complete && y.data.complete && (y.playCompleteAnim = !0)),
                y.data.progress = b.min(y.data.progress, y.data.target),
                y.data.progress > y.current && a++;
                const I = c(`#pass-quest-${y.data.idx}`);
                y.elems = {
                    main: I,
                    xp: I.find(".pass-quest-xp"),
                    info: I.find(".pass-quest-info"),
                    desc: I.find(".pass-quest-desc"),
                    cur: I.find(".pass-quest-counter-current"),
                    target: I.find(".pass-quest-counter-target"),
                    refresh: I.find(".pass-quest-refresh"),
                    refreshPrompt: I.find(".pass-quest-refresh-prompt"),
                    refreshConfirm: I.find(".pass-quest-refresh-confirm"),
                    refreshCancel: I.find(".pass-quest-refresh-cancel"),
                    counter: I.find(".pass-quest-counter"),
                    barFill: I.find(".pass-quest-bar-fill"),
                    timer: I.find(".pass-quest-timer"),
                    loading: I.find(".pass-quest-spinner")
                },
                y.elems.barFill.clearQueue(),
                y.elems.main.removeClass("pass-bg-pulse"),
                y.elems.main.stop().css({
                    opacity: 1
                }),
                y.elems.xp.removeClass("pass-text-pulse"),
                y.elems.refresh.stop().css({
                    opacity: 1
                }),
                y.elems.counter.stop().css({
                    opacity: 1
                });
                const v = Li[y.data.type]
                  , k = this.localization.translate(`${y.data.type}`) || y.data.type
                  , _ = y.current / y.data.target * 100;
                y.elems.main.css("display", "block"),
                y.elems.desc.html(k),
                y.elems.cur.html(Math.round(y.current)),
                y.elems.xp.html(`${v.xp} XP`),
                y.elems.barFill.css({
                    width: `${_}%`
                }),
                y.elems.loading.css("display", "none");
                let A = y.data.target;
                v.timed && (A = mi(A)),
                y.elems.target.html(A),
                v.icon ? (y.elems.desc.addClass("pass-quest-desc-icon"),
                y.elems.desc.css({
                    "background-image": `url(${v.icon})`
                })) : (y.elems.desc.removeClass("pass-quest-desc-icon"),
                y.elems.desc.attr("style", "")),
                this.setQuestRefreshEnabled(y),
                s.push(y)
            }
            )(w);
        if (this.quests = s,
        this.pass.data = e,
        this.pass.animSteps = [],
        this.pass.currentXp = Math.round(this.pass.currentXp),
        this.pass.levelXp = ut.getPassLevelXp(e.type, this.pass.currentLevel),
        !this.loaded) {
            const w = ut.getPassLevelXp(e.type, e.level);
            this.pass.currentXp = 0,
            this.pass.currentLevel = e.level,
            this.pass.levelXp = w,
            this.pass.ticker = 0
        }
        let o = this.pass.currentLevel
          , h = this.pass.currentXp;
        if (this.loaded) {
            for (; o < e.level; ) {
                const S = ut.getPassLevelXp(e.type, o);
                this.pass.animSteps.push({
                    startXp: h,
                    targetXp: S,
                    levelXp: S,
                    targetLevel: o + 1
                }),
                o++,
                h = 0
            }
            const w = a > 0 ? 2 : 0;
            this.pass.ticker = -w
        }
        const f = ut.getPassLevelXp(e.type, o);
        this.pass.animSteps.push({
            startXp: h,
            targetXp: e.xp,
            levelXp: f,
            targetLevel: o
        }),
        c("#pass-block").css("z-index", "1"),
        c("#pass-locked").css("display", "none"),
        c("#pass-loading").css("display", "none");
        const u = vr(this.pass.data.type, this.pass.currentLevel);
        this.setPassUnlockImage(u);
        const d = this.localization.translate(e.type).toUpperCase();
        c("#pass-name-text").html(d),
        c("#pass-progress-level").html(this.pass.currentLevel),
        c("#pass-progress-xp-current").html(this.pass.currentXp),
        c("#pass-progress-xp-target").html(this.pass.levelXp);
        const p = this.pass.currentXp / this.pass.levelXp * 100;
        c("#pass-progress-bar-fill").css({
            width: `${p}%`
        }),
        this.loaded = !0
    }
    onRequest(e) {
        c("#pass-loading").css("display", e.loggingIn ? "block" : "none")
    }
    scheduleUpdatePass(e) {
        this.updatePass = !0,
        this.updatePassTicker = e
    }
    setQuestRefreshEnabled(e) {
        const t = !e.data.rerolled && !e.data.complete || e.refreshTime - Date.now() < 0;
        (t != e.refreshEnabled || !e.refreshSet) && (e.refreshEnabled = t,
        e.refreshSet = !0,
        e.elems.refresh.off("click"),
        e.elems.refreshConfirm.off("click"),
        e.elems.refreshCancel.off("click"),
        e.refreshEnabled ? (e.elems.refreshConfirm.on("click", () => {
            e.elems.loading.css("display", "block"),
            e.elems.refreshPrompt.css("display", "none"),
            this.account.refreshQuest(e.data.idx)
        }
        ),
        e.elems.refreshCancel.on("click", () => {
            e.elems.refreshPrompt.css("display", "none"),
            e.elems.info.css("display", "block")
        }
        ),
        e.elems.refresh.on("click", () => {
            e.elems.refreshPrompt.css("display", "block"),
            e.elems.info.css("display", "none")
        }
        ),
        e.elems.refresh.removeClass("pass-quest-refresh-disabled")) : e.elems.refresh.addClass("pass-quest-refresh-disabled"))
    }
    setPassUnlockImage(e) {
        const t = U[e]
          , r = `url(${t ? X.getSvgFromGameType(e) : "img/emotes/surviv.svg"})`
          , s = X.getCssTransformFromGameType(e);
        c("#pass-progress-unlock").css({
            opacity: t ? 1 : .15,
            transform: `translate(-50%, -50%) ${s}`
        }),
        c("#pass-progress-unlock-image").css({
            "background-image": r
        });
        const a = t ? this.localization.translate(`loadout-title-${this.loadoutMenu.getCategory(t.type).loadoutType}`).toUpperCase() : ""
          , o = c("#pass-unlock-tooltip");
        o.css("opacity", t ? 1 : 0),
        o.find(".tooltip-pass-title").html(a),
        o.find(".tooltip-pass-desc").html(t ? t.name : "");
        const h = t ? `url(${this.loadoutMenu.getCategory(t.type).categoryImage})` : "";
        c("#pass-progress-unlock-type-image").css({
            "background-image": h
        }),
        c("#pass-progress-unlock-type-wrapper").css({
            display: t ? "block" : "none"
        })
    }
    animatePassLevelUp() {
        const e = c("#pass-progress-bar-fill")
          , t = c("#pass-progress-level")
          , i = c("#pass-progress-unlock-wrapper")
          , r = c("#pass-progress-unlock-image")
          , s = c("#pass-progress-unlock-type-image");
        t.html(this.pass.currentLevel),
        e.queue(a => {
            i.addClass("pass-unlock-pulse"),
            c(a).dequeue()
        }
        ).delay(750).queue(a => {
            r.animate({
                opacity: 0
            }, 250),
            s.animate({
                opacity: 0
            }, 250),
            c(a).dequeue()
        }
        ).delay(250).queue(a => {
            const o = vr(this.pass.data.type, this.pass.currentLevel);
            this.setPassUnlockImage(o),
            i.removeClass("pass-unlock-pulse"),
            r.animate({
                opacity: 1
            }, 250),
            s.animate({
                opacity: 1
            }, 250),
            c(a).dequeue()
        }
        )
    }
    animateQuestComplete(e) {
        e.elems.barFill.queue(t => {
            e.elems.main.addClass("pass-bg-pulse"),
            e.elems.xp.addClass("pass-text-pulse"),
            e.elems.refresh.animate({
                opacity: .25
            }, 250),
            e.elems.refresh.removeClass("pass-quest-refresh-disabled"),
            e.elems.refresh.animate({
                opacity: 0
            }, 250),
            e.elems.counter.animate({
                opacity: 0
            }, 250),
            e.elems.desc.html("QUEST COMPLETE!"),
            c(t).dequeue()
        }
        ).delay(1e3).queue(t => {
            e.elems.main.animate({
                opacity: 0
            }, 750),
            c(t).dequeue()
        }
        )
    }
    update(e) {
        this.updatePassTicker -= e,
        this.updatePass && this.updatePassTicker < 0 && (this.updatePass = !1,
        this.account.getPass(!1));
        for (let t = 0; t < this.quests.length; t++) {
            const i = this.quests[t];
            if (this.setQuestRefreshEnabled(i),
            i.ticker += e,
            !i.progressAnimFinished) {
                const a = b.clamp((i.ticker - i.delay) / 1, 0, 1);
                i.current = b.lerp(b.easeOutExpo(a), i.start, i.data.progress);
                const o = i.current / i.data.target * 100
                  , h = Li[i.data.type];
                let f = Math.round(i.current);
                h.timed && (f = mi(f, !0)),
                i.elems.cur.html(f),
                i.elems.barFill.css({
                    width: `${o}%`
                }),
                a >= 1 && (i.progressAnimFinished = !0)
            }
            i.playCompleteAnim && !i.completeAnimFinished && i.ticker - i.delay > 1.25 && (this.animateQuestComplete(i),
            i.completeAnimFinished = !0);
            const r = !i.playCompleteAnim || i.completeAnimFinished && i.ticker - i.delay > 4.25;
            i.data.complete && r && i.refreshEnabled && i.shouldRequestRefresh && (i.shouldRequestRefresh = !1,
            this.account.refreshQuest(i.data.idx));
            const s = i.data.complete && r;
            if (s != i.timer.displayed) {
                i.timer.displayed = s,
                i.elems.main.removeClass("pass-bg-pulse"),
                i.elems.main.stop().animate({
                    opacity: 1
                }, 250);
                const a = i.elems.refreshPrompt.css("display") == "block";
                i.elems.info.css("display", s || a ? "none" : "block"),
                i.elems.timer.css("display", s ? "block" : "none")
            }
            if (s) {
                const a = Math.max(i.refreshTime - Date.now(), 0)
                  , o = mi(a / 1e3);
                o != i.timer.str && (i.timer.str = o,
                i.elems.timer.html(o))
            }
        }
        if (this.pass.ticker += e,
        this.pass.animSteps.length > 0 && this.pass.ticker >= 0) {
            const t = this.pass.animSteps[0]
              , i = b.clamp(this.pass.ticker / 1.5, 0, 1);
            this.pass.currentXp = b.lerp(b.easeOutExpo(i), t.startXp, t.targetXp),
            this.pass.levelXp = t.levelXp;
            const r = this.pass.currentXp / t.levelXp * 100;
            c("#pass-progress-xp-current").html(Math.round(this.pass.currentXp)),
            c("#pass-progress-xp-target").html(this.pass.levelXp),
            c("#pass-progress-bar-fill").css({
                width: `${r}%`
            }),
            i >= 1 && (t.targetLevel > this.pass.currentLevel && (this.pass.currentLevel = t.targetLevel,
            this.animatePassLevelUp()),
            this.pass.animSteps.shift(),
            this.pass.ticker -= 3)
        }
        !this.account.loggingIn && !this.account.loggedIn && !this.lockDisplayed && (c("#pass-block").css("z-index", "1"),
        c("#pass-loading").css("display", "none"),
        c("#pass-locked").css("display", "block"),
        this.lockDisplayed = !0)
    }
    onResize() {}
    loadPlaceholders() {
        const e = bi.pass_survivr1
          , t = this.localization.translate("pass_survivr1").toUpperCase();
        c("#pass-name-text").html(t),
        c("#pass-progress-level").html(1),
        c("#pass-progress-xp-current").html(0),
        c("#pass-progress-xp-target").html(e.xp[0]),
        this.setPassUnlockImage(e.items[0].item)
    }
}
function Ql(l, e, t, i) {
    const r = l.find(".login-options-content");
    r.empty(),
    e && r.append(c("<div/>", {
        class: "account-login-desc"
    }).append(c("<p/>", {
        html: i.translate("index-link-account-to")
    })));
    const s = c("<div/>", {
        class: "account-buttons"
    });
    r.append(s);
    const a = function(o, h, f) {
        const u = c("<div/>", {
            class: `menu-option btn-darken btn-standard btn-login-${o}`
        });
        u.append(c("<span/>", {
            class: "login-button-name"
        }).append(c("<span/>", {
            html: i.translate(`index-${o}`)
        })).append(c("<div/>", {
            class: "icon"
        }))),
        e && h ? (u.addClass("btn-login-linked"),
        u.find("span.login-button-name").html('<div class="icon"></div>')) : u.click(d => {
            f()
        }
        ),
        s.append(u)
    };
    ct.loginSupported("google") && a("google", t.profile.linkedGoogle, () => {
        window.location.href = He.resolveUrl("/api/auth/google")
    }
    ),
    ct.loginSupported("discord") && a("discord", t.profile.linkedDiscord, () => {
        window.location.href = He.resolveUrl("/api/auth/discord")
    }
    ),
    ct.loginSupported("mock") && a("mock", !1, () => {
        window.location.href = He.resolveUrl("/api/auth/mock")
    }
    )
}
class $l {
    constructor(e, t, i, r) {
        this.account = e,
        this.localization = t,
        this.loadoutMenu = i,
        this.errorModal = r,
        this.account = e,
        this.localization = t,
        this.loadoutMenu = i,
        this.errorModal = r,
        e.addEventListener("error", this.onError.bind(this)),
        e.addEventListener("login", this.onLogin.bind(this)),
        e.addEventListener("loadout", this.onLoadoutUpdated.bind(this)),
        e.addEventListener("items", this.onItemsUpdated.bind(this)),
        e.addEventListener("request", this.render.bind(this)),
        this.initUi(),
        this.render()
    }
    setNameModal = null;
    resetStatsModal = null;
    deleteAccountModal = null;
    userSettingsModal = null;
    loginOptionsModal = null;
    createAccountModal = null;
    loginOptionsModalMobile;
    modalMobileAccount;
    initUi() {
        const e = function() {
            c("#modal-body-warning").css("display", "none"),
            c("#modal-account-name-input").val("")
        };
        this.setNameModal = new Ie(c("#modal-account-name-change")),
        this.setNameModal.onShow(e),
        this.setNameModal.onHide(e),
        c("#modal-account-name-finish").click(i => {
            i.stopPropagation();
            const r = c("#modal-account-name-input").val();
            this.account.setUsername(r, s => {
                if (s) {
                    const a = {
                        failed: "Failed setting username.",
                        invalid: "Invalid username.",
                        taken: "Name already taken!",
                        change_time_not_expired: "Username has already been set recently."
                    }
                      , o = a[s] || a.failed;
                    c("#modal-body-warning").hide(),
                    c("#modal-body-warning").html(o),
                    c("#modal-body-warning").fadeIn()
                } else
                    this.setNameModal.hide()
            }
            )
        }
        ),
        c("#modal-account-name-input").on("keypress", i => {
            (i.which || i.keyCode) === 13 && c("#modal-account-name-finish").trigger("click")
        }
        ),
        this.resetStatsModal = new Ie(c("#modal-account-reset-stats")),
        this.resetStatsModal.onShow( () => {
            c("#modal-account-reset-stats-input").val(""),
            this.modalMobileAccount.hide()
        }
        ),
        c("#modal-account-reset-stats-finish").click(i => {
            i.stopPropagation(),
            c("#modal-account-reset-stats-input").val() == "RESET STATS" && (this.account.resetStats(),
            this.resetStatsModal.hide())
        }
        ),
        c("#modal-account-reset-stats-input").on("keypress", i => {
            (i.which || i.keyCode) === 13 && c("#modal-account-reset-stats-finish").trigger("click")
        }
        ),
        this.deleteAccountModal = new Ie(c("#modal-account-delete")),
        this.deleteAccountModal.onShow( () => {
            c("#modal-account-delete-input").val(""),
            this.modalMobileAccount.hide()
        }
        ),
        c("#modal-account-delete-finish").click(i => {
            i.stopPropagation(),
            c("#modal-account-delete-input").val() == "DELETE" && (this.account.deleteAccount(),
            this.deleteAccountModal.hide())
        }
        ),
        c("#modal-account-delete-input").on("keypress", i => {
            (i.which || i.keyCode) === 13 && c("#modal-account-delete-finish").trigger("click")
        }
        ),
        this.userSettingsModal = new Ie(c(".account-buttons-settings")),
        this.userSettingsModal.checkSelector = !1,
        this.userSettingsModal.skipFade = !0,
        this.userSettingsModal.onShow( () => {
            c(".account-details-top").css("display", "none")
        }
        ),
        this.userSettingsModal.onHide( () => {
            c(".account-details-top").css("display", "block")
        }
        ),
        this.loginOptionsModal = new Ie(c("#account-login-options")),
        this.loginOptionsModal.checkSelector = !1,
        this.loginOptionsModal.skipFade = !0,
        this.loginOptionsModal.onShow( () => {
            c(".account-details-top").css("display", "none")
        }
        ),
        this.loginOptionsModal.onHide( () => {
            c(".account-details-top").css("display", "block")
        }
        ),
        this.loginOptionsModalMobile = new Ie(c("#account-login-options-mobile")),
        this.loginOptionsModalMobile.checkSelector = !1,
        this.loginOptionsModalMobile.skipFade = !0,
        this.loginOptionsModalMobile.onShow( () => {
            c(".account-details-top").css("display", "none")
        }
        ),
        this.loginOptionsModalMobile.onHide( () => {
            c(".account-details-top").css("display", "block")
        }
        ),
        this.createAccountModal = new Ie(c("#modal-create-account")),
        this.createAccountModal.onHide( () => {
            this.loadoutMenu.hide()
        }
        ),
        this.modalMobileAccount = new Ie(c("#modal-mobile-account")),
        this.modalMobileAccount.onShow( () => {
            c("#start-top-right").css("display", "none"),
            c(".account-details-top").css("display", "none")
        }
        ),
        this.modalMobileAccount.onHide( () => {
            c("#start-top-right").css("display", "block"),
            c(".account-details-top").css("display", "block"),
            this.userSettingsModal.hide()
        }
        ),
        c(".account-leaderboard-link").click(i => (window.open("/stats", "_blank"),
        !1)),
        c(".account-stats-link").click( () => (this.waitOnLogin( () => {
            if (this.account.loggedIn)
                if (this.account.profile.usernameSet) {
                    const i = this.account.profile.slug || "";
                    window.open(`/stats/?slug=${i}`, "_blank")
                } else
                    this.setNameModal.show(!0);
            else
                this.showLoginMenu({
                    modal: !0
                })
        }
        ),
        !1)),
        c(".account-loadout-link, #btn-customize").click( () => (this.loadoutMenu.show(),
        !1)),
        c(".account-details-user").click( () => (this.userSettingsModal.isVisible() || this.loginOptionsModal.isVisible() ? (this.userSettingsModal.hide(),
        this.loginOptionsModal.hide()) : this.waitOnLogin( () => {
            B.mobile && this.modalMobileAccount.show(),
            this.account.loggedIn ? (this.loginOptionsModal.hide(),
            this.userSettingsModal.show()) : this.showLoginMenu({
                modal: !1
            })
        }
        ),
        !1)),
        c(".btn-account-link").click( () => (this.userSettingsModal.hide(),
        this.showLoginMenu({
            modal: !1,
            link: !0
        }),
        !1)),
        c(".btn-account-change-name").click( () => (this.account.profile.usernameChangeTime <= 0 && (this.userSettingsModal.hide(),
        this.modalMobileAccount.hide(),
        c("#modal-account-name-title").html(this.localization.translate("index-change-account-name")),
        this.setNameModal.show()),
        !1)),
        c(".btn-account-reset-stats").click( () => (this.userSettingsModal.hide(),
        this.resetStatsModal.show(),
        !1)),
        c(".btn-account-delete").click( () => (this.userSettingsModal.hide(),
        this.deleteAccountModal.show(),
        !1)),
        c(".btn-account-logout").click( () => (this.account.logout(),
        !1)),
        c("#btn-pass-locked").click( () => (this.showLoginMenu({
            modal: !0
        }),
        !1));
        const t = !we.isAnySDK && ct.anyLoginSupported();
        c(".account-block").toggle(t)
    }
    onError(e, t) {
        const r = {
            server_error: "Operation failed, please try again later.",
            facebook_account_in_use: "Failed linking Facebook account.<br/>Account already in use!",
            google_account_in_use: "Failed linking Google account.<br/>Account already in use!",
            twitch_account_in_use: "Failed linking Twitch account.<br/>Account already in use!",
            discord_account_in_use: "Failed linking Discord account.<br/>Account already in use!",
            account_banned: `Account banned: ${t}`,
            login_failed: "Login failed."
        }[e];
        r && (this.errorModal.selector.find(".modal-body-text").html(r),
        this.errorModal.show())
    }
    onLogin() {
        this.createAccountModal.hide(),
        this.loginOptionsModalMobile.hide(),
        this.loginOptionsModal.hide(),
        this.account.profile.usernameSet || this.setNameModal.show(!0)
    }
    onLoadoutUpdated(e) {
        this.updateUserIcon()
    }
    onItemsUpdated(e) {
        let t = 0
          , i = 0;
        for (let s = 0; s < e.length; s++) {
            const a = e[s];
            a.status < fe.ItemStatus.Confirmed && t++,
            a.status < fe.ItemStatus.Ackd && i++
        }
        e.filter(s => s.status < fe.ItemStatus.Confirmed),
        e.filter(s => s.status < fe.ItemStatus.Ackd);
        const r = t > 0 || i > 0;
        c("#loadout-alert-main").css({
            display: r ? "block" : "none"
        })
    }
    waitOnLogin(e) {
        if (this.account.loggingIn && !this.account.loggedIn) {
            const t = () => {
                e(),
                this.account.removeEventListener("requestsComplete", t)
            }
            ;
            this.account.addEventListener("requestsComplete", t)
        } else
            e()
    }
    showLoginMenu(e) {
        e = {
            modal: !1,
            link: !1,
            ...e
        };
        const t = e.modal ? this.createAccountModal : B.mobile ? this.loginOptionsModalMobile : this.loginOptionsModal;
        Ql(t.selector, e.link, this.account, this.localization),
        t.show()
    }
    updateUserIcon() {
        const e = X.getSvgFromGameType(this.account.loadout.player_icon) || "img/gui/player-gui.svg";
        c(".account-details-user .account-avatar").css("background-image", `url(${e})`)
    }
    render() {
        const e = this.account.requestsInFlight > 0;
        c(".account-loading").css("opacity", e ? 1 : 0);
        let t = X.htmlEscape(this.account.profile.username || "");
        this.account.loggedIn || (t = this.account.loggingIn ? `${this.localization.translate("index-logging-in")}...` : this.localization.translate("index-log-in-desc")),
        c("#account-player-name").html(t),
        c("#account-player-name").css("display", this.account.loggedIn ? "block" : "none"),
        c("#account-login").css("display", this.account.loggedIn ? "none" : "block"),
        this.updateUserIcon(),
        this.account.profile.usernameChangeTime <= 0 ? c(".btn-account-change-name").removeClass("btn-account-disabled") : c(".btn-account-change-name").addClass("btn-account-disabled")
    }
}
function _r(l, e) {
    const t = {
        join_full: e.translate("index-team-is-full"),
        join_not_found: e.translate("index-failed-joining-team"),
        create_failed: e.translate("index-failed-creating-team"),
        join_failed: e.translate("index-failed-joining-team"),
        join_game_failed: e.translate("index-failed-joining-game"),
        lost_conn: e.translate("index-lost-connection"),
        find_game_error: e.translate("index-failed-finding-game"),
        find_game_full: e.translate("index-failed-finding-game"),
        find_game_invalid_protocol: e.translate("index-invalid-protocol"),
        find_game_invalid_captcha: e.translate("index-invalid-captcha"),
        kicked: e.translate("index-team-kicked"),
        banned: e.translate("index-ip-banned"),
        behind_proxy: "behind_proxy"
    };
    return t[l] || t.lost_conn
}
class Jl {
    constructor(e, t, i, r, s, a, o) {
        this.config = e,
        this.pingTest = t,
        this.siteInfo = i,
        this.localization = r,
        this.audioManager = s,
        this.joinGameCb = a,
        this.leaveCb = o,
        this.serverSelect.change( () => {
            const h = this.serverSelect.find(":selected").val();
            this.pingTest.start([h]),
            this.setRoomProperty("region", h)
        }
        ),
        this.queueMode1.click( () => {
            this.setRoomProperty("gameModeIdx", 1)
        }
        ),
        this.queueMode2.click( () => {
            this.setRoomProperty("gameModeIdx", 2)
        }
        ),
        this.fillAuto.click( () => {
            this.setRoomProperty("autoFill", !0)
        }
        ),
        this.fillNone.click( () => {
            this.setRoomProperty("autoFill", !1)
        }
        ),
        this.playBtn.on("click", () => {
            we.requestMidGameAd( () => {
                this.tryStartGame()
            }
            )
        }
        ),
        c("#team-copy-url, #team-desc-text").click(h => {
            const f = c("<div/>", {
                class: "copy-toast",
                html: "Copied!"
            });
            c("#start-menu-wrapper").append(f),
            f.css({
                left: h.pageX - parseInt(f.css("width")) / 2,
                top: c("#team-copy-url").offset().top
            }),
            f.animate({
                top: "-=20",
                opacity: 1
            }, {
                queue: !1,
                duration: 300,
                complete: function() {
                    c(this).fadeOut(250, function() {
                        c(this).remove()
                    })
                }
            });
            let u = c("#team-url").text();
            window !== window.top && (u = this.roomData.roomUrl.substring(1)),
            X.copyTextToClipboard(u)
        }
        ),
        window !== window.top && c("#team-desc-text").hide(),
        B.mobile || (this.hideUrl = !1,
        c("#team-hide-url").click(h => {
            const f = h.currentTarget;
            this.hideUrl = !this.hideUrl,
            c("#team-desc-text, #team-code-text").css({
                opacity: this.hideUrl ? 0 : 1
            }),
            c(f).css({
                "background-image": this.hideUrl ? "url(../img/gui/hide.svg)" : "url(../img/gui/eye.svg)"
            })
        }
        ))
    }
    playBtn = c("#btn-start-team");
    serverWarning = c("#server-warning");
    teamOptions = c("#btn-team-queue-mode-1, #btn-team-queue-mode-2, #btn-team-fill-auto, #btn-team-fill-none");
    serverSelect = c("#team-server-select");
    queueMode1 = c("#btn-team-queue-mode-1");
    queueMode2 = c("#btn-team-queue-mode-2");
    fillAuto = c("#btn-team-fill-auto");
    fillNone = c("#btn-team-fill-none");
    active = !1;
    joined = !1;
    create = !1;
    joiningGame = !1;
    ws = null;
    keepAliveTimeout = 0;
    playerData = {};
    roomData = {};
    players = [];
    prevPlayerCount = 0;
    localPlayerId = 0;
    isLeader = !0;
    editingName = !1;
    displayedInvalidProtocolModal = !1;
    hideUrl;
    getPlayerById(e) {
        return this.players.find(t => t.playerId == e)
    }
    update(e) {
        this.joined && (this.keepAliveTimeout -= e,
        this.keepAliveTimeout < 0 && (this.keepAliveTimeout = 45,
        this.sendMessage("keepAlive", {})))
    }
    connect(e, t) {
        if (!this.active || t !== this.roomData.roomUrl) {
            const i = He.resolveRoomHost()
              , r = `w${window.location.protocol === "https:" ? "ss" : "s"}://${i}/team_v2`;
            this.active = !0,
            this.joined = !1,
            this.create = e,
            this.joiningGame = !1,
            this.editingName = !1,
            this.playerData = {
                name: this.config.get("playerName")
            },
            this.roomData = {
                roomUrl: t,
                region: this.config.get("region"),
                gameModeIdx: this.config.get("gameModeIdx"),
                autoFill: this.config.get("teamAutoFill"),
                findingGame: !1,
                lastError: ""
            },
            this.displayedInvalidProtocolModal = !1,
            this.refreshUi(),
            this.ws && (this.ws.onclose = function() {}
            ,
            this.ws.close(),
            this.ws = null);
            try {
                this.ws = new WebSocket(r),
                this.ws.onerror = s => {
                    this.ws?.close()
                }
                ,
                this.ws.onclose = () => {
                    let s = "";
                    this.joiningGame || (s = this.joined ? "lost_conn" : this.create ? "create_failed" : "join_failed"),
                    this.leave(s)
                }
                ,
                this.ws.onopen = () => {
                    this.create ? this.sendMessage("create", {
                        roomData: this.roomData,
                        playerData: this.playerData
                    }) : this.sendMessage("join", {
                        roomUrl: this.roomData.roomUrl,
                        playerData: this.playerData
                    })
                }
                ,
                this.ws.onmessage = s => {
                    if (this.active) {
                        const a = JSON.parse(s.data);
                        this.onMessage(a.type, a.data)
                    }
                }
            } catch {
                this.leave(this.create ? "create_failed" : "join_failed")
            }
        }
    }
    leave(e="") {
        if (this.active) {
            this.ws?.close(),
            this.ws = null,
            this.active = !1,
            this.joined = !1,
            this.joiningGame = !1,
            this.refreshUi(),
            this.config.set("gameModeIdx", this.roomData.gameModeIdx),
            this.config.set("teamAutoFill", this.roomData.autoFill),
            this.isLeader && this.config.set("region", this.roomData.region);
            let t = "";
            e && e != "" && (t = _r(e, this.localization)),
            this.leaveCb(t),
            we.hideInviteButton()
        }
    }
    onGameComplete() {
        this.active && (this.joiningGame = !1,
        this.sendMessage("gameComplete"))
    }
    onMessage(e, t) {
        switch (e) {
        case "state":
            {
                let i = t;
                this.joined = !0;
                const r = this.roomData;
                this.roomData = i.room,
                this.players = i.players,
                this.localPlayerId = i.localPlayerId,
                this.isLeader = this.getPlayerById(this.localPlayerId).isLeader,
                this.isLeader && (this.roomData.region = r.region,
                this.roomData.autoFill = r.autoFill),
                this.refreshUi(),
                we.showInviteButton(i.room.roomUrl.replace("#", ""));
                break
            }
        case "joinGame":
            this.joiningGame = !0,
            this.joinGameCb(t);
            break;
        case "keepAlive":
            break;
        case "kicked":
            this.leave("kicked");
            break;
        case "error":
            this.leave(t.type)
        }
    }
    sendMessage(e, t) {
        if (this.ws)
            if (this.ws.readyState === this.ws.OPEN) {
                const i = JSON.stringify({
                    type: e,
                    data: t
                });
                this.ws.send(i)
            } else
                this.ws.close()
    }
    setRoomProperty(e, t) {
        this.isLeader && this.roomData[e] != t && (this.roomData[e] = t,
        this.sendMessage("setRoomProps", this.roomData))
    }
    tryStartGame() {
        if (this.isLeader && !this.roomData.findingGame) {
            const e = O.protocolVersion;
            let t = this.roomData.region;
            const i = X.getParameterByName("region");
            i !== void 0 && i.length > 0 && (t = i);
            let r = this.pingTest.getZones(t);
            const s = X.getParameterByName("zone");
            s !== void 0 && s.length > 0 && (r = [s]);
            const a = {
                version: e,
                region: t,
                zones: r
            };
            X.verifyTurnstile(this.roomData.captchaEnabled, o => {
                a.turnstileToken = o,
                this.sendMessage("playGame", a)
            }
            ),
            this.roomData.findingGame = !0,
            this.refreshUi()
        }
    }
    refreshUi() {
        const e = function(r, s, a) {
            r.removeClass("btn-darken btn-disabled btn-opaque btn-hollow-selected"),
            a ? r.addClass("btn-darken") : (r.addClass("btn-disabled"),
            s || r.addClass("btn-opaque")),
            s && r.addClass("btn-hollow-selected"),
            r.prop("disabled", !a)
        };
        c("#team-menu").css("display", this.active ? "block" : "none"),
        c("#start-menu").css("display", this.active ? "none" : "block"),
        c("#right-column").css("display", this.active ? "none" : "block"),
        c("#social-share-block").css("display", this.active ? "none" : "block");
        const t = this.roomData.lastError != ""
          , i = _r(this.roomData.lastError, this.localization);
        if (this.serverWarning.css("opacity", t ? 1 : 0),
        this.serverWarning.html(i),
        this.roomData.lastError == "find_game_invalid_protocol" && !this.displayedInvalidProtocolModal && (c("#modal-refresh").fadeIn(200),
        this.displayedInvalidProtocolModal = !0),
        this.roomData.lastError === "find_game_invalid_captcha" && (this.siteInfo.info.captchaEnabled = !0),
        this.active && (c("#team-menu-joining-text").css("display", this.create ? "none" : "block"),
        c("#team-menu-creating-text").css("display", this.create ? "block" : "none"),
        c("#team-menu-connecting").css("display", this.joined ? "none" : "block"),
        c("#team-menu-contents").css("display", this.joined ? "block" : "none"),
        c("#btn-team-leave").css("display", this.joined ? "block" : "none")),
        this.joined) {
            const r = this.siteInfo.info.pops || {}
              , s = Object.keys(r);
            for (let w = 0; w < s.length; w++) {
                const S = s[w]
                  , g = r[S].playerCount
                  , y = this.localization.translate("index-players")
                  , M = c("#team-server-opts").children(`option[value="${S}"]`);
                M.html(`${M.attr("data-label")} [${g} ${y}]`)
            }
            if (this.serverSelect.find("option").each( (w, S) => {
                S.selected = S.value == this.roomData.region
            }
            ),
            e(this.queueMode1, this.roomData.gameModeIdx == 1, this.isLeader && this.roomData.enabledGameModeIdxs.includes(1)),
            e(this.queueMode2, this.roomData.gameModeIdx == 2, this.isLeader && this.roomData.enabledGameModeIdxs.includes(2)),
            e(this.fillAuto, this.roomData.autoFill, this.isLeader),
            e(this.fillNone, !this.roomData.autoFill, this.isLeader),
            this.serverSelect.prop("disabled", !this.isLeader),
            this.roomData.roomUrl) {
                const w = this.roomData.roomUrl.substring(1);
                if (c("#team-code").text(w),
                we.supportsInviteLink())
                    we.getInviteLink(w).then(S => {
                        c("#team-url").text(S)
                    }
                    );
                else {
                    const S = new URL(window.location.href);
                    S.search = "",
                    S.hash = this.roomData.roomUrl;
                    const g = new URL(window.location.href);
                    g.search = "",
                    g.hash = this.roomData.roomUrl,
                    c("#team-url").text(g.toString()),
                    window.history && window.history.replaceState("", "", this.roomData.roomUrl)
                }
            }
            this.playBtn.html(this.roomData.findingGame || this.joiningGame ? '<div class="ui-spinner"></div>' : this.playBtn.attr("data-label"));
            const a = this.siteInfo.getGameModeStyles();
            for (let w = 0; w < a.length; w++)
                this.playBtn.removeClass(a[w].buttonCss);
            const o = a[this.roomData.gameModeIdx];
            o ? (this.playBtn.addClass("btn-custom-mode-no-indent"),
            this.playBtn.addClass(o.buttonCss),
            this.playBtn.css({
                "background-image": `url(${o.icon})`
            })) : this.playBtn.css({
                "background-image": ""
            });
            let h = !1;
            for (let w = 0; w < this.players.length; w++)
                h = h || this.players[w].inGame;
            const f = c("#msg-wait-reason");
            if (this.isLeader) {
                f.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`);
                const w = h && !this.joiningGame;
                f.css("display", w ? "block" : "none"),
                this.playBtn.css("display", w ? "none" : "block")
            } else
                this.roomData.findingGame || this.joiningGame ? f.html(`<div class="ui-spinner" style="margin-right:16px"></div>${this.localization.translate("index-joining-game")}<span> ...</span>`) : h ? f.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`) : f.html(`${this.localization.translate("index-waiting-for-leader")}<span> ...</span>`),
                f.css("display", "block"),
                this.playBtn.css("display", "none");
            const u = c("#team-menu-member-list");
            u.empty();
            for (let w = 0; w < this.roomData.maxPlayers; w++) {
                let S = {
                    name: "",
                    playerId: 0,
                    isLeader: !1,
                    inGame: !1,
                    self: !1
                };
                if (w < this.players.length) {
                    const v = this.players[w];
                    S = {
                        name: v.name,
                        playerId: v.playerId,
                        isLeader: v.isLeader,
                        inGame: v.inGame,
                        self: v.playerId == this.localPlayerId
                    }
                }
                const g = c("<div/>", {
                    class: "team-menu-member"
                });
                let y = "";
                S.isLeader ? y = " icon-leader" : this.isLeader && S.playerId != 0 && (y = " icon-kick"),
                g.append(c("<div/>", {
                    class: `icon${y}`,
                    "data-playerid": S.playerId
                }));
                let M = null
                  , I = null;
                if (this.editingName && S.self) {
                    M = c("<input/>", {
                        type: "text",
                        tabindex: 0,
                        class: "name menu-option name-text name-self-input",
                        maxLength: ee.PlayerNameMaxLen
                    }),
                    M.val(S.name);
                    const v = () => {
                        const _ = X.sanitizeNameInput(M?.val());
                        S.name = _,
                        this.config.set("playerName", _),
                        this.sendMessage("changeName", {
                            name: _
                        }),
                        this.editingName = !1,
                        this.refreshUi()
                    }
                      , k = () => {
                        this.editingName = !1,
                        this.refreshUi()
                    }
                    ;
                    M.keypress(_ => {
                        if (_.which === 13)
                            return v(),
                            !1
                    }
                    ),
                    M.on("blur", k),
                    g.append(M),
                    I = c("<div/>", {
                        class: "icon icon-submit-name-change"
                    }),
                    I.on("click", v),
                    I.on("mousedown", _ => {
                        _.preventDefault(),
                        _.stopPropagation()
                    }
                    )
                } else {
                    let v = "name-text";
                    S.self && (v += " name-self"),
                    S.inGame && (v += " name-in-game");
                    const k = c("<div/>", {
                        class: `name menu-option ${v}`,
                        html: X.htmlEscape(S.name)
                    });
                    S.self && k.on("click", () => {
                        this.editingName = !0,
                        this.refreshUi()
                    }
                    ),
                    g.append(k)
                }
                I ? g.append(I) : g.append(c("<div/>", {
                    class: `icon ${S.inGame ? "icon-in-game" : ""}`
                })),
                u.append(g),
                M?.focus()
            }
            c(".icon-kick", u).click(w => {
                const S = Number(c(w.currentTarget).attr("data-playerid"));
                this.sendMessage("kick", {
                    playerId: S
                })
            }
            );
            const d = this.players.find(w => w.playerId == this.localPlayerId)
              , p = d && !d.inGame;
            !document.hasFocus() && this.prevPlayerCount < this.players.length && this.players.length > 1 && p && this.audioManager.playSound("notification_join_01", {
                channel: "ui"
            }),
            this.prevPlayerCount = this.players.length
        }
    }
}
class Xl {
    nameInput = c("#player-name-input-solo");
    serverSelect = c("#server-select-main");
    playMode0Btn = c("#btn-start-mode-0");
    playMode1Btn = c("#btn-start-mode-1");
    playMode2Btn = c("#btn-start-mode-2");
    muteBtns = c(".btn-sound-toggle");
    aimLineBtn = c("#btn-game-aim-line");
    masterSliders = c(".sl-master-volume");
    soundSliders = c(".sl-sound-volume");
    musicSliders = c(".sl-music-volume");
    serverWarning = c("#server-warning");
    languageSelect = c(".language-select");
    startMenuWrapper = c("#start-menu-wrapper");
    gameAreaWrapper = c("#game-area-wrapper");
    playButtons = c(".play-button-container");
    playLoading = c(".play-loading-outer");
    errorModal = new Ie(c("#modal-notification"));
    refreshModal = new Ie(c("#modal-refresh"));
    ipBanModal = new Ie(c("#modal-ip-banned"));
    config = new hs;
    localization = new us;
    account;
    loadoutMenu;
    pass;
    profileUi;
    pingTest = new Co;
    audioManager = new sa;
    ambience = new Xs;
    siteInfo;
    teamMenu;
    pixi = null;
    resourceManager = null;
    input = null;
    inputBinds = null;
    inputBindUi = null;
    game = null;
    loadoutDisplay = null;
    domContentLoaded = !1;
    configLoaded = !1;
    initialized = !1;
    active = !1;
    sessionId = X.random64();
    contextListener = function(e) {
        e.preventDefault()
    }
    ;
    errorMessage = "";
    quickPlayPendingModeIdx = -1;
    findGameAttempts = 0;
    findGameTime = 0;
    pauseTime = 0;
    wasPlayingVideo = !1;
    checkedPingTest = !1;
    hasFocus = !0;
    newsDisplayed = !0;
    constructor() {
        this.account = new Js(this.config),
        this.loadoutMenu = new Vl(this.account,this.localization),
        this.pass = new Gl(this.account,this.loadoutMenu,this.localization),
        this.profileUi = new $l(this.account,this.localization,this.loadoutMenu,this.errorModal),
        this.siteInfo = new Rl(this.config,this.localization),
        this.teamMenu = new Jl(this.config,this.pingTest,this.siteInfo,this.localization,this.audioManager,this.onTeamMenuJoinGame.bind(this),this.onTeamMenuLeave.bind(this));
        const e = () => {
            this.config.load( () => {
                this.configLoaded = !0,
                this.tryLoad()
            }
            )
        }
        ;
        this.loadBrowserDeps(e)
    }
    async loadBrowserDeps(e) {
        await we.init(),
        e()
    }
    tryLoad() {
        if (this.domContentLoaded && this.configLoaded && !this.initialized) {
            this.initialized = !0,
            B.mobile && ni.applyMobileBrowserStyling(B.tablet);
            const e = this.config.get("language") || this.localization.detectLocale();
            this.config.set("language", e),
            this.localization.setLocale(e),
            this.localization.populateLanguageSelect(),
            this.startPingTest(),
            this.siteInfo.load(),
            this.localization.localizeIndex(),
            this.account.init(),
            this.nameInput.maxLength = ee.PlayerNameMaxLen,
            this.playMode0Btn.on("click", () => {
                we.requestMidGameAd( () => {
                    this.tryQuickStartGame(0)
                }
                )
            }
            ),
            this.playMode1Btn.on("click", () => {
                we.requestMidGameAd( () => {
                    this.tryQuickStartGame(1)
                }
                )
            }
            ),
            this.playMode2Btn.on("click", () => {
                we.requestMidGameAd( () => {
                    this.tryQuickStartGame(2)
                }
                )
            }
            ),
            this.serverSelect.change( () => {
                const d = this.serverSelect.find(":selected").val();
                this.config.set("region", d)
            }
            ),
            this.nameInput.on("blur", d => {
                this.setConfigFromDOM()
            }
            ),
            this.muteBtns.on("click", d => {
                this.config.set("muteAudio", !this.config.get("muteAudio"))
            }
            ),
            this.muteBtns.on("mousedown", d => {
                d.stopPropagation()
            }
            ),
            c(this.masterSliders).on("mousedown", d => {
                d.stopPropagation()
            }
            ),
            c(this.soundSliders).on("mousedown", d => {
                d.stopPropagation()
            }
            ),
            c(this.musicSliders).on("mousedown", d => {
                d.stopPropagation()
            }
            ),
            this.masterSliders.on("input", d => {
                const p = Number(c(d.target).val()) / 100;
                this.audioManager.setMasterVolume(p),
                this.config.set("masterVolume", p)
            }
            ),
            this.soundSliders.on("input", d => {
                const p = Number(c(d.target).val()) / 100;
                this.audioManager.setSoundVolume(p),
                this.config.set("soundVolume", p)
            }
            ),
            this.musicSliders.on("input", d => {
                const p = Number(c(d.target).val()) / 100;
                this.audioManager.setMusicVolume(p),
                this.config.set("musicVolume", p)
            }
            ),
            c(".modal-settings-item").children("input").each( (d, p) => {
                const w = c(p);
                w.prop("checked", this.config.get(w.prop("id")))
            }
            ),
            c(".modal-settings-item > input:checkbox").change(d => {
                const p = c(d.target);
                this.config.set(p.prop("id"), p.is(":checked"))
            }
            ),
            c(".btn-fullscreen-toggle").on("click", () => {
                X.toggleFullScreen()
            }
            ),
            this.languageSelect.on("change", d => {
                const p = d.target.value;
                p && this.config.set("language", p)
            }
            ),
            c("#btn-create-team").on("click", () => {
                this.tryJoinTeam(!0)
            }
            ),
            c("#btn-team-mobile-link-join").on("click", () => {
                let d = c("#team-link-input").val()?.trim();
                const p = d.indexOf("#");
                p >= 0 && (d = d.slice(p + 1)),
                d.length > 0 ? (c("#team-mobile-link").css("display", "none"),
                this.tryJoinTeam(!1, d)) : (c("#team-mobile-link-desc").css("display", "none"),
                c("#team-mobile-link-warning").css("display", "none").fadeIn(100))
            }
            ),
            c("#btn-team-leave").on("click", () => {
                window.history && window.history.replaceState("", "", "/"),
                c("#news-block").css("display", "block"),
                this.game?.free(),
                this.teamMenu.leave()
            }
            );
            const t = c("#news-current").data("date")
              , i = new Date(t).getTime();
            c(".right-column-toggle").on("click", () => {
                this.newsDisplayed ? (c("#news-wrapper").fadeOut(250),
                c("#pass-wrapper").fadeIn(250)) : (this.config.set("lastNewsTimestamp", i),
                c(".news-toggle").find(".account-alert").css("display", "none"),
                c("#news-wrapper").fadeIn(250),
                c("#pass-wrapper").fadeOut(250)),
                this.newsDisplayed = !this.newsDisplayed
            }
            );
            const r = this.config.get("lastNewsTimestamp");
            i > r && c(".news-toggle").find(".account-alert").css("display", "block"),
            this.setDOMFromConfig(),
            this.setAppActive(!0);
            const s = document.querySelector("#cvs")
              , a = window.devicePixelRatio > 1 ? 2 : 1;
            B.os == "ios" && (ds.PRECISION_FRAGMENT = cs.HIGH);
            const o = d => new ps({
                width: window.innerWidth,
                height: window.innerHeight,
                view: s,
                antialias: !1,
                resolution: a,
                hello: !0,
                forceCanvas: d
            });
            let h = null;
            try {
                h = o(!1)
            } catch {
                h = o(!0)
            }
            this.pixi = h,
            this.pixi.renderer.events.destroy(),
            this.pixi.ticker.add(this.update, this),
            this.pixi.renderer.background.color = 7378501,
            this.resourceManager = new El(this.pixi.renderer,this.audioManager,this.config),
            this.resourceManager.loadMapAssets("main"),
            this.input = new la(document.getElementById("game-touch-area")),
            this.inputBinds = new Mo(this.input,this.config),
            this.inputBindUi = new Po(this.input,this.inputBinds);
            const f = () => {
                this.loadoutDisplay.free(),
                this.game.init(),
                this.onResize(),
                this.findGameAttempts = 0,
                this.ambience.onGameStart()
            }
              , u = d => {
                this.game.IAmJ && this.pass.scheduleUpdatePass(this.game.hva),
                this.game.free(),
                this.errorMessage = this.localization.translate(d || ""),
                this.teamMenu.onGameComplete(),
                this.ambience.onGameComplete(this.audioManager),
                this.setAppActive(!0),
                this.setPlayLockout(!1),
                d == "index-invalid-protocol" && this.showInvalidProtocolModal(),
                d == "rate_limited" && this.onJoinGameError(d),
                d && this.showErrorModal(d),
                we.gamePlayStop()
            }
            ;
            this.game = new bo(this.pixi,this.audioManager,this.localization,this.config,this.input,this.inputBinds,this.inputBindUi,this.ambience,this.resourceManager,f,u),
            this.loadoutDisplay = new Hl(this.pixi,this.audioManager,this.config,this.inputBinds,this.account),
            this.loadoutMenu.loadoutDisplay = this.loadoutDisplay,
            this.onResize(),
            this.tryJoinTeam(!1),
            ni.setupModals(this.inputBinds, this.inputBindUi),
            this.onConfigModified(),
            this.config.addModifiedListener(this.onConfigModified.bind(this)),
            zo(),
            we.gameLoadComplete()
        }
    }
    onUnload() {
        this.teamMenu.leave()
    }
    onResize() {
        B.onResize(),
        ni.onResize(),
        this.loadoutMenu.onResize(),
        this.pixi?.renderer.resize(B.screenWidth, B.screenHeight),
        this.game?.initialized && this.game.resize(),
        this.loadoutDisplay?.initialized && this.loadoutDisplay.resize(),
        this.refreshUi()
    }
    startPingTest() {
        const e = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
        this.pingTest.start(e)
    }
    setAppActive(e) {
        this.active = e,
        this.quickPlayPendingModeIdx = -1,
        this.refreshUi(),
        e && this.errorModal.hide()
    }
    setPlayLockout(e) {
        const t = e ? 0 : 1e3;
        this.playButtons.stop().delay(t).animate({
            opacity: e ? .5 : 1
        }, 250),
        this.playLoading.stop().delay(t).animate({
            opacity: e ? 1 : 0
        }, {
            duration: 250,
            start: () => {
                this.playLoading.css({
                    "pointer-events": e ? "initial" : "none"
                })
            }
        })
    }
    onTeamMenuJoinGame(e) {
        this.waitOnAccount( () => {
            this.joinGame(e)
        }
        )
    }
    onTeamMenuLeave(e="") {
        e && e != "" && window.history && window.history.replaceState("", "", "/"),
        this.showErrorModal(e),
        this.errorMessage = e,
        this.setDOMFromConfig(),
        this.refreshUi()
    }
    setConfigFromDOM() {
        const e = X.sanitizeNameInput(this.nameInput.val());
        this.config.set("playerName", e);
        const t = this.serverSelect.find(":selected").val();
        this.config.set("region", t)
    }
    setDOMFromConfig() {
        we.isAnySDK && !this.config.get("playerName") && we.getPlayerName().then(e => {
            e && (this.config.set("playerName", e),
            this.nameInput.val(e))
        }
        ),
        this.nameInput.val(this.config.get("playerName")),
        this.serverSelect.find("option").each( (e, t) => {
            t.selected = t.value == this.config.get("region")
        }
        ),
        this.languageSelect.val(this.config.get("language"))
    }
    onConfigModified(e) {
        const t = this.config.get("muteAudio");
        t != this.audioManager.mute && (this.muteBtns.removeClass(t ? "audio-on-icon" : "audio-off-icon"),
        this.muteBtns.addClass(t ? "audio-off-icon" : "audio-on-icon"),
        this.audioManager.setMute(t));
        const i = this.config.get("masterVolume");
        this.masterSliders.val(i * 100),
        this.audioManager.setMasterVolume(i);
        const r = this.config.get("soundVolume");
        this.soundSliders.val(r * 100),
        this.audioManager.setSoundVolume(r);
        const s = this.config.get("musicVolume");
        if (this.musicSliders.val(s * 100),
        this.audioManager.setMusicVolume(s),
        e == "language") {
            const a = this.config.get("language");
            this.localization.setLocale(a)
        }
        e == "region" && (this.config.set("regionSelected", !0),
        this.startPingTest()),
        e == "highResTex" && location.reload()
    }
    refreshUi() {
        this.startMenuWrapper.css("display", this.active ? "flex" : "none"),
        this.gameAreaWrapper.css({
            display: this.active ? "none" : "block",
            opacity: this.active ? 0 : 1
        }),
        this.active ? (c("body").removeClass("user-select-none"),
        document.removeEventListener("contextmenu", this.contextListener)) : (c("body").addClass("user-select-none"),
        c("#start-main").stop(!0),
        document.addEventListener("contextmenu", this.contextListener)),
        c("#ad-block-left").css("display", !B.isLandscape && this.teamMenu.active ? "none" : "block");
        const e = this.active && this.errorMessage != "";
        this.serverWarning.css({
            display: "block",
            opacity: e ? 1 : 0
        }),
        this.serverWarning.html(this.errorMessage);
        const t = (i, r) => {
            i.html(this.quickPlayPendingModeIdx === r ? '<div class="ui-spinner"></div>' : this.localization.translate(i.data("l10n")))
        }
        ;
        t(this.playMode0Btn, 0),
        t(this.playMode1Btn, 1),
        t(this.playMode2Btn, 2)
    }
    waitOnAccount(e) {
        if (this.account.requestsInFlight == 0)
            e();
        else {
            const t = setTimeout( () => {
                i(),
                xe.storeGeneric("account", "wait_timeout")
            }
            , 2500)
              , i = () => {
                e(),
                clearTimeout(t),
                this.account.removeEventListener("requestsComplete", i)
            }
            ;
            this.account.addEventListener("requestsComplete", i)
        }
    }
    tryJoinTeam(e, t) {
        if (this.active && this.quickPlayPendingModeIdx === -1) {
            let i = t || window.location.hash.slice(1);
            const r = we.getRoomInviteParam();
            r && (i = r,
            e = !1),
            (e || i != "") && (this.setConfigFromDOM(),
            this.teamMenu.connect(e, i),
            this.refreshUi())
        }
    }
    tryQuickStartGame(e) {
        if (this.quickPlayPendingModeIdx === -1) {
            this.errorMessage = "",
            this.quickPlayPendingModeIdx = e,
            this.setConfigFromDOM(),
            this.refreshUi();
            let t = 0;
            this.findGameAttempts > 0 && Date.now() - this.findGameTime < 3e4 ? t = Math.min(this.findGameAttempts * 2.5 * 1e3, 7500) : this.findGameAttempts = 0,
            this.findGameTime = Date.now(),
            this.findGameAttempts++;
            const i = O.protocolVersion;
            let r = this.config.get("region");
            const s = X.getParameterByName("region");
            s !== void 0 && s.length > 0 && (r = s);
            let a = this.pingTest.getZones(r);
            const o = X.getParameterByName("zone");
            o !== void 0 && o.length > 0 && (a = [o]);
            const h = {
                version: i,
                region: r,
                zones: a,
                playerCount: 1,
                autoFill: !0,
                gameModeIdx: e
            }
              , f = () => {
                this.waitOnAccount( () => {
                    this.findGame(h, (u, d, p) => {
                        if (u) {
                            this.onJoinGameError(u);
                            return
                        }
                        if (p) {
                            this.showIpBanModal(p);
                            return
                        }
                        this.joinGame(d)
                    }
                    )
                }
                )
            }
            ;
            t == 0 ? f() : setTimeout( () => {
                f()
            }
            , t)
        }
    }
    findGame(e, t) {
        const i = (r, s, a) => {
            if (r >= s) {
                t("full");
                return
            }
            const o = () => {
                setTimeout( () => {
                    X.verifyTurnstile(this.siteInfo.info.captchaEnabled && !this.account.loggedIn, h => {
                        i(r + 1, s, h)
                    }
                    )
                }
                , 500)
            }
            ;
            e.turnstileToken = a,
            c.ajax({
                type: "POST",
                url: He.resolveUrl("/api/find_game"),
                data: JSON.stringify(e),
                contentType: "application/json; charset=utf-8",
                timeout: 1e4,
                xhrFields: {
                    withCredentials: ct.anyLoginSupported()
                },
                success: h => {
                    if (h.error === "invalid_captcha") {
                        this.siteInfo.info.captchaEnabled = !0,
                        o();
                        return
                    }
                    if (h.error && h.error != "full") {
                        t(h.error);
                        return
                    }
                    if (h.banned) {
                        t(null, void 0, h);
                        return
                    }
                    const f = h.res ? h.res[0] : null;
                    f?.hosts && f.addrs ? t(null, f) : o()
                }
                ,
                error: function(h) {
                    o()
                }
            })
        }
        ;
        X.verifyTurnstile(this.siteInfo.info.captchaEnabled && !this.account.loggedIn, r => {
            i(0, 2, r)
        }
        )
    }
    joinGame(e) {
        if (!this.game) {
            setTimeout( () => {
                this.joinGame(e)
            }
            , 250);
            return
        }
        const t = e.hosts || []
          , i = [];
        for (let s = 0; s < t.length; s++)
            i.push(`ws${e.useHttps ? "s" : ""}://${t[s]}/play?gameId=${e.gameId}`);
        const r = (s, a) => {
            const o = s.shift();
            if (!o) {
                this.onJoinGameError("join_game_failed");
                return
            }
            const h = function() {
                r(s, a)
            };
            this.game.tryJoinGame(o, a.data, this.account.loadoutPriv, this.account.questPriv, h)
        }
        ;
        r(i, e)
    }
    onJoinGameError(e) {
        const t = {
            full: this.localization.translate("index-failed-finding-game"),
            invalid_protocol: this.localization.translate("index-invalid-protocol"),
            invalid_captcha: this.localization.translate("index-invalid-captcha"),
            join_game_failed: this.localization.translate("index-failed-joining-game"),
            rate_limited: this.localization.translate("index-rate-limited")
        };
        e == "invalid_protocol" && this.showInvalidProtocolModal(),
        e === "invalid_captcha" && (this.siteInfo.info.captchaEnabled = !0),
        this.showErrorModal(e),
        this.errorMessage = t[e] || t.full,
        this.quickPlayPendingModeIdx = -1,
        this.teamMenu.leave("join_game_failed"),
        this.refreshUi()
    }
    showInvalidProtocolModal() {
        this.refreshModal.show(!0)
    }
    showIpBanModal(e) {
        c("#modal-ip-banned-reason").text(`Reason: ${e.reason}`);
        let t = "Duration: indefinite";
        if (!e.permanent) {
            const r = new Date(e.expiresIn).getTime() - Date.now()
              , s = Math.round(r / (1e3 * 60 * 60 * 24))
              , a = Math.round(r / (1e3 * 60 * 60));
            s > 1 ? t = `Expires in: ${s} days` : a > 1 ? t = `Expires in: ${a} hours` : t = "Expires in: less than an hour"
        }
        c("#modal-ip-banned-expiration").text(t),
        this.ipBanModal.show(!0),
        this.quickPlayPendingModeIdx = -1,
        this.teamMenu.leave("banned"),
        this.refreshUi()
    }
    showErrorModal(e) {
        const i = {
            behind_proxy: this.localization.translate("index-behind-proxy"),
            ip_banned: "Your IP has been banned"
        }[e];
        i && (this.errorModal.selector.find(".modal-body-text").html(i),
        this.errorModal.show())
    }
    update() {
        const e = b.clamp(this.pixi.ticker.elapsedMS / 1e3, .001, .125);
        if (this.pingTest.update(e),
        !this.checkedPingTest && this.pingTest.isComplete()) {
            if (!this.config.get("regionSelected")) {
                const t = this.pingTest.getRegion();
                t && (this.config.set("region", t),
                this.setDOMFromConfig())
            }
            this.checkedPingTest = !0
        }
        this.resourceManager.update(e),
        this.audioManager.update(e),
        this.ambience.update(e, this.audioManager, !this.active),
        this.teamMenu.update(e),
        this.game?.initialized && this.game.tRH && (this.active && (this.setAppActive(!1),
        this.setPlayLockout(!0)),
        this.game.update(e)),
        this.active && this.loadoutDisplay && this.game && !this.game.initialized && (this.loadoutMenu.active ? (this.loadoutDisplay.initialized || this.loadoutDisplay.init(),
        this.loadoutDisplay.show(),
        this.loadoutDisplay.update(e, this.hasFocus)) : this.loadoutDisplay.hide()),
        !this.active && this.loadoutMenu.active && this.loadoutMenu.hide(),
        this.active && this.pass?.update(e),
        this.input.flush()
    }
}
const Ee = new Xl;
function Yr() {
    Ee.domContentLoaded = !0,
    Ee.tryLoad()
}
document.addEventListener("DOMContentLoaded", Yr);
window.addEventListener("load", Yr);
window.addEventListener("unload", l => {
    Ee.onUnload()
}
);
window.location.hash == "#_=_" && (window.location.hash = "",
history.pushState("", document.title, window.location.pathname));
window.addEventListener("resize", () => {
    Ee.onResize()
}
);
window.addEventListener("orientationchange", () => {
    Ee.onResize()
}
);
window.addEventListener("hashchange", () => {
    Ee.tryJoinTeam(!1)
}
);
window.addEventListener("beforeunload", l => {
    if (Ee.game?.warnPageReload()) {
        const e = "Do you want to reload the game?";
        return l.returnValue = e,
        e
    }
}
);
window.addEventListener("onfocus", () => {
    Ee.hasFocus = !0
}
);
window.addEventListener("onblur", () => {
    Ee.hasFocus = !1
}
);
const Ir = [];
window.onerror = function(l, e, t, i, r) {
    l = l || "undefined_error_msg";
    const s = r ? r.stack : ""
      , a = {
        msg: l,
        id: Ee.sessionId,
        url: e,
        line: t,
        column: i,
        stacktrace: s,
        browser: navigator.userAgent,
        protocol: O.protocolVersion,
        clientGitVersion: "2961a079146bc57680e188b3d56e1c8f8b517cb1",
        serverGitVersion: Ee.siteInfo.info.gitRevision
    }
      , o = JSON.stringify(a);
    Ir.includes(o) || (Ir.push(o),
    xe.logWindowOnError(a))
}
;
navigator.serviceWorker?.getRegistrations().then(l => {
    for (const e of l)
        e.unregister()
}
);

    class GameMod {
        constructor() {
            const settings = JSON.parse(localStorage.getItem("gameSettings") || '{}');
            this.lastFrameTime = performance.now();
            this.frameCount = 0;
            this.fps = 0;
            this.kills = 0;
            this.setAnimationFrameCallback();
            this.isStartMapHide = settings["hide-mini-map"] !== undefined ? settings["hide-mini-map"] : false;
            this.isFpsVisible = true;
            this.isPingVisible = true;
            this.isKillsVisible = true;
            this.isMenuVisible = true;
            this.isClean = false;
            this.isLocalRotation = settings["local-rotation"] !== undefined ? settings["local-rotation"] : true;
            this.isFpsUncapped = settings["fps-uncap"] !== undefined ? settings["fps-uncap"] : true;
            this.isInterpolation = settings["movement-interpolation"] !== undefined ? settings["movement-interpolation"] : true;
            this.pingTests = [];
            this.pingInterval = null;
            this.init();
      
            window.isLocalRotation = this.isLocalRotation;
            window.isInterpolation = this.isInterpolation;
            window.isFpsUncapped = this.isFpsUncapped;
            window.isStartMapHide = this.isStartMapHide;
      
      
            this.initCounter("fpsCounter", "isFpsVisible", this.updateFpsVisibility.bind(this));
            this.initCounter("pingCounter", "isPingVisible", this.updatePingVisibility.bind(this));
            this.initCounter("killsCounter", "isKillsVisible", this.updateKillsVisibility.bind(this));
      
            this.initMenu();
            this.loadBackgroundFromLocalStorage();
            this.loadLocalStorage();
            this.startUpdateLoop();
            this.setupWeaponBorderHandler();
            this.setupKeyListeners();
        }
      
        init() {
            this.startUpdateLoop();
            this.pingShow();
            this.customUiElements();
            const modal = document.getElementById('modal-refresh');
    
            const observer = new MutationObserver((mutations) => {
              mutations.forEach((mutation) => {
                if (mutation.attributeName === 'style') {
                  const display = window.getComputedStyle(modal).display;
          
                  if (display === 'block') {
                    const header = modal.querySelector('.modal-header h2');
                    const bodyText = modal.querySelector('.modal-body-text');
          
                    if (header) header.textContent = 'New game Update, you need to wait until AlguienClient is fixed';
                    if (bodyText) bodyText.innerHTML = 'Pleas, wait until the client is fixed, its not a survev problem';
                  }
                }
              });
            });
            observer.observe(modal, { attributes: true });
        }
      
        initCounter(id, visibilityKey, updateVisibilityFn) {
            this[id] = document.createElement("div");
            this[id].id = id;
            Object.assign(this[id].style, {
                color: "white",
                backgroundColor: "rgba(0, 0, 0, 0.2)",
                padding: "5px 10px",
                marginTop: "10px",
                borderRadius: "5px",
                fontFamily: "Arial, sans-serif",
                fontSize: "14px",
                zIndex: "10000",
                pointerEvents: "none",
            });
      
            const uiTopLeft = document.getElementById("ui-top-left");
            if (uiTopLeft) {
                uiTopLeft.appendChild(this[id]);
            }
      
            updateVisibilityFn();
        }
      
        updateFpsVisibility() {
            this.updateVisibility("fpsCounter", this.isFpsVisible);
        }
      
        updateFpsToggle() {
            if (this.isFpsUncapped) { 
                this.animationFrameCallback = (callback) => setTimeout(callback, 1);
            } else {
                this.animationFrameCallback = (callback) => requestAnimationFrame(callback);
            }
        }
        
      
        updatePingVisibility() {
            this.updateVisibility("pingCounter", this.isPingVisible);
        }
      
        updateKillsVisibility() {
            this.updateVisibility("killsCounter", this.isKillsVisible);
        }
      
      
        updateVisibility(id, isVisible) {
            if (this[id]) {
                this[id].style.display = isVisible ? "block" : "none";
                this[id].style.backgroundColor = isVisible
                    ? "rgba(0, 0, 0, 0.2)"
                    : "transparent";
            }
        }
      
        toggleFpsDisplay() {
        this.isFpsVisible = !this.isFpsVisible;
        this.updateFpsVisibility();
        }
        
        setAnimationFrameCallback() {
            this.animationFrameCallback = (callback) => setTimeout(callback, 1);
        }
      
      
        togglePingDisplay() {
        this.isPingVisible = !this.isPingVisible;
        this.updatePingVisibility();
        }
      
        toggleKillsDisplay() {
        this.isKillsVisible = !this.isKillsVisible;
        this.updateKillsVisibility();
        }
      
        getKills() {
        const killElement = document.querySelector(
            ".ui-player-kills.js-ui-player-kills",
        );
        if (killElement) {
            const kills = parseInt(killElement.textContent, 10);
            return isNaN(kills) ? 0 : kills;
        }
        return 0;
        }
      
        getRegionFromLocalStorage() {
        let config = localStorage.getItem("surviv_config");
        if (config) {
            let configObject = JSON.parse(config);
            return configObject.region;
        }
        return null;
        }
      
        startPingTest() {
        const currentUrl = window.location.href;
        const isSpecialUrl = /\/#\w+/.test(currentUrl);
      
        const teamSelectElement = document.getElementById("team-server-select");
        const mainSelectElement = document.getElementById("server-select-main");
      
        const region =
            isSpecialUrl && teamSelectElement
            ? teamSelectElement.value
            : mainSelectElement
                ? mainSelectElement.value
                : null;
      
        if (region && region !== this.currentServer) {
            this.currentServer = region;
            this.resetPing();
      
            const servers = [
            { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
            { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
            { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
            { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
            ];
      
            const selectedServer = servers.find(
            (server) => region.toUpperCase() === server.region.toUpperCase(),
            );
      
            if (selectedServer) {
            this.pingTest = new PingTest(selectedServer);
            this.pingTest.startPingTest();
            } else {
            this.resetPing();
            }
        }
        }
      
        resetPing() {
        if (this.pingTest && this.pingTest.test.ws) {
            this.pingTest.test.ws.close();
            this.pingTest.test.ws = null;
        }
        this.pingTest = null;
        }
      
      
        saveBackgroundToLocalStorage(url) {
        localStorage.setItem("lastBackgroundUrl", url);
        }
      
        saveBackgroundToLocalStorage(image) {
        if (typeof image === "string") {
            localStorage.setItem("lastBackgroundType", "url");
            localStorage.setItem("lastBackgroundValue", image);
        } else {
            localStorage.setItem("lastBackgroundType", "local");
            const reader = new FileReader();
            reader.onload = () => {
            localStorage.setItem("lastBackgroundValue", reader.result);
            };
            reader.readAsDataURL(image);
        }
        }
      
        loadBackgroundFromLocalStorage() {
        const backgroundType = localStorage.getItem("lastBackgroundType");
        const backgroundValue = localStorage.getItem("lastBackgroundValue");
      
        const backgroundElement = document.getElementById("background");
        if (backgroundElement && backgroundType && backgroundValue) {
            if (backgroundType === "url") {
            backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
            } else if (backgroundType === "local") {
            backgroundElement.style.backgroundImage = `url(${backgroundValue})`;
            }
        }
        }
        loadLocalStorage() {
            const savedSettings = JSON.parse(localStorage.getItem("userSettings"));
            if (savedSettings) {
                this.isFpsVisible = savedSettings.isFpsVisible ?? this.isFpsVisible;
                this.isPingVisible = savedSettings.isPingVisible ?? this.isPingVisible;
                this.isKillsVisible = savedSettings.isKillsVisible ?? this.isKillsVisible;
                this.isClean = savedSettings.isClean ?? this.isClean;
            }
      
            this.updateKillsVisibility();
            this.updateFpsVisibility();
            this.updatePingVisibility();
        }
      
        updateHealthBars() {
        const healthBars = document.querySelectorAll("#ui-health-container");
        healthBars.forEach((container) => {
            const bar = container.querySelector("#ui-health-actual");
            if (bar) {
            const width = Math.round(parseFloat(bar.style.width));
            let percentageText = container.querySelector(".health-text");
      
            if (!percentageText) {
                percentageText = document.createElement("span");
                percentageText.classList.add("health-text");
                Object.assign(percentageText.style, {
                width: "100%",
                textAlign: "center",
                marginTop: "5px",
                color: "#333",
                fontSize: "20px",
                fontWeight: "bold",
                position: "absolute",
                zIndex: "10",
                });
                container.appendChild(percentageText);
            }
      
            percentageText.textContent = `${width}%`;
            }
        });
        }
      
        updateBoostBars() {
        const boostCounter = document.querySelector("#ui-boost-counter");
        if (boostCounter) {
            const boostBars = boostCounter.querySelectorAll(
            ".ui-boost-base .ui-bar-inner",
            );
      
            let totalBoost = 0;
            const weights = [25, 25, 40, 10];
      
            boostBars.forEach((bar, index) => {
            const width = parseFloat(bar.style.width);
            if (!isNaN(width)) {
                totalBoost += width * (weights[index] / 100);
            }
            });
      
            const averageBoost = Math.round(totalBoost);
            let boostDisplay = boostCounter.querySelector(".boost-display");
      
            if (!boostDisplay) {
            boostDisplay = document.createElement("div");
            boostDisplay.classList.add("boost-display");
            Object.assign(boostDisplay.style, {
                position: "absolute",
                bottom: "75px",
                right: "335px",
                color: "#FF901A",
                backgroundColor: "rgba(0, 0, 0, 0.4)",
                padding: "5px 10px",
                borderRadius: "5px",
                fontFamily: "Arial, sans-serif",
                fontSize: "14px",
                zIndex: "10",
                textAlign: "center",
            });
      
            boostCounter.appendChild(boostDisplay);
            }
      
            boostDisplay.textContent = `AD: ${averageBoost}%`;
        }
        }
      
        setupWeaponBorderHandler() {
            const weaponContainers = Array.from(
            document.getElementsByClassName("ui-weapon-switch"),
            );
            weaponContainers.forEach((container) => {
            if (container.id === "ui-weapon-id-4") {
                container.style.border = "3px solid #2f4032";
            } else {
                container.style.border = "3px solid #FFFFFF";
            }
            });
      
            const weaponNames = Array.from(
            document.getElementsByClassName("ui-weapon-name"),
            );
            weaponNames.forEach((weaponNameElement) => {
            const weaponContainer = weaponNameElement.closest(".ui-weapon-switch");
            const observer = new MutationObserver(() => {
                const weaponName = weaponNameElement.textContent.trim();
                let border = "#FFFFFF";
      
                switch (weaponName.toUpperCase()) { 
                //yellow
                case "CZ-3A1": case "G18C": case "M9": case "M93R": case "MAC-10": case "MP5": case "P30L": case "DUAL P30L": case "UMP9": case "VECTOR": case "VSS": case "FLAMETHROWER": border = "#FFAE00"; break;
                //blue 
                case "AK-47": case "OT-38": case "OTS-38": case "M39 EMR": case "DP-28": case "MOSIN-NAGANT": case "SCAR-H": case "SV-98": case "M1 GARAND": case "PKP PECHENEG": case "AN-94": case "BAR M1918": case "BLR 81": case "SVD-63": case "M134": case "GROZA": case "GROZA-S": border = "#007FFF"; break;
                //green
                case "FAMAS": case "M416": case "M249": case "QBB-97": case "MK 12 SPR": case "M4A1-S": case "SCOUT ELITE": case "L86A2": border = "#0f690d"; break;
                //red 
                case "M870": case "MP220": case "SAIGA-12": case "SPAS-12": case "USAS-12": case "SUPER 90": case "LASR GUN": case "M1100": border = "#FF0000"; break;
                //purple
                case "MODEL 94": case "PEACEMAKER": case "vector": case "mk45g":case "M1911": case "M1A1": border = "#800080"; break;
                //black
                case "DEAGLE 50": case "RAINBOW BLASTER": border = "#000000"; break;
                //olive
                case "AWM-S": case "MK 20 SSR": border = "#808000"; break; 
                //brown
                case "POTATO CANNON": case "SPUD GUN": border = "#A52A2A"; break;
                //other Guns
                case "FLARE GUN": border = "#FF4500"; break; case "M79": border = "#008080"; break; case "HEART CANNON": border = "#FFC0CB"; break; 
                default: border = "#FFFFFF"; break; }
      
                if (weaponContainer.id !== "ui-weapon-id-4") {
                weaponContainer.style.border = `3px solid ${border}`;
                }
            });
      
            observer.observe(weaponNameElement, {
                childList: true,
                characterData: true,
                subtree: true,
            });
            });
        }
      
        updateUiElements() {
        const currentUrl = window.location.href;
      
        const isSpecialUrl = /\/#\w+/.test(currentUrl);
      
        const playerOptions = document.getElementById("player-options");
        const teamMenuContents = document.getElementById("team-menu-contents");
        const startMenuContainer = document.querySelector(
            "#start-menu .play-button-container",
        );
      
        if (!playerOptions) return;
      
        if (
            isSpecialUrl &&
            teamMenuContents &&
            playerOptions.parentNode !== teamMenuContents
        ) {
            teamMenuContents.appendChild(playerOptions);
        } else if (
            !isSpecialUrl &&
            startMenuContainer &&
            playerOptions.parentNode !== startMenuContainer
        ) {
            const firstChild = startMenuContainer.firstChild;
            startMenuContainer.insertBefore(playerOptions, firstChild);
        }
        const teamMenu = document.getElementById("team-menu");
        if (teamMenu) {
            teamMenu.style.height = "355px";
        }
        const menuBlocks = document.querySelectorAll(".menu-block");
        menuBlocks.forEach((block) => {
            block.style.maxHeight = "355px";
        });
        const leftColumn = document.getElementById("left-column");
        const newsBlock = document.getElementById("news-block");
        }
      
        updateCleanMode() {
            const leftColumn = document.getElementById("left-column");
            const newsBlock = document.getElementById("news-block");
      
            if (this.isClean) {
                if (leftColumn) leftColumn.style.display = "none";
                if (newsBlock) newsBlock.style.display = "none";
            } else {
                if (leftColumn) leftColumn.style.display = "block";
                if (newsBlock) newsBlock.style.display = "block";
            }
        }
      
        updateMenuButtonText() {
        const hideButton = document.getElementById("hideMenuButton");
        hideButton.textContent = this.isMenuVisible
            ? "Hide Menu [P]"
            : "Show Menu [P]";
        }
      
        setupKeyListeners() {
        document.addEventListener("keydown", (event) => {
            if (event.key.toLowerCase() === "p") {
            this.toggleMenuVisibility();
            }
        });
        }
        //menu
        initMenu() {
            const menu = document.createElement("div");
            menu.id = "soyAlguienMenu";
            Object.assign(menu.style, {
                backgroundColor: "rgba(0, 0, 0, 0.5)",
                padding: "15px",
                marginLeft: "15px",
                borderRadius: "10px",
                boxShadow: "0 4px 10px rgba(0, 0, 0, 0.3)",
                zIndex: "10001",
                width: "250px",
                fontFamily: "Arial, sans-serif",
                color: "#fff",
                maxHeight: "400px",
                overflowY: "auto",
                zIndex: "1",
            });
        
            const title = document.createElement("h2");
            title.textContent = "SoyAlguien Client";
            Object.assign(title.style, {
                margin: "0 0 10px",
                textAlign: "center",
                fontSize: "18px",
                color: "#FFAE00",
            });
            menu.appendChild(title);
        
            const updateLocalStorage = () => {
                localStorage.setItem(
                    "userSettings",
                    JSON.stringify({
                        isFpsVisible: this.isFpsVisible,
                        isPingVisible: this.isPingVisible,
                        isKillsVisible: this.isKillsVisible,
                        isClean: this.isClean
                    })
                );
            };
        
            this.loadLocalStorage();
        
            const createToggleButton = (text, stateKey, onClick) => {
                const button = document.createElement("button");
                button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                Object.assign(button.style, {
                    backgroundColor: this[stateKey] ? "#4CAF50" : "#FF0000",
                    border: "none",
                    color: "#fff",
                    padding: "10px",
                    borderRadius: "5px",
                    width: "100%",
                    marginBottom: "10px",
                    fontSize: "14px",
                    cursor: "pointer",
                });
                button.onclick = () => {
                    this[stateKey] = !this[stateKey];
                    onClick();
                    button.textContent = `${text} ${this[stateKey] ? "✅" : "❌"}`;
                    button.style.backgroundColor = this[stateKey] ? "#4CAF50" : "#FF0000";
                    updateLocalStorage();
                };
                return button;
            };
        
            menu.appendChild(createToggleButton("Show FPS", "isFpsVisible", this.updateFpsVisibility.bind(this)));
            menu.appendChild(createToggleButton("Show Ping", "isPingVisible", this.updatePingVisibility.bind(this)));
            menu.appendChild(createToggleButton("Show Kills", "isKillsVisible", this.updateKillsVisibility.bind(this)));
            menu.appendChild(createToggleButton("Clean Menu", "isClean", this.updateCleanMode.bind(this)));
        
            const hideShowToggle = document.createElement("button");
            hideShowToggle.textContent = `👀 Hide/Show Menu [P]`;
            Object.assign(hideShowToggle.style, {
                backgroundColor: "#6F42C1",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                marginBottom: "10px",
                fontSize: "14px",
                cursor: "pointer",
            });
            hideShowToggle.onclick = () => this.toggleMenuVisibility();
            menu.appendChild(hideShowToggle);
        
            const backgroundToggle = document.createElement("button");
            backgroundToggle.textContent = `🎨 Change Background`;
            Object.assign(backgroundToggle.style, {
                backgroundColor: "#007BFF",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                marginBottom: "10px",
                fontSize: "14px",
                cursor: "pointer",
            });
            backgroundToggle.onclick = () => {
                const backgroundElement = document.getElementById("background");
                if (!backgroundElement) {
                    alert("Element with id 'background' not found.");
                    return;
                }
                const choice = prompt(
                    "Enter '1' to provide a URL or '2' to upload a local image:"
                );
        
                if (choice === "1") {
                    const newBackgroundUrl = prompt("Enter the URL of the new background image:");
                    if (newBackgroundUrl) {
                        backgroundElement.style.backgroundImage = `url(${newBackgroundUrl})`;
                        this.saveBackgroundToLocalStorage(newBackgroundUrl);
                        alert("Background updated successfully!");
                    }
                } else if (choice === "2") {
                    const fileInput = document.createElement("input");
                    fileInput.type = "file";
                    fileInput.accept = "image/*";
                    fileInput.onchange = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = () => {
                                backgroundElement.style.backgroundImage = `url(${reader.result})`;
                                this.saveBackgroundToLocalStorage(file);
                                alert("Background updated successfully!");
                            };
                            reader.readAsDataURL(file);
                        }
                    };
                    fileInput.click();
                }
            };
            menu.appendChild(backgroundToggle);
        
            const moreSettingsButton = document.createElement("button");
            moreSettingsButton.textContent = "⚙️ More Settings";
            Object.assign(moreSettingsButton.style, {
                backgroundColor: "#1D1616",
                border: "none",
                color: "#fff",
                padding: "10px",
                borderRadius: "5px",
                width: "100%",
                fontSize: "14px",
                cursor: "pointer",
            });
            moreSettingsButton.onclick = () => this.openSubMenu();
            menu.appendChild(moreSettingsButton);
        
            window.onload = () => {
                const savedBackground = localStorage.getItem("backgroundImage");
                if (savedBackground) {
                    const backgroundElement = document.getElementById("background");
                    if (backgroundElement) {
                        backgroundElement.style.backgroundImage = `url(${savedBackground})`;
                    }
                }
            };
        
            const startRowTop = document.getElementById("start-row-top");
            if (startRowTop) {
                startRowTop.appendChild(menu);
            }
        
            this.menu = menu;
        }
        
        openSubMenu() {
            const overlay = document.createElement("div");
            const savedOpacity = localStorage.getItem('opacity') ?? 1;
            const savedScale = localStorage.getItem('scale') ?? 0.8;
        
            Object.assign(overlay.style, {
                position: "fixed",
                top: 0,
                left: 0,
                width: "100%",
                height: "100%",
                backgroundColor: "rgba(0, 0, 0, 0.7)",
                zIndex: "10002",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            });
        
            const subMenu = document.createElement("div");
            Object.assign(subMenu.style, {
                backgroundColor: "#333",
                padding: "20px",
                borderRadius: "15px",
                width: "400px",
                color: "#fff",
                textAlign: "left",
                zIndex: "10003",
                boxShadow: "0 4px 15px rgba(0, 0, 0, 0.5)",
            });
        
            const createSectionHeader = (text) => {
                const header = document.createElement("h3");
                header.textContent = text;
                Object.assign(header.style, {
                    fontSize: "18px",
                    fontWeight: "bold",
                    color: "#FFD700",
                    marginBottom: "10px",
                });
                return header;
            };
        
            const createSettingItem = (id, label, checked) => {
                const wrapper = document.createElement("div");
                Object.assign(wrapper.style, {
                    display: "flex",
                    alignItems: "center",
                    padding: "10px",
                    marginBottom: "10px",
                    borderRadius: "8px",
                    backgroundColor: "#444",
                });
        
                const checkbox = document.createElement("input");
                checkbox.id = id;
                checkbox.type = "checkbox";
                checkbox.checked = checked;
                Object.assign(checkbox.style, {
                    marginRight: "10px",
                    cursor: "pointer",
                });
        
                const labelText = document.createElement("p");
                labelText.textContent = label;
                Object.assign(labelText.style, {
                    margin: "0",
                    fontSize: "16px",
                    color: "#fff",
                });
        
                wrapper.appendChild(checkbox);
                wrapper.appendChild(labelText);
                return wrapper;
            };
        
            const createCustomSlider = (id, min, max, step, value, onChange) => {
                const wrapper = document.createElement("div");
                Object.assign(wrapper.style, {
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "space-between",
                    marginBottom: "10px",
                });
        
                const slider = document.createElement("input");
                slider.type = "range";
                slider.id = id;
                slider.min = min;
                slider.max = max;
                slider.step = step;
                slider.value = value;
                Object.assign(slider.style, {
                    flex: "1",
                    marginRight: "10px",
                });
        
                const valueLabel = document.createElement("span");
                valueLabel.textContent = value;
                Object.assign(valueLabel.style, {
                    minWidth: "30px",
                    textAlign: "right",
                    color: "#fff",
                });
        
                slider.oninput = () => {
                    valueLabel.textContent = slider.value;
                    onChange(slider.value);
                };
        
                wrapper.appendChild(slider);
                wrapper.appendChild(valueLabel);
                return wrapper;
            };
        
            const titleClient = document.createElement("h2");
            titleClient.textContent = "Client Settings";
            Object.assign(titleClient.style, {
                margin: "0 0 20px",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#FFAE00",
                textAlign: "center",
            });
            subMenu.appendChild(titleClient);
        
            subMenu.appendChild(createSectionHeader("Local Rotation"));
            subMenu.appendChild(createSettingItem(
                "local-rotation",
                "Enable/disable local rotation",
                this.isLocalRotation
            ));
        
            subMenu.appendChild(createSectionHeader("FPS Uncap"));
            subMenu.appendChild(createSettingItem(
                "fps-uncap",
                "Enable/disable FPS uncap",
                this.isFpsUncapped
            ));
        
            subMenu.appendChild(createSectionHeader("Movement Interpolation"));
            subMenu.appendChild(createSettingItem(
                "movement-interpolation",
                "Enable/disable smooth movement",
                this.isInterpolation
            ));
      
            subMenu.appendChild(createSectionHeader("Hide Mini Map"));
            subMenu.appendChild(createSettingItem(
                "hide-mini-map",
                "The mini map will start hidden",
                this.isStartMapHide
            ));
        
            const titleUI = document.createElement("h2");
            titleUI.textContent = "UI Settings";
            Object.assign(titleUI.style, {
                margin: "20px 0 20px",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#FFAE00",
                textAlign: "center",
            });
            subMenu.appendChild(titleUI);
        
            subMenu.appendChild(createSectionHeader("Opacity"));
            subMenu.appendChild(createCustomSlider(
                "opacity-slider",
                0, 1, 0.01,
                savedOpacity,
                (value) => localStorage.setItem('opacity', value)
            ));
        
            subMenu.appendChild(createSectionHeader("Scale"));
            subMenu.appendChild(createCustomSlider(
                "scale-slider",
                0.5, 1, 0.01,
                savedScale,
                (value) => localStorage.setItem('scale', value)
            ));
        
      
            const closeButton = document.createElement("button");
            closeButton.textContent = "Close";
            Object.assign(closeButton.style, {
                backgroundColor: "#FF4D4D",
                border: "none",
                color: "#fff",
                padding: "10px 20px",
                borderRadius: "8px",
                marginTop: "20px",
                cursor: "pointer",
                fontSize: "16px",
                fontWeight: "bold",
                transition: "background-color 0.3s ease",
                width: "100%",
            });
            closeButton.onmouseenter = () => {
                closeButton.style.backgroundColor = "#FF3333";
            };
            closeButton.onmouseleave = () => {
                closeButton.style.backgroundColor = "#FF4D4D";
            };
            closeButton.onclick = () => {
                document.body.removeChild(overlay);
            };
            subMenu.appendChild(closeButton);
        
            overlay.appendChild(subMenu);
            document.body.appendChild(overlay);
        
            this.attachSettingsEvents();
        }
        
        
        customUiElements(){
            let scale = parseFloat(localStorage.getItem('scale')) || 0.8;
            let opacity = parseFloat(localStorage.getItem('opacity')) || 1;
            
            const healthBoost = document.getElementById('ui-bottom-center-0');
            healthBoost.style.transform = `translateX(-50%) scale(${scale})`;
            healthBoost.style.opacity = opacity;
            healthBoost.style.bottom = window.innerWidth > 1200 ? `-${((1-scale) * 20)+2}px` : '';
      
            const weapon = document.getElementById('ui-weapon-container');
            weapon.style.scale = scale;
            weapon.style.opacity = opacity;
            weapon.style.transformOrigin = "right";
      
            const inventory = document.getElementById('ui-right-center');
            inventory.style.scale = scale*1.1;
            inventory.style.opacity = opacity;
            inventory.style.marginTop = `-${(1 - scale) * 100}px`;
      
            const info = document.getElementById('ui-top-left');
            info.style.transformOrigin = 'top left';
            info.style.scale = scale*1.1;
            info.style.opacity = opacity;
      
            const players = document.getElementById('ui-leaderboard-wrapper');
            players.style.scale = scale;
            players.style.opacity = opacity;
            players.style.transformOrigin = 'top right';
      
            const killfeed = document.getElementById('ui-killfeed-wrapper');
            killfeed.style.scale = scale;
            killfeed.style.opacity = opacity;
            killfeed.style.transformOrigin = "right";
      
            const ammo = document.getElementById('ui-equipped-ammo-wrapper');
            ammo.style.opacity = opacity;
            ammo.style.transform = `translateX(-50%) scale(${scale})`;
            ammo.style.bottom = 62-((1-scale)*20);
      
            const gears = document.getElementById('ui-bottom-center-right');
            gears.style.opacity = opacity;
            gears.style.scale = scale; 
      
            const scopes = document.getElementById('ui-top-center-scopes');
            scopes.style.opacity = opacity;
            scopes.style.scale = scale; 
        }
        
        attachSettingsEvents() {
            const localRotationCheckbox = document.querySelector("#local-rotation");
            if (localRotationCheckbox) {
                localRotationCheckbox.addEventListener("change", (event) => {
                    this.isLocalRotation = event.target.checked;
                    window.isLocalRotation = this.isLocalRotation;
                    this.saveSettings();
                });
            }
        
            const fpsUncapCheckbox = document.querySelector("#fps-uncap");
            if (fpsUncapCheckbox) {
                fpsUncapCheckbox.addEventListener("change", (event) => {
                    this.isFpsUncapped = event.target.checked;
                    this.saveSettings();
                });
            }
        
            const interpolationCheckbox = document.querySelector("#movement-interpolation");
            if (interpolationCheckbox) {
                interpolationCheckbox.addEventListener("change", (event) => {
                    this.isInterpolation = event.target.checked;
                    window.isInterpolation = this.isInterpolation;
                    this.saveSettings();
                });
            }
      
            const MiniMapCheckbox = document.querySelector("#hide-mini-map");
            if (MiniMapCheckbox) {
                MiniMapCheckbox.addEventListener("change", (event) => {
                    this.isStartMapHide = event.target.checked;
                    window.isStartMapHide = this.isStartMapHide;
                    this.saveSettings();
                });
            }
        
            const opacitySlider = document.querySelector("#opacity-slider");
            if (opacitySlider) {
                opacitySlider.addEventListener("input", (event) => {
                    localStorage.setItem("opacity", event.target.value);
                    this.customUiElements();
                });
            }
        
            const scaleSlider = document.querySelector("#scale-slider");
            if (scaleSlider) {
                scaleSlider.addEventListener("input", (event) => {
                    localStorage.setItem("scale", event.target.value);
                    this.customUiElements();
                });
            }
        }
        
        saveSettings() {
            const settings = {
                "local-rotation": this.isLocalRotation,
                "fps-uncap": this.isFpsUncapped,
                "movement-interpolation": this.isInterpolation,
                "hide-mini-map": this.isStartMapHide,
            };
            localStorage.setItem("gameSettings", JSON.stringify(settings));
        }
        
      
        toggleMenuVisibility() {
        const isVisible = this.menu.style.display !== "none";
        this.menu.style.display = isVisible ? "none" : "block";
        }
      
        startUpdateLoop() {
        const now = performance.now();
        const delta = now - this.lastFrameTime;
      
        this.frameCount++;
      
        if (delta >= 1000) {
            this.fps = Math.round((this.frameCount * 1000) / delta);
            this.frameCount = 0;
            this.lastFrameTime = now;
      
            this.kills = this.getKills();
      
            if (this.isFpsVisible && this.fpsCounter) {
                //temporal fix fps counter
            this.fpsCounter.textContent = `FPS: ${Math.round(this.fps/2)}`;
            }
      
            if (this.isKillsVisible && this.killsCounter) {
            this.killsCounter.textContent = `Kills: ${this.kills}`;
            }
      
            if (this.isPingVisible && this.pingCounter && this.pingTest) {
            const result = this.pingTest.getPingResult();
            this.pingCounter.textContent = `PING: ${result.ping} ms`;
            }
        }
      
        this.startPingTest();
        this.updateFpsToggle()
        this.animationFrameCallback(() => this.startUpdateLoop());
        this.updateUiElements();
        this.updateCleanMode();
        this.updateBoostBars();
        this.updateHealthBars();
        }
      
        pingShow() {
            const serverSelect = document.getElementById("server-select-main");
        
            if (!serverSelect) return;
        
            const updateOptionWithPing = (optionElement, ping) => {
                const pingText = ` (${ping} ms)`;
                
                const originalText = optionElement.textContent.replace(/\(\d+ ms\)/g, "").trim();
                optionElement.textContent = `${originalText}${pingText}`;
            
                if (ping > 300) {
                optionElement.style.color = "red";
                } else if (ping > 200) {
                optionElement.style.color = "orange";
                } else if (ping > 100) {
                optionElement.style.color = "yellow";
                } else {
                optionElement.style.color = "green";
                }
            };
            
            
        
            const servers = [
            { region: "NA", url: "usr.mathsiscoolfun.com:8001" },
            { region: "EU", url: "eur.mathsiscoolfun.com:8001" },
            { region: "Asia", url: "asr.mathsiscoolfun.com:8001" },
            { region: "SA", url: "sa.mathsiscoolfun.com:8001" },
            ];
        
            servers.forEach((server) => {
            const pingTest = new PingTest(server);
            pingTest.startPingTest();
        
            const interval = setInterval(() => {
                const pingResult = pingTest.getPingResult();
                if (pingResult.ping !== 9999 && pingResult.ping !== "Error") {
                const optionElement = serverSelect.querySelector(`option[value="${server.region.toLowerCase()}"]`);
                if (optionElement) {
                    updateOptionWithPing(optionElement, pingResult.ping);
                }
                clearInterval(interval);
                }
            }, 2000);
            });
        }
        
      }
      
      class PingTest {
        constructor(selectedServer) {
        this.ptcDataBuf = new ArrayBuffer(1);
        this.test = {
            region: selectedServer.region,
            url: `wss://${selectedServer.url}/ptc`,
            ping: 9999,
            ws: null,
            sendTime: 0,
            retryCount: 0,
        };
        }
      
        startPingTest() {
        if (!this.test.ws) {
            const ws = new WebSocket(this.test.url);
            ws.binaryType = "arraybuffer";
      
            ws.onopen = () => {
            this.sendPing();
            this.test.retryCount = 0;
            };
      
            ws.onmessage = () => {
            const elapsed = (Date.now() - this.test.sendTime) / 1e3;
            this.test.ping = Math.round(elapsed * 1000);
            this.test.retryCount = 0;
            setTimeout(() => this.sendPing(), 200);
            };
      
            ws.onerror = () => {
            this.test.ping = "Error";
            this.test.retryCount++;
            if (this.test.retryCount < 5) {
                setTimeout(() => this.startPingTest(), 2000);
            } else {
                this.test.ws.close();
                this.test.ws = null;
            }
            };
      
            ws.onclose = () => {
            this.test.ws = null;
            };
      
            this.test.ws = ws;
        }
        }
      
        sendPing() {
            if (this.test.ws && this.test.ws.readyState === WebSocket.OPEN) {
            this.test.sendTime = Date.now();
            this.test.ws.send(this.ptcDataBuf);
            }
        }
        
      
        getPingResult() {
        return {
            region: this.test.region,
            ping: this.test.ping,
        };
        }
      }
      
      const gameMod = new GameMod();
